{
    "Set GuideHeader.getProjects()": "non",
    "List AbstractGuide.getImages()": "non",
    "String Fixtures.load(String)": "src",
    "String BlogController.showPost(String,String,String,String,Model)": "non",
    "String URL.toString()": "non",
    "List Project.getProjectReleases()": "non",
    "AbstractIterableAssert AbstractIterableAssert.hasSize(int)": "san",
    "RootNode PegDownProcessor.parseMarkdown(char[])": "non",
    "ProjectRelease ProjectReleaseBuilder.build()": "non",
    "void Link.setRel(String)": "non",
    "List TeamRepository.findByHiddenOrderByNameAsc(boolean)": "src",
    "void Entry.setAlternateLinks(List)": "non",
    "boolean ProjectRelease.equals(Object)": "non",
    "boolean MarkdownRenderer.canRender(MediaType)": "non",
    "List Tutorial.getImages()": "non",
    "String DefaultGuideHeader.getCiStatusImageUrl()": "non",
    "int ProjectGroup.hashCode()": "san",
    "void MemberProfile.setSpeakerdeckUsername(String)": "non",
    "void Feed.setOtherLinks(List)": "non",
    "int ProjectRelease.compareTo(ProjectRelease)": "non",
    "String PostContentRenderer.decode(String)": "non",
    "void Post.setCreatedAt(Date)": "non",
    "void Log.error(Object)": "sin",
    "String PostCategory.getUrlSlug()": "non",
    "String CloudFoundryMvcConfig.getGitCommitId()": "non",
    "ResponseEntity DocsWebhookController.handleWebhookAuthenticationFailure(WebhookAuthenticationException)": "sin",
    "String GuideContentResource.getTableOfContents()": "non",
    "OptionalInt IntStream.max()": "non",
    "String Tutorial.getPushToPwsUrl()": "non",
    "void Feed.setAlternateLinks(List)": "non",
    "void AtomFeedView.setAuthor(Post,Entry)": "non",
    "Matcher CoreMatchers.nullValue()": "non",
    "void SpringToolsPlatformRepository.delete(Serializable)": "sin",
    "void Entry.setCategories(List)": "non",
    "Page BlogService.refreshPosts(int,int)": "sin",
    "void FilterRegistrationBean.setFilter(Filter)": "non",
    "ProjectRelease ProjectMetadataController.updateReleaseMetadata(String,ProjectRelease)": "src",
    "Printer Printer.print(char)": "sin",
    "String DefaultGuideHeader.getZipUrl()": "src",
    "Long MemberProfile.getId()": "non",
    "String ProjectsController.showProject(Model,String)": "non",
    "String ProjectRelease.getVersion()": "non",
    "ResultMatcher JsonPathResultMatchers.doesNotExist()": "non",
    "int MemberProfile.hashCode()": "san",
    "PostFormat Post.getFormat()": "non",
    "void MatcherAssertionErrors.assertThat(Object,Matcher)": "san",
    "Object Connection.getApi()": "src",
    "void Assert.isTrue(boolean,String)": "san",
    "Long Long.valueOf(String)": "non",
    "String MarkdownRenderer.renderToHtml(String)": "sin",
    "void PostForm.setDraft(boolean)": "non",
    "DataSource CloudFoundryDatabaseConfig.dataSource()": "src",
    "void Feed.setUpdated(Date)": "non",
    "void Post.setCategory(PostCategory)": "non",
    "void Post.setFormat(PostFormat)": "non",
    "long Math.min(long,long)": "non",
    "void RegistrationBean.addInitParameter(String,String)": "non",
    "String SaganRendererClient.renderAsciidoc(String)": "sin",
    "void MemberProfile.setUsername(String)": "non",
    "void Locale.setDefault(Locale)": "non",
    "String Topical.getContent()": "non",
    "String PageElement.getLabel()": "non",
    "String SpringToolsAdminController.newPlatform(Model)": "src",
    "Stream Collection.stream()": "non",
    "void Attributes.setSkipFrontMatter(boolean)": "non",
    "Set GettingStartedGuide.getProjects()": "non",
    "void Log.error(Object,Throwable)": "non",
    "String DateFormat.format(Date)": "non",
    "int OptionalInt.orElse(int)": "non",
    "MemberProfileBuilder MemberProfileBuilder.geoLocation(float,float)": "src",
    "Object PostRepository.findOne(Serializable)": "src",
    "List GithubClient.fetchOrgRepositories(String)": "src",
    "String SaganRendererClient.renderMarkdown(String)": "sin",
    "void Post.setDraft(boolean)": "non",
    "String Tutorial.getTypeLabel()": "non",
    "List ProjectMetadataService.getActiveTopLevelProjects()": "sin",
    "void ConfigurableEnvironment.addActiveProfile(String)": "non",
    "String TeamController.showTeam(Model)": "src",
    "List ProjectMetadataRepository.findByCategory(String,Sort)": "src",
    "int Object.hashCode()": "san",
    "String PostCategory.getId()": "non",
    "boolean List.add(Object)": "non",
    "String Project.getRepoUrl()": "non",
    "String GuideContentResource.getContent()": "non",
    "HttpStatus ResponseEntity.getStatusCode()": "non",
    "Set Collections.singleton(Object)": "non",
    "void ProjectAdminController.normalizeProjectReleases(Project,String)": "non",
    "Authentication SecurityContext.getAuthentication()": "src",
    "OngoingStubbing OngoingStubbing.thenAnswer(Answer)": "non",
    "Object RestOperations.getForObject(String,Class,java.lang.Object[])": "src",
    "String PostView.getPath()": "src",
    "String AbstractGuide.createPushToPwsUrl(String)": "sin",
    "String AbstractGuide.getDescription()": "non",
    "ArgumentCaptor ArgumentCaptor.forClass(Class)": "non",
    "boolean File.isDirectory()": "sin",
    "Page PostRepository.findByDraftFalseAndAuthorAndPublishAtBeforeOrderByPublishAtDesc(MemberProfile,Date,Pageable)": "src",
    "void PwsGuideContentContributor.contribute(GuideContentResource,File)": "non",
    "void GettingStartedGuide.setTypeLabel(String)": "nonsan",
    "String StringBuffer.toString()": "non",
    "String Matcher.group(int)": "non",
    "void Map.forEach(BiConsumer)": "non",
    "PostFormat PostForm.getFormat()": "non",
    "Object PostRepository.save(Object)": "sin",
    "Matcher Matchers.hasItems(java.lang.Objecnont[])": "non",
    "ResponseEntity GettingStartedGuideController.loadImage(String,String)": "src",
    "Object Matchers.eq(Object)": "non",
    "DefaultResponseCreator MockRestResponseCreators.withSuccess(String,MediaType)": "non",
    "String Project.getRenderedOverview()": "non",
    "boolean List.contains(Object)": "non",
    "Charset Charset.forName(String)": "non",
    "Long Post.getId()": "non",
    "String Project.getParentId()": "non",
    "String TeamAdminController.saveProfile(Principal,MemberProfile)": "src",
    "Object LinkedHashMap.get(Object)": "non",
    "boolean StringUtils.isEmpty(Object)": "non",
    "void SecurityConfig.configureHeaders(HeadersConfigurer)": "non",
    "String MemberProfile.getFullName()": "non",
    "String Topical.getGitUrl()": "src",
    "PostBuilder PostnonBuilder.draft()": "non",
    "HttpHeaders HttpEntity.getHeaders()": "non",
    "org.springframework.core.io.Resource[] ResourcePatternResolver.getResources(String)": "non",
    "Date Post.getCreatedAt()": "non",
    "VersionResourceResolver VersionResourceResolver.addFixedVersionStrategy(String,java.lang.String[])": "src",
    "void Feed.setId(String)": "non",
    "ProjectRelease ProjectMetadataController.removeReleaseMetadata(String,String)": "sin",
    "String Matchers.anyString()": "non",
    "void ProjectMetadataRepository.delete(Serializable)": "sin",
    "HeadersConfigurer HeadersConfigurer.addHeaderWriter(HeaderWriter)": "non",
    "void Project.setRenderedBootConfig(String)": "non",
    "InterceptorRegistration InterceptorRegistry.addInterceptor(HandlerInterceptor)": "non",
    "ChainingTextStringParser Biweekly.parse(String)": "non",
    "String AsciidoctorRenderer.renderToHtml(String)": "sin",
    "String Tutorial.getSshUrl()": "src",
    "String MemberProfile.getName()": "non",
    "String DefaultGuideHeader.getCiLatestUrl()": "src",
    "MemberProfileBuilder MemberProfileBuilder.username(String)": "non",
    "Page BlogService.getPublishedPosts(Pageable)": "src",
    "String GuideHeader.getSshUrl()": "src",
    "String DefaultGuideHeader.getName()": "non",
    "VerificationMode Mockito.never()": "san",
    "Pageable PageableFactory.forDashboard(int)": "non",
    "List ICalendar.getEvents()": "src",
    "Object Mockito.verify(Object)": "san",
    "String URI.getHost()": "non",
    "void TeamService.updateAvatarUrlwithGravatar(MemberProfile)": "sin",
    "void PostFormAdapter.summarize(Post)": "non",
    "AbstractObjectArrayAssert AbstractObjectArrayAssert.containsExactlyInAnyOrder(java.lang.Object[])": "san",
    "GuideType GuideResource.getType()": "non",
    "String SpringToolsAdminController.edit(SpringToolsPlatform,Model)": "src",
    "String AbstractGuide.getGithubUrl()": "non",
    "byte[] StreamUtils.copyToByteArray(InputStream)": "non",
    "PostFormat PostFormat.valueOf(String)": "non",
    "List AuthorityUtils.commaSeparatedStringToAuthorityList(String)": "non",
    "java.io.File[] File.listFiles()": "src",
    "String MessageDigestPasswordEncoder.encodePassword(String,Object)": "san",
    "String BlogAdminController.createPost(Principal,PostForm,BindingResult,Model)": "src",
    "Post BlogService.getPost(String,Date)": "src",
    "PostBuilder PostBuilder.author(String,String)": "non",
    "Date PostView.getCreatedAt()": "non",
    "Collection AbstractCacheManager.getCacheNames()": "non",
    "GuideType GuideType.valueOf(String)": "non",
    "StringBuilder StringBuilder.append(Object)": "non",
    "String String.replaceAll(String,String)": "non",
    "ResourceChainRegistration ResourceChainRegistration.addResolver(ResourceResolver)": "non",
    "sagan.blog.PostFormat[] PostFormat.values()": "non",
    "List List.subList(int,int)": "non",
    "List ProjectMetadataController.releaseMetadata(String)": "non",
    "List AtomFeedView.buildFeedEntries(Map,HttpServletRequest,HttpServletResponse)": "non",
    "void GuideContentResource.setTableOfContents(String)": "non",
    "Object HttpEntity.getBody()": "non",
    "boolean PostView.isBroadcast()": "non",
    "boolean String.contains(CharSequence)": "non",
    "String GuideType.stripPrefix(String)": "non",
    "List PaginationInfo.getPageElements()": "non",
    "File File.createTempFile(String,String)": "sin",
    "boolean MemberProfile.hasTwitterUsername()": "non",
    "ResultMatcher JsonPathResultMatchers.value(Matcher)": "non",
    "String DefaultGuideHeader.getRepositoryName()": "non",
    "String GettingStartedGuide.getContent()": "non",
    "GuideMetadata SaganRendererClient.fetchTopicalGuide(String)": "non",
    "Printer Printer.println()": "sin",
    "ContentResultMatchers MockMvcResultMatchers.content()": "non",
    "String HttpServletRequest.getServerName()": "src",
    "Object CachedRestClient.get(RestOperations,String,Class)": "src",
    "String BlogController.listPublishedPostsForYear(int,int,Model)": "non",
    "boolean String.equals(Object)": "non",
    "String AbstractGuide.getTypeLabel()": "non",
    "Sort Page.getSort()": "non",
    "int LocalDate.compareTo(ChronoLocalDate)": "non",
    "Page PostRepository.findByDraftFalseAndPublishAtBeforeOrderByPublishAtDesc(Date,Pageable)": "src",
    "void Person.setName(String)": "non",
    "boolean ProjectRelease.isSnapshot()": "non",
    "byte[] String.getBytes()": "non",
    "Page BlogService.getPublishedPostsByDate(int,int,int,Pageable)": "src",
    "void AtomFeedView.setBlogUrl(String,Feed)": "sin",
    "OngoingStubbing Mockito.when(Object)": "non",
    "String Tutorial.getContent()": "non",
    "Matcher Matchers.notNullValue()": "non",
    "List Collections.singletonList(Object)": "non",
    "Integer Integer.valueOf(int)": "non",
    "Page BlogService.getAllPosts(Pageable)": "src",
    "void ProjectRelease.setRepository(ProjectRepository)": "non",
    "String AbstractGuide.getPushToPwsUrl()": "non",
    "MemberProfile SignInService.getOrCreateMemberProfile(Long,GitHub)": "non",
    "Graphics BufferedImage.getGraphics()": "non",
    "String BlogController.listPublishedPosts(Model,int)": "src",
    "PostView PostView.of(Post,DateFactory)": "non",
    "int List.size()": "non",
    "boolean Post.isBroadcast()": "non",
    "String PostCategory.toString()": "non",
    "Long TeamLocation.getMemberId()": "non",
    "void Logger.error(String,Throwable)": "san",
    "Cloud CloudFoundryDatabaseConfig.cloud()": "non",
    "void MemberProfile.setLanyrdUsername(String)": "non",
    "sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchAllGuides()": "src",
    "org.springframework.social.github.api.GitHubUser[] DefaultTeamImporter.getGitHubUsers(GitHub)": "src",
    "ProjectRelease Project.removeProjectRelease(String)": "sin",
    "String ProjectRepository.toString()": "non",
    "String Link.toString()": "non",
    "String GuideResource.getCloneUrl()": "non",
    "AbstractAssert AbstractAssert.isInstanceOf(Class)": "san",
    "String Properties.getProperty(String)": "non",
    "void MemberProfile.setHidden(boolean)": "non",
    "void ProjectRelease.setRefDocUrl(String)": "non",
    "String SiteUrl.getUrl()": "src",
    "void GuideImage.setEncodedContent(String)": "non",
    "void GuideContentContributor.contribute(GuideContentResource,File)": "non",
    "void Assert.assertNotNull(Object)": "san",
    "void MatcherAssert.assertThat(String,Object,Matcher)": "san",
    "String GuideResource.getName()": "non",
    "void MemberProfile.setJobTitle(String)": "non",
    "Post PostRepository.findByPublicSlugAndDraftFalseAndPublishAtBefore(String,Date)": "src",
    "String Connection.getDisplayName()": "non",
    "byte[] Fixtures.loadData(String)": "src",
    "List TeamService.fetchActiveMembers()": "src",
    "void AtomFeedView.setCategories(Post,Entry)": "non",
    "Section Section.valueOf(String)": "non",
    "boolean Set.add(Object)": "non",
    "String TeamAdminController.getTeamAdminPage(Model)": "src",
    "String Topical.getTypeLabel()": "non",
    "void Project.setRenderedOverview(String)": "non",
    "void GuideContentResource.setContent(String)": "non",
    "java.lang.String[] Version.getParts()": "non",
    "IterableAssert Assertions.assertThat(Iterable)": "san",
    "Post BlogService.getPost(Long)": "src",
    "Boolean Boolean.valueOf(boolean)": "non",
    "Date PostFormAdapter.createdDate(PostForm,Date)": "non",
    "void ZipFile.close()": "sin",
    "AbstractCharSequenceAssert Assertions.assertThat(String)": "san",
    "String SpringToolsAdminController.delete(String)": "sin",
    "java.lang.String[] GuideResource.getProjects()": "non",
    "Object ControllerLinkBuilder.methodOn(Class,java.lang.Object[])": "non",
    "Optional Topicals.findByName(String)": "src",
    "boolean MemberProfile.equals(Object)": "non",
    "GuideContentResource GuideRenderer.render(GuideType,String)": "sin",
    "void ArrayList.forEach(Consumer)": "non",
    "void ViewControllerRegistration.setViewName(String)": "non",
    "boolean PageElement.isCurrentPage()": "non",
    "MemberProfile PostView.getAuthor()": "non",
    "void SetSystemProperty.after()": "sin",
    "String LocalDate.toString()": "non",
    "ResponseEntity TutorialController.loadImage(String,String)": "src",
    "Stream Stream.sorted()": "non",
    "List ProjectMetadataRepository.findDistinctByCategoryAndParentProjectIsNull(String,Sort)": "src",
    "boolean PaginationInfo.isVisible()": "non",
    "int HeaderNode.getLevel()": "non",
    "Stream List.stream()": "non",
    "ConnectionRepository InMemoryUsersConnectionRepository.createConnectionRepository(String)": "src",
    "boolean MemberProfile.hasLanyrdUsername()": "non",
    "void Topical.setTypeLabel(String)": "non",
    "RequestMatcher MockRestRequestMatchers.header(String,java.lang.String[])": "san",
    "String GuideHeader.getGitUrl()": "non",
    "boolean ProjectRepository.equals(Object)": "non",
    "sagan.site.guides.GuideHeader[] Topicals.findByProject(Project)": "non",
    "PostCategory PostView.getCategory()": "non",
    "String Tutorial.getTableOfContents()": "non",
    "List Arrays.asList(java.lang.Object[])": "non",
    "String PostFormat.getDisplayName()": "non",
    "String Element.text()": "non",
    "void PostFormAdapter.setPostProperties(PostForm,String,Post)": "non",
    "String MockHttpServletResponse.getRedirectedUrl()": "src",
    "ResourceSupport GuideResourceAssembler.toResource(Object)": "non",
    "String StaticPagePathFinder.buildRequestMapping(String)": "src",
    "Float Float.valueOf(String)": "non",
    "Object Map.put(Object,Object)": "non",
    "MemberProfile TeamRepository.findByGithubId(Long)": "src",
    "float TeamLocation.getLatitude()": "non",
    "Page BlogService.getDraftPosts(Pageable)": "src",
    "String GettingStartedGuide.getCiStatusImageUrl()": "src",
    "GuideHeader GettingStartedGuide.getHeader()": "non",
    "RedisConnectionFactory CloudFoundryCacheConfig.redisConnectionFactory()": "non",
    "void SiteApplication.main(java.lang.String[])": "non",
    "boolean ArrayList.add(Object)": "non",
    "String GettingStartedGuideController.viewGuide(String,Model)": "src",
    "String ProjectRelease.getVersionDisplayName(boolean)": "non",
    "MemberProfile MemberProfileBuilder.build()": "non",
    "boolean List.isEmpty()": "non",
    "AbstractObjectArrayAssert Assertions.assertThat(java.lang.Object[])": "san",
    "Matcher CoreMatchers.equalTo(Object)": "non",
    "int Link.hashCode()": "src",
    "Date PostView.getPublishAt()": "non",
    "String StringUtils.arrayToCommaDelimitedString(java.lang.Object[])": "non",
    "SecurityContext SecurityContextHolder.getContext()": "non",
    "void PostForm.setCreatedAt(Date)": "non",
    "String Topical.getSshUrl()": "non",
    "Project ProjectMetadataController.updateProjectMetadata(String,List)": "src",
    "boolean ZipEntry.isDirectory()": "src",
    "String MemberProfile.getLanyrdUsername()": "non",
    "List StaticPagePathFinder.findPaths()": "src",
    "void MemberProfile.setGeoLocation(GeoLocation)": "non",
    "Post PostBuilder.build()": "non",
    "PostCategory PostCategoryFormatter.parse(String,Locale)": "non",
    "String AbstractGuide.getContent()": "non",
    "String ProjectAdminController.save(Project,List,List,String,String)": "src",
    "void FilterChain.doFilter(ServletRequest,ServletResponse)": "non",
    "List Page.getContent()": "non",
    "void Project.setChildProjectList(List)": "non",
    "Post PostRepository.findByPublicSlugAliasesInAndDraftFalseAndPublishAtBefore(Set,Date)": "src",
    "void AtomFeedView.setId(Post,Entry,HttpServletRequest)": "non",
    "void PostForm.setContent(String)": "non",
    "void Project.setRawOverview(String)": "non",
    "PostBuilder PostBuilder.title(String)": "non",
    "String MemberProfile.getAvatarUrl()": "non",
    "RedirectView BlogController.handle(PostMovedException)": "src",
    "ResponseEntity DocsWebhookController.processTopicalsUpdate(String,String,String,String)": "src",
    "Enumeration ZipFile.entries()": "src",
    "String LocalDate.toString(String)": "non",
    "String ToHtmlSerializer.toHtml(RootNode)": "sin",
    "String LearnController.learn(Model)": "src",
    "ProjectReleaseBuilder ProjectReleaseBuilder.versionName(String)": "non",
    "String GettingStartedGuide.getPushToPwsUrl()": "src",
    "Page BlogService.getPublishedPostsByDate(int,int,Pageable)": "src",
    "FilterRegistrationBean UrlRewriterFilterConfig.rewriteFilterConfig()": "non",
    "void Post.setPublishAt(Date)": "non",
    "AtomFeedView AtomFeedController.listPublishedPostsForCategory(PostCategory,Model,HttpServletResponse)": "src",
    "String ProjectAdminController.delete(String,Model)": "src",
    "ICalendar ChainingTextStringParser.first()": "non",
    "String GitHubUser.getLogin()": "src",
    "OptionsBuilder OptionsBuilder.baseDir(File)": "non",
    "OptionsBuilder OptionsBuilder.headerFooter(boolean)": "non",
    "long Page.getTotalElements()": "non",
    "String URL.getPath()": "non",
    "String FilterConfig.getInitParameter(String)": "non",
    "String Project.getRenderedBootConfig()": "non",
    "String Link.getRel()": "non",
    "String GuideHeader.getDescription()": "non",
    "String SpringToolsPlatform.getId()": "non",
    "void AbstractGuide.setTypeLabel(String)": "non",
    "String ProjectAdminController.edit(Project,Model)": "src",
    "StringBuilder StringBuilder.append(int)": "non",
    "PostBuilder PostBuilder.publishYesterday()": "non",
    "Matcher Is.is(Object)": "non",
    "void UrlRewriteFilter.checkConf(Conf)": "san",
    "String BlogAdminController.dashboard(Model,int)": "src",
    "Set AbstractGuide.getProjects()": "non",
    "void Project.setParentProject(Project)": "non",
    "String Elements.html()": "non",
    "boolean PostForm.isBroadcast()": "non",
    "Matcher CoreMatchers.containsString(String)": "non",
    "void DefaultTeamImporter.importTeamMembers(GitHub)": "sin",
    "Pageable PageableFactory.build(int,int)": "non",
    "String GettingStartedGuide.getGitUrl()": "non",
    "boolean Matcher.find()": "non",
    "void AtomFeedView.buildFeedMetadata(Map,Feed,HttpServletRequest)": "non",
    "void PageElementsBuilder.addEllipsis(ArrayList)": "non",
    "URI Event.parseLink(VEvent)": "non",
    "List ProjectMetadataService.getProjects()": "src",
    "ProjectionIO XBProjector.io()": "non",
    "CacheManager StandaloneCacheConfig.simpleCacheManager()": "non",
    "String GuideResource.getSshUrl()": "non",
    "void ExpectedException.expect(Class)": "san",
    "Iterator List.iterator()": "non",
    "IterableAssert IterableAssert.containsExactly(java.lang.Object[])": "san",
    "List Collections.emptyList()": "non",
    "Link MemberProfile.getGithubLink()": "non",
    "String StringWriter.toString()": "non",
    "Object Matchers.anyObject()": "non",
    "Comparator Comparator.comparingInt(ToIntFunction)": "non",
    "boolean ProjectRelease.hasApiDocUrl()": "non",
    "PostBuilder PostBuilder.unscheduled()": "non",
    "ResultMatcher ModelResultMatchers.attribute(String,Object)": "san",
    "Object CloneableBean.beanClone(Object,Set)": "non",
    "URL ClassLoader.getResource(String)": "non",
    "int ArrayList.size()": "non",
    "int String.hashCode()": "san",
    "String AbstractUrlBasedView.getUrl()": "non",
    "MemberProfileBuilder MemberProfileBuilder.id(Long)": "non",
    "ResultMatcher JsonPathResultMatchers.value(Object)": "san",
    "sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchTopicalGuides()": "src",
    "void ProjectAdminController.denormalizeProjectReleases(Project)": "non",
    "void PostFormAdapter.refreshPost(Post)": "non",
    "void VersionBadgeService.preDestroy()": "non",
    "String MemberProfile.getGithubUsername()": "non",
    "String GettingStartedGuide.getZipUrl()": "src",
    "GitHubUserProfile UserOperations.getUserProfile()": "src",
    "String Feed.getId()": "src",
    "Object ArrayList.remove(int)": "non",
    "String ProjectRelease.getApiDocUrl()": "non",
    "String AbstractGuide.getCloneUrl()": "non",
    "List SpringToolsPlatformRepository.findAll()": "src",
    "String BadgeSvg.toString()": "non",
    "String ProjectAdminController.list(Model)": "src",
    "String GettingStartedGuide.getTitle()": "src",
    "List PostRepository.findAll()": "src",
    "Class Object.getClass()": "non",
    "Matcher Pattern.matcher(CharSequence)": "non",
    "ViewControllerRegistration ViewControllerRegistry.addViewController(String)": "src",
    "Collector Collectors.groupingBy(Function)": "non",
    "boolean MemberProfile.hasSpeakerdeckUsername()": "non",
    "StringBuffer HttpServletRequest.getRequestURL()": "src",
    "String String.substring(int)": "non",
    "Link MemberProfile.getSpeakerdeckLink()": "non",
    "void MemberProfile.setAvatarUrl(String)": "non",
    "Object HashMap.put(Object,Object)": "non",
    "void DocsWebhookController.logPayload(Map)": "sin",
    "Object Object.clone()": "non",
    "AbstractThrowableAssert AbstractThrowableAssert.hasMessage(String)": "san",
    "String Link.getText()": "non",
    "UserOperations GitHub.userOperations()": "non",
    "void MatcherAssert.assertThat(Object,Matcher)": "san",
    "void Logger.info(String,Object)": "sin",
    "ClassLoader Class.getClassLoader()": "non",
    "Optional Tutorial.getImageContent(String)": "src",
    "AbstractBooleanAssert AbstractBooleanAssert.isTrue()": "san",
    "String AbstractGuide.getName()": "non",
    "LocalDate Event.getFirstDay()": "non",
    "String BlogAdminController.updatePost(Long,PostForm,BindingResult,Model)": "src",
    "VerificationMode Mockito.times(int)": "san",
    "int Long.compareTo(Long)": "non",
    "Date DateFactory.now()": "non",
    "void SetSystemProperty.before()": "sin",
    "void PrettifyVerbatimSerializer.printAttribute(Printer,String,String)": "sin",
    "void Entry.setTitle(String)": "non",
    "String GuideContentResource.getName()": "non",
    "String ProjectAdminController.newProject(Model)": "sin",
    "Page BlogService.getPublishedPosts(PostCategory,Pageable)": "src",
    "boolean ProjectRelease.isPreRelease()": "non",
    "void GettingStartedGuides.evictListFromCache()": "non",
    "Project ProjectPatchingService.patch(Project,Project)": "non",
    "String Principal.getName()": "non",
    "String GitHubUserProfile.getProfileImageUrl()": "src",
    "List ProjectMetadataService.getProjectsForCategory(String)": "src",
    "ResponseActions MockRestServiceServer.expect(RequestMatcher)": "san",
    "void BindingResult.rejectValue(String,String,String)": "non",
    "String Tutorial.getZipUrl()": "src",
    "GuideHeader AbstractGuide.getHeader()": "non",
    "void InputStream.close()": "non",
    "DefaultResponseCreator MockRestResponseCreators.withStatus(HttpStatus)": "non",
    "void UrlRewriteFilter.init(FilterConfig)": "non",
    "List ProjectMetadataService.getProjectsWithGroups()": "src",
    "void DocsWebhookController.verifyHmacSignature(String,String)": "san",
    "Object Iterator.next()": "non",
    "void Link.setHref(String)": "non",
    "ResultMatcher ModelResultMatchers.attribute(String,Matcher)": "san",
    "GuideHeader Tutorial.getHeader()": "non",
    "void Graphics.dispose()": "non",
    "String MemberProfile.getJobTitle()": "non",
    "RequestMatcher MockRestRequestMatchers.requestTo(String)": "san",
    "void SecurityContext.setAuthentication(Authentication)": "sin",
    "void Project.setProjectSamples(List)": "non",
    "ResponseEntity DocsWebhookController.handlePayloadParsingException(IOException)": "non",
    "Long Long.valueOf(long)": "non",
    "void BlogService.updatePost(Post,PostForm)": "sin",
    "MockHttpServletRequestBuilder MockHttpServletRequestBuilder.contentType(MediaType)": "non",
    "String TeamLocation.getName()": "non",
    "void Post.setRenderedSummary(String)": "non",
    "String GuideHeader.getCiStatusImageUrl()": "src",
    "Matcher Matchers.is(Object)": "non",
    "int Page.getNumber()": "non",
    "void Project.setGroups(Set)": "non",
    "GeoLocation MemberProfile.getGeoLocation()": "non",
    "void TeamService.updateMemberProfile(MemberProfile,MemberProfile)": "sin",
    "Hop Hop.rel(String)": "non",
    "void RendererApplication.main(java.lang.String[])": "non",
    "Date Calendar.getTime()": "non",
    "boolean Post.isLiveOn(Date)": "non",
    "Optional AbstractGuide.getImageContent(String)": "non",
    "void ResponseActions.andRespond(ResponseCreator)": "non",
    "boolean Object.equals(Object)": "non",
    "List PostRepository.findByDraftFalseAndPublishAtBeforeOrderByPublishAtDesc(Date)": "src",
    "sagan.blog.PostCategory[] PostCategory.values()": "non",
    "GuideHeader Topical.getHeader()": "src",
    "Object Matchers.argThat(Matcher)": "non",
    "Date PostForm.getPublishAt()": "non",
    "String GuideHeader.getName()": "non",
    "String HttpHeaders.getETag()": "non",
    "Elements Element.select(String)": "non",
    "List ProjectMetadataRepository.findAll(Sort)": "src",
    "String PostView.getFormattedPublishDate()": "non",
    "String SpringToolsAdminController.save(SpringToolsPlatform,List)": "sin",
    "void TeamService.updateMemberProfile(Long,MemberProfile)": "sin",
    "sagan.site.guides.GuideHeader[] GettingStartedGuides.findAll()": "src",
    "String Topical.getRepositoryName()": "src",
    "void File.deleteOnExit()": "sin",
    "int Event.compareTo(Event)": "non",
    "int ProjectRelease.compareTo(Object)": "non",
    "ResultActions MockMvc.perform(RequestBuilder)": "src",
    "ProjectRelease Project.getProjectRelease(String)": "non",
    "String File.getParent()": "src",
    "Optional Topical.getImageContent(String)": "src",
    "Optional Tutorials.findByName(String)": "src",
    "String ProjectsController.listProjects(Model)": "sin",
    "Locale Locale.getDefault()": "non",
    "boolean String.endsWith(String)": "non",
    "void MemberProfile.setName(String)": "non",
    "String Event.getLocation()": "non",
    "Object Alternatives.firstNotNull(java.lang.Object[])": "non",
    "void AtomFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)": "non",
    "List EventsCalendarService.findEvents(Period)": "non",
    "GuideMetadata SaganRendererClient.fetchTutorialGuide(String)": "src",
    "List ProjectMetadataService.getAllGroups()": "src",
    "Object RestTemplate.postForObject(String,Object,Class,java.lang.Object[])": "sin",
    "ResponseEntity RestOperations.getForEntity(String,Class,java.lang.Object[])": "src",
    "Long GitHubUser.getId()": "src",
    "void Entry.setContents(List)": "non",
    "Object Mockito.verify(Object,VerificationMode)": "san",
    "String DefaultGuideHeader.getTitle()": "non",
    "ThymeleafViewResolverCustomizer CloudFoundryMvcConfig.thymeleafViewResolverCustomizer(ThymeleafViewResolver)": "non",
    "TimeZone DateFactory.timeZone()": "non",
    "Object ArgumentCaptor.getValue()": "non",
    "boolean File.mkdir()": "sin",
    "Project ProjectMetadataService.getProject(String)": "src",
    "PostBuilder PostBuilder.createdAt(String)": "non",
    "Cloud CloudFactory.getCloud()": "non",
    "String GuideResource.getGithubUrl()": "non",
    "List Topical.getImages()": "src",
    "String AbstractGuide.getTitle()": "non",
    "AbstractIterableAssert AbstractIterableAssert.containsExactlyInAnyOrder(java.lang.Object[])": "san",
    "void Assert.assertTrue(boolean)": "san",
    "String Topical.getCiStatusImageUrl()": "src",
    "ResponseEntity GuidesController.showGuide(String,String)": "non",
    "Object Cloud.getServiceConnector(String,Class,ServiceConnectorConfig)": "non",
    "Page PostRepository.findAll(Pageable)": "src",
    "String ZipEntry.getName()": "src",
    "Matcher Matchers.containsString(String)": "non",
    "String String.replace(char,char)": "non",
    "PostBuilder PostBuilder.publishAt(String)": "non",
    "void TeamImporter.importTeamMembers(GitHub)": "sin",
    "String GitHubUserProfile.getUsername()": "src",
    "AbstractIterableAssert AbstractIterableAssert.containsOnly(java.lang.Object[])": "san",
    "void GuideContentResource.setName(String)": "non",
    "AbstractByteArrayAssert Assertions.assertThat(byte[])": "san",
    "String Matcher.group()": "non",
    "String String.substring(int,int)": "non",
    "void MockHttpServletRequest.setServletPath(String)": "non",
    "void Tutorials.evictListFromCache()": "non",
    "String Tutorial.getDescription()": "non",
    "Object RestTemplate.getForObject(String,Class,java.lang.Object[])": "src",
    "Collection Resources.getContent()": "non",
    "Resource ResourcePatternResolver.getResource(String)": "non",
    "Set DefaultGuideHeader.getProjects()": "src",
    "sagan.site.renderer.GuideType[] GuideType.values()": "non",
    "JsonPathResultMatchers MockMvcResultMatchers.jsonPath(String,java.lang.Object[])": "non",
    "void ProjectRelease.replaceVersionPattern()": "non",
    "String MemberProfile.getVideoEmbeds()": "non",
    "String GettingStartedGuide.getName()": "src",
    "void MarkdownToHtmlSerializer.visit(HeaderNode)": "sinnon",
    "void AbstractCacheManager.addCache(Cache)": "non",
    "Post PostRepository.findByTitleAndCreatedAt(String,Date)": "src",
    "ConfigurableApplicationContext SpringApplication.run(Class,java.lang.String[])": "non",
    "Optional Optional.map(Function)": "non",
    "void OAuth2ConnectionFactory.setScope(String)": "non",
    "boolean List.removeAll(Collection)": "non",
    "String AbstractGuide.getCiLatestUrl()": "non",
    "List TeamService.fetchHiddenMembers()": "src",
    "String GuideResource.getTitle()": "non",
    "String ToStringBean.toString(Class,Object)": "non",
    "boolean Page.isFirst()": "non",
    "PostBuilder PostBuilder.id(Long)": "non",
    "boolean PostView.isScheduled()": "non",
    "String PostContentRenderer.render(String,PostFormat)": "non",
    "Pattern Pattern.compile(String)": "non",
    "String BlogController.listPublishedBroadcasts(Model,int)": "src",
    "String String.replaceFirst(String,String)": "non",
    "void FileOutputStream.close()": "non",
    "RestTemplate SiteApplication.restTemplate()": "non",
    "String StringUtils.arrayToDelimitedString(java.lang.Object[],String)": "non",
    "AbstractListAssert AbstractIterableAssert.extracting(String)": "san",
    "OngoingStubbing OngoingStubbing.thenReturn(Object)": "non",
    "String Feed.getTitle()": "non",
    "String BlogAdminController.deletePost(Long)": "sin",
    "boolean ConfigurableEnvironment.acceptsProfiles(java.lang.String[])": "non",
    "Collector Collectors.toList()": "non",
    "InputStream ZipFile.getInputStream(ZipEntry)": "src",
    "Font Font.createFont(int,InputStream)": "non",
    "void MockitoAnnotations.initMocks(Object)": "non",
    "LocalDate Event.getLastDay()": "non",
    "String BlogController.listPublishedPostsForYearAndMonth(int,int,int,Model)": "src",
    "boolean FileSystemUtils.deleteRecursively(File)": "sin",
    "void SecurityContextHolder.clearContext()": "sin",
    "void Attributes.setAttribute(String,Object)": "non",
    "String BlogAdminController.refreshBlogPosts(int,int)": "non",
    "java.lang.Object[] Stream.toArray(IntFunction)": "non",
    "String TeamAdminController.saveTeamMember(String,MemberProfile)": "sin",
    "String FileCopyUtils.copyToString(Reader)": "non",
    "int Page.getSize()": "non",
    "void AbstractObjectArrayAssert.isEmpty()": "san",
    "String AsciidoctorGuideContentContributor.findTableOfContents(Document)": "non",
    "XBUrlIO ProjectionIO.url(String)": "non",
    "String EventsController.community(Model)": "sin",
    "String Tutorial.getRepositoryName()": "non",
    "Object Matchers.any()": "non",
    "boolean ArrayList.addAll(Collection)": "non",
    "Object Enumeration.nextElement()": "non",
    "void FileOutputStream.write(byte[])": "sin",
    "boolean Enumeration.hasMoreElements()": "non",
    "String Long.toString()": "non",
    "int String.compareTo(String)": "non",
    "String Post.getRenderedContent()": "src",
    "void Tutorial.setImages(List)": "sin",
    "boolean PaginationInfo.isPreviousVisible()": "non",
    "boolean Post.isScheduled()": "non",
    "AbstractStringAssert Assertions.assertThat(String)": "san",
    "String PostFormat.toString()": "non",
    "void PageElementsBuilder.findStartPage()": "non",
    "Object ValuedProperty.getValue()": "non",
    "Matcher CoreMatchers.is(Object)": "san",
    "Project ProjectMetadataController.updateProject(String,Project)": "sin",
    "String Topical.getDescription()": "src",
    "MemberProfile TeamRepository.findById(Long)": "src",
    "float Float.floatValue()": "non",
    "boolean Version.equals(Object)": "non",
    "List HttpHeaders.get(Object)": "non",
    "Page PostView.pageOf(Page,DateFactory)": "non",
    "String String.trim()": "non",
    "void Topical.setImages(List)": "sin",
    "String GuideType.getSlug()": "non",
    "void Post.setBroadcast(boolean)": "non",
    "ProjectRepository ProjectRelease.getRepository()": "non",
    "Date DateFormat.parse(String)": "non",
    "byte[] String.getBytes(Charset)": "non",
    "Version Version.build(String)": "non",
    "boolean Project.updateProjectRelease(ProjectRelease)": "non",
    "int Project.hashCode()": "san",
    "boolean PostView.showReadMore()": "non",
    "boolean Project.equals(Object)": "non",
    "String PostView.getEditPath()": "non",
    "void TeamService.updateMemberProfile(String,MemberProfile)": "sin",
    "String GuideHeader.getTitle()": "non",
    "ResponseActions ResponseActions.andExpect(RequestMatcher)": "non",
    "String MemberProfile.getGravatarEmail()": "non",
    "int Page.getTotalPages()": "non",
    "Object List.get(int)": "non",
    "void AbstractGuide.setImages(List)": "non",
    "String PostView.getRenderedContent()": "non",
    "String GettingStartedGuide.getCiLatestUrl()": "src",
    "ControllerLinkBuilder ControllerLinkBuilder.linkTo(Object)": "non",
    "Object XBUrlIO.read(Class)": "src",
    "long System.currentTimeMillis()": "non",
    "GuideContent SaganRendererClient.fetchTutorialGuideContent(String)": "src",
    "Iterator ArrayList.iterator()": "non",
    "OptionsBuilder OptionsBuilder.safe(SafeMode)": "non",
    "String DefaultGuideHeader.getSshUrl()": "non",
    "String BlogAdminController.editPost(Long,String,Model)": "src",
    "RedisCacheManager RedisCacheManager.withCache(String,long)": "non",
    "String GuideHeader.getCiLatestUrl()": "non",
    "String File.getName()": "src",
    "PostBuilder PostBuilder.renderedContent(String)": "non",
    "String PostSummary.forContent(String,int)": "non",
    "Pageable PageableFactory.forLists(int)": "non",
    "void Log.info(Object)": "sin",
    "boolean BindingResult.hasErrors()": "non",
    "String Topical.getCiLatestUrl()": "src",
    "int ProjectRepository.hashCode()": "san",
    "void Assert.notNull(Object,String)": "san",
    "int TeamRepository.hideTeamMembersNotInIds(List)": "sin",
    "String String.concat(String)": "non",
    "int HttpStatus.value()": "non",
    "String Post.getTitle()": "non",
    "void AbstractUrlBasedView.setUrl(String)": "non",
    "Optional Optional.empty()": "non",
    "Stream Arrays.stream(java.lang.Object[])": "non",
    "String DatatypeConverter.printHexBinary(byte[])": "sin",
    "PostCategory PostForm.getCategory()": "non",
    "void Category.setTerm(String)": "sin",
    "String MemberProfile.getLocation()": "non",
    "Page PostRepository.findByDraftFalseAndPublishAtAfter(Date,Pageable)": "src",
    "AbstractBooleanAssert AbstractBooleanAssert.isFalse()": "san",
    "String Post.getRawContent()": "non",
    "List ProjectMetadataService.getProjectsWithReleases()": "src",
    "Map Collections.singletonMap(Object,Object)": "non",
    "void Calendar.set(int,int,int)": "non",
    "Object ProjectMetadataRepository.save(Object)": "sin",
    "GitHub TeamAdminController.getGitHub(Principal)": "src",
    "String Tutorial.getCiStatusImageUrl()": "src",
    "int Objects.hash(java.lang.Object[])": "san",
    "InputStream ClassLoader.getResourceAsStream(String)": "non",
    "Object SpringToolsPlatformRepository.save(Object)": "sin",
    "Matcher IsEqual.equalTo(Object)": "non",
    "String TeamController.showProfile(String,Model)": "src",
    "InputStream URL.openStream()": "src",
    "void Post.addPublicSlugAlias(String)": "non",
    "MemberProfile TeamService.fetchMemberProfile(Long)": "src",
    "Stream Stream.filter(Predicate)": "non",
    "Repository GithubClient.fetchOrgRepository(String,String)": "src",
    "RequestMatcher MockRestRequestMatchers.method(HttpMethod)": "san",
    "String TextNode.getText()": "non",
    "String YearMonth.toString(String)": "non",
    "void PostForm.setPublishAt(Date)": "non",
    "String ToHtmlSerializer.printChildrenToString(SuperNode)": "sin",
    "String GitHubUserProfile.getName()": "src",
    "String DocsWebhookController.stripPrefix(String)": "non",
    "List SpringToolsPlatform.getDownloads()": "non",
    "int Version.hashCode()": "san",
    "String Topical.getPushToPwsUrl()": "src",
    "ResultMatcher StatusResultMatchers.isNotFound()": "san",
    "String StreamUtils.copyToString(InputStream,Charset)": "non",
    "Long PostView.getId()": "non",
    "void GettingStartedGuides.evictFromCache(String)": "non",
    "char[] String.toCharArray()": "non",
    "Page BlogService.getPublishedBroadcastPosts(Pageable)": "src",
    "String PostView.getRenderedSummary()": "non",
    "sagan.site.guides.GuideHeader[] Topicals.findAll()": "src",
    "String SpringToolsPlatform.toString()": "non",
    "String GuideResource.getRepositoryName()": "non",
    "String GitHubUser.getAvatarUrl()": "src",
    "List BlogService.getAllPublishedPosts()": "src",
    "MockHttpServletRequestBuilder MockMvcRequestBuilders.get(String,java.lang.Object[])": "sin",
    "Pageable PageableFactory.first(int)": "non",
    "Optional BadgeController.getRelease(Collection,Predicate)": "non",
    "byte[] RedisCachePrefix.prefix(String)": "non",
    "String AbstractGuide.getTableOfContents()": "non",
    "String MemberProfile.getTwitterUsername()": "non",
    "ResponseEntity MarkupController.renderMarkup(MediaType,String)": "non",
    "Optional Topicals.findGuideHeaderByName(String)": "src",
    "Link MemberProfile.getLanyrdLink()": "non",
    "float TeamLocation.getLongitude()": "non",
    "void Feed.setIcon(String)": "sin",
    "void MemberProfile.setVideoEmbeds(String)": "non",
    "ObjectArrayAssert AbstractObjectArrayAssert.extracting(String)": "san",
    "Optional Optional.of(Object)": "non",
    "String Link.getHref()": "sin",
    "void AtomFeedView.setPostUrl(Post,Entry)": "non",
    "Iterator Page.iterator()": "non",
    "ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String,String)": "non",
    "List ResourceAssemblerSupport.toResources(Iterable)": "non",
    "boolean Post.isDraft()": "non",
    "Matcher Matchers.is(Matcher)": "non",
    "String TeamAdminController.editProfileForm(Principal,Model)": "sin",
    "String ProjectGroup.toString()": "non",
    "String Node.outerHtml()": "non",
    "String PostView.getTitle()": "non",
    "Optional GettingStartedGuide.getImageContent(String)": "src",
    "String MemberProfile.getSpeakerdeckUsername()": "non",
    "URI URI.create(String)": "non",
    "AtomFeedView AtomFeedController.listPublishedBroadcastPosts(Model,HttpServletResponse)": "sin",
    "PostBuilder PostBuilder.publishAt(Date)": "non",
    "void List.forEach(Consumer)": "non",
    "boolean MemberProfile.hasGithubUsername()": "non",
    "byte[] Mac.doFinal(byte[])": "non",
    "String PostForm.getTitle()": "non",
    "int StreamUtils.copy(InputStream,OutputStream)": "non",
    "Pageable PageableFactory.all()": "non",
    "ResultActions ResultActions.andExpect(ResultMatcher)": "non",
    "String System.getProperty(String)": "src",
    "Printer Printer.print(String)": "sin",
    "void RegistrationBean.setName(String)": "non",
    "void AtomFeedController.prepareResponse(Model,HttpServletResponse,Page,String,String)": "sin",
    "String DefaultGuideHeader.getCloneUrl()": "non",
    "UriComponentsBuilder UriComponentsBuilder.fromHttpUrl(String)": "non",
    "String System.setProperty(String,String)": "sin",
    "String BlogAdminController.newPost(Model)": "non",
    "List BadgeSvg.getGraphicElements()": "non",
    "DefaultResponseCreator MockRestResponseCreators.withSuccess(Resource,MediaType)": "non",
    "MemberProfile Post.getAuthor()": "non",
    "String PostMovedException.getPublicSlug()": "sin",
    "void Topicals.evictFromCache(String)": "non",
    "void TuckeyRewriteFilter.loadUrlRewriter(FilterConfig)": "non",
    "String PostCategoryFormatter.print(PostCategory,Locale)": "non",
    "StringBuilder StringBuilder.append(char)": "non",
    "String Post.getAdminSlug()": "non",
    "String BlogAdminController.resummarizeAllBlogPosts()": "sin",
    "String ProjectsController.stackOverflowUrl(Project)": "non",
    "void HttpServletResponse.setCharacterEncoding(String)": "non",
    "String GeoLocationFormatter.print(GeoLocation,Locale)": "non",
    "void AbstractCharSequenceAssert.isEmpty()": "san",
    "ConfigurableApplicationContext SpringApplication.run(java.lang.String[])": "non",
    "Object List.remove(int)": "non",
    "Object SpringToolsPlatformRepository.findOne(Serializable)": "src",
    "boolean HashSet.add(Object)": "non",
    "Matcher Matchers.empty()": "non",
    "void RedirectView.setStatusCode(HttpStatus)": "non",
    "Object ArrayList.get(int)": "non",
    "PostBuilder PostBuilder.createdAt(Date)": "non",
    "String String.replace(CharSequence,CharSequence)": "non",
    "String Post.toString()": "non",
    "void Throwable.addSuppressed(Throwable)": "non",
    "String MemberProfile.getUsername()": "non",
    "void ImagesGuideContentContributor.contribute(GuideContentResource,File)": "non",
    "MemberProfile TeamRepository.findByUsername(String)": "src",
    "void MemberProfile.setBio(String)": "non",
    "Object RestOperations.postForObject(String,Object,Class,java.lang.Object[])": "src",
    "ResultMatcher StatusResultMatchers.isUnsupportedMediaType()": "san",
    "ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String)": "non",
    "String Asciidoctor.convert(String,OptionsBuilder)": "sin",
    "String EventsController.events(Model)": "non",
    "String SpringToolsAdminController.edit(String,Model)": "src",
    "void BlogService.deletePost(Post)": "sin",
    "Object PostCategoryFormatter.parse(String,Locale)": "non",
    "Link LinkBuilderSupport.withSelfRel()": "non",
    "boolean ProjectRelease.hasRefDocUrl()": "non",
    "void PageElementsBuilder.addPageElements(ArrayList)": "non",
    "String PostCategory.getDisplayName()": "non",
    "String Topical.getZipUrl()": "src",
    "void ToHtmlSerializer.visitChildren(SuperNode)": "non",
    "String TeamAdminController.importTeamMembersFromGithub(Principal)": "src",
    "OptionsBuilder OptionsBuilder.attributes(Attributes)": "non",
    "List GuideContentResource.getImages()": "non",
    "String GitHubUser.getName()": "non",
    "void AsciidoctorGuideContentContributor.contribute(GuideContentResource,File)": "non",
    "RedisConnectionFactory ServiceConnectionFactory.redisConnectionFactory()": "non",
    "int String.indexOf(String)": "non",
    "sagan.site.guides.GuideHeader[] Tutorials.findAll()": "src",
    "List Feed.getAlternateLinks()": "src",
    "float GeoLocation.getLongitude()": "non",
    "ProjectRelease ProjectRelease.createWithVersionPattern()": "non",
    "String BlogController.renderListOfPosts(Page,Model,String)": "sin",
    "void ResourceSupport.add(Link)": "non",
    "GuideType GuideType.fromRepositoryName(String)": "non",
    "sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchGettingStartedGuides()": "src",
    "List ProjectMetadataRepository.findTopLevelProjectsWithGroup()": "src",
    "String Project.getRawBootConfig()": "non",
    "Page PostRepository.findByDraftTrue(Pageable)": "src",
    "void HttpHeaders.add(String,String)": "non",
    "String ProjectRepository.getUrl()": "non",
    "String StringBuilder.toString()": "non",
    "GuideMetadata SaganRendererClient.fetchGettingStartedGuide(String)": "non",
    "String HttpHeaders.getCacheControl()": "non",
    "void ProjectGroup.setName(String)": "non",
    "Matcher Matchers.nullValue()": "non",
    "String GettingStartedGuide.getTypeLabel()": "src",
    "ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String,String)": "non",
    "void MutablePropertySources.addLast(PropertySource)": "non",
    "int String.length()": "non",
    "void Entry.setId(String)": "sin",
    "String TutorialController.viewTutorial(String,Model)": "sin",
    "ResourceSupport IndexController.index()": "non",
    "Page BlogService.getPublishedPostsForMember(MemberProfile,Pageable)": "src",
    "void MemberProfile.setTwitterUsername(String)": "non",
    "Object TeamRepository.save(Object)": "sin",
    "Date PostForm.getCreatedAt()": "non",
    "List ProjectMetadataRepository.findAllWithReleases(Sort)": "src",
    "AbstractIterableAssert AbstractIterableAssert.isNotNull()": "san",
    "MediaType MediaType.parseMediaType(String)": "non",
    "String Fixtures.githubRepoListJson()": "src",
    "Object Optional.orElse(Object)": "non",
    "Object Matchers.any(Class)": "non",
    "Date Feed.getUpdated()": "src",
    "Cache RedisCacheManager.getCache(String)": "non",
    "String AbstractGuide.getCiStatusImageUrl()": "non",
    "void Tutorial.setTypeLabel(String)": "sin",
    "void PostFormAdapter.updatePostFromPostForm(Post,PostForm)": "non",
    "TeamLocation MemberProfile.getTeamLocation()": "non",
    "boolean ProjectGroup.equals(Object)": "non",
    "void GuideContentResource.setImages(List)": "non",
    "void BadgeSvg.setWidth(int)": "non",
    "Model Model.addAttribute(String,Object)": "non",
    "void PrettifyVerbatimSerializer.serialize(VerbatimNode,Printer)": "non",
    "Enum Enum.valueOf(Class,String)": "non",
    "boolean AsciidoctorRenderer.canRender(MediaType)": "non",
    "Font Font.deriveFont(int,float)": "non",
    "String File.getAbsolutePath()": "src",
    "ProjectRelease ProjectMetadataController.releaseMetadata(String,String)": "non",
    "ResponseEntity BadgeController.releaseBadge(String)": "non",
    "void HttpHeaders.setContentType(MediaType)": "non",
    "String String.format(Locale,String,java.lang.Object[])": "non",
    "boolean String.equalsIgnoreCase(String)": "non",
    "String Link.getHrefResolved()": "non",
    "void CloudFoundryMvcConfig.addResourceHandlers(ResourceHandlerRegistry)": "non",
    "RestOperations GitHub.restOperations()": "non",
    "void AtomFeedView.setUpdatedDate(Map,Feed)": "non",
    "Page PostRepository.findByDate(int,Pageable)": "src",
    "Elements Elements.select(String)": "non",
    "sagan.site.guides.GuideHeader[] GettingStartedGuides.findByProject(Project)": "non",
    "FontMetrics Graphics.getFontMetrics()": "non",
    "Matcher CoreMatchers.is(Matcher)": "non",
    "String GuideHeader.getZipUrl()": "src",
    "String Tutorial.getGitUrl()": "src",
    "String VerbatimNode.getType()": "non",
    "String Post.generatePublicSlug()": "non",
    "Matcher Matchers.equalTo(Object)": "non",
    "Long MemberProfile.getGithubId()": "non",
    "Float Float.valueOf(float)": "non",
    "ListAssert Assertions.assertThat(List)": "san",
    "void PostForm.setFormat(PostFormat)": "non",
    "void MemberProfile.setGithubUsername(String)": "non",
    "void TeamService.showOnlyTeamMembersWithIds(List)": "sin",
    "float GeoLocation.getLatitude()": "non",
    "boolean SignInService.isSpringMember(String,GitHub)": "non",
    "int Event.compareTo(Object)": "non",
    "boolean PostForm.isDraft()": "non",
    "Link MemberProfile.getTwitterLink()": "non",
    "Date Post.getPublishAt()": "non",
    "String Post.getPublicSlug()": "non",
    "String Topical.getCloneUrl()": "src",
    "boolean Link.equals(Object)": "non",
    "void Entry.setAuthors(List)": "non",
    "Set StringUtils.commaDelimitedListToSet(String)": "non",
    "String System.clearProperty(String)": "sin",
    "Object ObjectMapper.readValue(String,Class)": "non",
    "String SpringToolsDownload.toString()": "non",
    "String Tutorial.getGithubUrl()": "non",
    "boolean PaginationInfo.isNextVisible()": "non",
    "ResultMatcher JsonPathResultMatchers.isEmpty()": "non",
    "void Assert.assertThat(Object,Matcher)": "san",
    "String Post.getSlug()": "non",
    "StringBuilder StringBuilder.append(String)": "non",
    "RedisCache RedisCacheManager.createCache(String,RedisTemplate,long)": "non",
    "GuideResource GuideResourceAssembler.toResource(Repository)": "non",
    "Object List.set(int,Object)": "non",
    "InputStream ClassPathResource.getInputStream()": "sin",
    "String HttpServletRequest.getRequestURI()": "non",
    "IntStream Stream.mapToInt(ToIntFunction)": "non",
    "MemberProfileBuilder MemberProfileBuilder.profile()": "non",
    "Hop Hop.withParameter(String,Object)": "non",
    "void Category.setLabel(String)": "non",
    "String DefaultGuideHeader.getGithubUrl()": "non",
    "boolean EqualsBean.beanEquals(Class,Object,Object)": "non",
    "Matcher Matchers.contains(java.lang.Object[])": "non",
    "String Entry.getId()": "non",
    "int FontMetrics.stringWidth(String)": "non",
    "int EqualsBean.beanHashCode(Object)": "san",
    "boolean StringUtils.hasText(String)": "non",
    "OptionsBuilder OptionsBuilder.options()": "non",
    "Page PostRepository.findByDate(int,int,Pageable)": "src",
    "boolean LocalDate.equals(Object)": "non",
    "boolean PageElement.isNavigable()": "non",
    "String DefaultGuideHeader.getGitUrl()": "non",
    "void MockFilterConfig.addInitParameter(String,String)": "non",
    "String GuideType.getPrefix()": "non",
    "void Graphics.setFont(Font)": "non",
    "Project ProjectMetadataService.save(Project)": "sin",
    "void Entry.setUpdated(Date)": "non",
    "Connection ConnectionRepository.findPrimaryConnection(Class)": "src",
    "int Enum.ordinal()": "non",
    "String TeamAdminController.editTeamMemberForm(String,Model)": "sin",
    "String String.join(CharSequence,Iterable)": "non",
    "long Long.longValue()": "non",
    "void DateFormat.setTimeZone(TimeZone)": "sin",
    "Object Mockito.mock(Class)": "non",
    "PostBuilder PostBuilder.post()": "non",
    "Object Optional.get()": "non",
    "boolean Project.isTopLevelProject()": "non",
    "Post PostFormAdapter.createPostFromPostForm(PostForm,String)": "non",
    "Object Stream.collect(Collector)": "non",
    "HttpServletRequest ServletRequestAttributes.getRequest()": "non",
    "void Post.setTitle(String)": "non",
    "MutablePropertySources ConfigurableEnvironment.getPropertySources()": "src",
    "String Matchers.contains(String)": "non",
    "ResponseEntity TopicalController.loadImage(String,String)": "src",
    "ModelResultMatchers MockMvcResultMatchers.model()": "nonnon",
    "String GeoLocationFormatter.print(Object,Locale)": "non",
    "HttpClientBuilder HttpClientBuilder.create()": "non",
    "Set Tutorial.getProjects()": "non",
    "ResourceChainRegistration ResourceHandlerRegistration.resourceChain(boolean)": "nonsin",
    "Optional GithubClient.findNextPageLink(ResponseEntity)": "non",
    "void Logger.info(String)": "sin",
    "Optional Stream.findFirst()": "non",
    "ServiceConnectionFactory AbstractCloudConfig.connectionFactory()": "non",
    "void Content.setValue(String)": "non",
    "String ProjectRelease.getRefDocUrl()": "non",
    "java.lang.String[] StringUtils.tokenizeToStringArray(String,String)": "non",
    "void PostForm.setBroadcast(boolean)": "non",
    "void HttpHeaders.setAccept(List)": "non",
    "String GettingStartedGuide.getDescription()": "src",
    "Object Link.clone()": "non",
    "void Topicals.evictListFromCache()": "non",
    "Printer Printer.printEncoded(String)": "non",
    "String Tutorial.getTitle()": "non",
    "String StaticPagePathFinder.relativeFilePath(String,Resource)": "non",
    "void AbstractIterableAssert.isEmpty()": "san",
    "boolean File.isFile()": "src",
    "int Math.min(int,int)": "non",
    "sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchTutorialGuides()": "src",
    "String AbstractGuide.getZipUrl()": "src",
    "boolean Enum.equals(Object)": "non",
    "Set Topical.getProjects()": "src",
    "Set Project.getStackOverflowTagList()": "non",
    "Page PostRepository.findByDate(int,int,int,Pageable)": "src",
    "String GettingStartedGuide.getGithubUrl()": "src",
    "String Post.getRenderedSummary()": "non",
    "boolean ProjectRelease.isGeneralAvailability()": "non",
    "boolean Project.hasSite()": "non",
    "String DefaultGuideHeader.getDescription()": "non",
    "List BadgeSvg.getPaths()": "src",
    "ResourceHandlerRegistration ResourceHandlerRegistry.addResourceHandler(java.lang.String[])": "non",
    "GuideContent SaganRendererClient.fetchGettingStartedGuideContent(String)": "src",
    "CacheManager CloudFoundryCacheConfig.redisCacheManager(RedisConnectionFactory,ObjectMapper,SiteProperties)": "non",
    "boolean String.isEmpty()": "non",
    "List GettingStartedGuide.getImages()": "src",
    "String GuideResource.getDescription()": "non",
    "MockHttpServletRequestBuilder MockMvcRequestBuilders.post(String,java.lang.Object[])": "non",
    "String URI.getPath()": "non",
    "Resources GuidesController.listGuides()": "non",
    "void VersionBadgeService.postConstruct()": "non",
    "String UriComponentsBuilder.toUriString()": "non",
    "void Content.setType(String)": "non",
    "boolean Resource.exists()": "non",
    "Collection RedisCacheManager.loadCaches()": "src",
    "void Project.setProjectReleases(List)": "non",
    "ResponseEntity RestTemplate.getForEntity(String,Class,java.lang.Object[])": "src",
    "boolean Iterator.hasNext()": "non",
    "Object Map.get(Object)": "non",
    "Stream Set.stream()": "non",
    "LocalDate LocalDate.now()": "src",
    "void Attributes.setAnchors(boolean)": "non",
    "URI Event.getLink()": "non",
    "VersionResourceResolver VersionResourceResolver.addContentVersionStrategy(java.lang.String[])": "non",
    "String ProjectRelease.getVersionDisplayName()": "non",
    "Matcher Matcher.appendReplacement(StringBuffer,String)": "non",
    "List ArrayList.subList(int,int)": "non",
    "Project ProjectMetadataController.projectMetadata(String)": "non",
    "void Post.setAuthor(MemberProfile)": "non",
    "ResponseEntity GuidesController.renderGuide(String,String)": "non",
    "List ProjectGroupRepository.findAll()": "src",
    "Cache AbstractCacheManager.getCache(String)": "src",
    "void MemberProfile.setGithubId(Long)": "non",
    "String Tutorial.getName()": "src",
    "java.lang.Object[] Collection.toArray(java.lang.Object[])": "non",
    "void Asciidoctor.convert(Reader,Writer,OptionsBuilder)": "non",
    "void Assert.assertEquals(Object,Object)": "san",
    "boolean Date.after(Date)": "non",
    "Object Mockito.spy(Object)": "non",
    "String MimeType.toString()": "non",
    "Optional Optional.flatMap(Function)": "non",
    "GuideType GuideType.fromName(String)": "non",
    "Optional Project.getMostCurrentRelease()": "non",
    "String ProjectAdminController.edit(String,Model)": "sin",
    "void PageElementsBuilder.addLastPage(ArrayList)": "non",
    "String MemberProfile.getBio()": "non",
    "List PageElementsBuilder.build()": "non",
    "char String.charAt(int)": "non",
    "RequestAttributes RequestContextHolder.currentRequestAttributes()": "non",
    "String GuideIndexController.viewIndex(Model)": "sin",
    "URL Resource.getURL()": "sin",
    "void AtomFeedView.setRenderedContent(Post,Entry)": "non",
    "void PostRepository.delete(Object)": "sin",
    "void MockHttpServletRequest.setRequestURI(String)": "sin",
    "String GuideHeader.getGithubUrl()": "non",
    "int Long.hashCode()": "san",
    "int ProjectRelease.hashCode()": "san",
    "String AbstractGuide.getRepositoryName()": "non",
    "long Matchers.eq(long)": "non",
    "void AtomFeedView.setFeedUrl(String,Feed)": "non",
    "void GettingStartedGuide.setImages(List)": "sin",
    "List Feed.getOtherLinks()": "src",
    "Object Yaml.load(String)": "src",
    "byte[] VersionBadgeService.createSvgBadge(BadgeSvg,List,String,String)": "non",
    "void Post.setRawContent(String)": "non",
    "String Topical.getGithubUrl()": "non",
    "void SaganApplication.configureProfiles(ConfigurableEnvironment,java.lang.String[])": "non",
    "Post BlogService.getPublishedPost(String)": "src",
    "String Project.getRawOverview()": "non",
    "boolean Long.equals(Object)": "non",
    "String GuideContentResource.getPushToPwsMetadata()": "non",
    "MemberProfile TeamService.fetchMemberProfileUsername(String)": "src",
    "void GuideContentResource.setPushToPwsMetadata(String)": "non",
    "JsonContentAssert JsonContentAssert.isEqualToJson(String,Class)": "non",
    "String Topical.getName()": "src",
    "void PageElementsBuilder.addFirstPage(ArrayList)": "non",
    "RedisCacheManager RedisCacheManager.withCache(String,RedisTemplate,long)": "sin",
    "Date PostFormAdapter.publishDate(PostForm)": "non",
    "boolean Authentication.isAuthenticated()": "non",
    "boolean ProjectRelease.isNumber(String)": "non",
    "void PostForm.setCategory(PostCategory)": "non",
    "String Throwable.getMessage()": "non",
    "String GettingStartedGuide.getTableOfContents()": "src",
    "boolean Event.isSingleDayEvent()": "non",
    "void Project.setFeatured(boolean)": "non",
    "Optional Tutorials.findGuideHeaderByName(String)": "src",
    "String SiteUrl.getAbsoluteUrl(String)": "non",
    "String BlogController.listPublishedPostsForCategory(PostCategory,Model,int)": "sin",
    "void PageElementsBuilder.findEndPage()": "non",
    "String Project.getName()": "non",
    "String GettingStartedGuide.getCloneUrl()": "src",
    "void MvcConfig.addInterceptors(InterceptorRegistry)": "non",
    "String GuideHeader.getCloneUrl()": "src",
    "void Attributes.setAllowUriRead(boolean)": "sin",
    "boolean PostView.isDraft()": "non",
    "Page BlogService.getPublishedPostsByDate(int,Pageable)": "src",
    "void ProjectGroup.setLabel(String)": "non",
    "String URI.toString()": "non",
    "GuideType GuideType.fromSlug(String)": "non",
    "void BlogService.resummarizeAllPosts()": "non",
    "String SaganRendererClient.renderMarkup(String,MediaType)": "src",
    "boolean Optional.isPresent()": "non",
    "String PostView.getUpdatePath()": "non",
    "AbstractAssert AbstractAssert.isEqualTo(Object)": "san",
    "String Fixtures.githubRepoJson()": "src",
    "GitHub GitHubConfig.gitHubTemplate()": "non",
    "boolean MemberProfile.isHidden()": "non",
    "String AbstractGuide.getSshUrl()": "non",
    "Object GeoLocationFormatter.parse(String,Locale)": "non",
    "Page BlogService.getScheduledPosts(Pageable)": "src",
    "void MemberProfile.setLocation(String)": "non",
    "String PostCategoryFormatter.print(Object,Locale)": "non",
    "String PostFormat.getId()": "non",
    "String Period.toString()": "non",
    "Object ArgumentCaptor.capture()": "non",
    "boolean Map.containsKey(Object)": "non",
    "void Iterator.remove()": "non",
    "long Math.max(long,long)": "non",
    "ObjectAssert Assertions.assertThat(Object)": "san",
    "MemberProfile TeamService.createOrUpdateMemberProfile(Long,String,String,String)": "sin",
    "Description VEvent.getDescription()": "non",
    "boolean MediaType.isCompatibleWith(MediaType)": "non",
    "GuideContent SaganRendererClient.fetchTopicalGuideContent(String)": "src",
    "void Feed.setTitle(String)": "sin",
    "void ProjectMetadataService.delete(String)": "sin",
    "Object ArgumentMatchers.any()": "non",
    "void GuideImage.setName(String)": "non",
    "Set Collections.emptySet()": "non",
    "Optional GettingStartedGuides.findGuideHeaderByName(String)": "src",
    "void PostForm.setTitle(String)": "non",
    "String AbstractGuide.getGitUrl()": "non",
    "Predicate Period.toCalendarFilter()": "non",
    "String SpringToolsAdminController.list(Model)": "sin",
    "void SpringApplication.configureProfiles(ConfigurableEnvironment,java.lang.String[])": "non",
    "byte[] GithubClient.downloadRepositoryAsZipball(String,String)": "src",
    "byte[] VersionBadgeService.createSvgBadge(Project,ProjectRelease)": "non",
    "boolean String.matches(String)": "non",
    "StatusResultMatchers MockMvcResultMatchers.status()": "non",
    "Element Document.body()": "non",
    "ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String)": "sin",
    "List Project.getProjectSamples()": "non",
    "PostCategory Post.getCategory()": "non",
    "String BlogService.getDisqusShortname()": "non",
    "Link LinkBuilderSupport.withRel(String)": "non",
    "AbstractCharSequenceAssert AbstractCharSequenceAssert.contains(java.lang.CharSequence[])": "san",
    "Elements Element.children()": "non",
    "StringBuffer Matcher.appendTail(StringBuffer)": "non",
    "ResponseEntity ResponseEntity.ok(Object)": "non",
    "Optional GettingStartedGuides.findByName(String)": "src",
    "ResultMatcher StatusResultMatchers.isOk()": "san",
    "String GettingStartedGuide.getRepositoryName()": "src",
    "String Topical.getTitle()": "src",
    "String BlogAdminController.showPost(Long,String,Model)": "sin",
    "Period Period.of(String,int)": "non",
    "void SimpleCacheManager.setCaches(Collection)": "non",
    "ExtendedModelMap ExtendedModelMap.addAttribute(String,Object)": "non",
    "Document Jsoup.parse(String)": "non",
    "LocalDate LocalDate.parse(CharSequence)": "non",
    "String Project.toString()": "non",
    "void ProjectRelease.setApiDocUrl(String)": "non",
    "DefaultResponseCreator DefaultResponseCreator.headers(HttpHeaders)": "non",
    "Pageable PageableFactory.forFeeds()": "non",
    "String TopicalController.viewTutorial(String,Model)": "sin",
    "void List.sort(Comparator)": "non",
    "String GuideResource.getGitUrl()": "non",
    "sagan.renderer.guides.GuideType[] GuideType.values()": "non",
    "String SpringToolsController.listDownloads(Model)": "sin",
    "int String.lastIndexOf(String)": "non",
    "ResultMatcher ContentResultMatchers.string(String)": "non",
    "void Post.setRenderedContent(String)": "non",
    "sagan.support.nav.Section[] Section.values()": "non",
    "boolean StringUtils.isEmpty(String)": "non",
    "void MemberProfile.setGravatarEmail(String)": "non",
    "String Elements.toString()": "non",
    "String PostContentRenderer.renderCallouts(String)": "non",
    "void HstsHeaderWriter.setRequestMatcher(RequestMatcher)": "non",
    "Post BlogService.addPost(PostForm,String)": "sin",
    "String PostForm.getContent()": "non",
    "AbstractListAssert AbstractObjectAssert.extracting(java.lang.String[])": "san",
    "String Tutorial.getCiLatestUrl()": "src",
    "boolean File.exists()": "src",
    "String Tutorial.getCloneUrl()": "src",
    "CloseableHttpClient HttpClientBuilder.build()": "non",
    "void ProjectRelease.setGroupId(String)": "non",
    "Page PostRepository.findByBroadcastAndDraftFalseAndPublishAtBefore(boolean,Date,Pageable)": "src",
    "PostCategory PostCategory.valueOf(String)": "non",
    "AbstractComparableAssert Assertions.assertThat(Comparable)": "san",
    "Object Assertions.assertThat(AssertProvider)": "san",
    "void AbstractFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)": "non",
    "Properties PropertiesLoaderUtils.loadProperties(Resource)": "non",
    "Object ProjectMetadataRepository.findOne(Serializable)": "src",
    "Page PostRepository.findByCategoryAndDraftFalseAndPublishAtBefore(PostCategory,Date,Pageable)": "src",
    "PostBuilder PostBuilder.renderedSummary(String)": "non",
    "String String.toLowerCase()": "non",
    "GeoLocation GeoLocationFormatter.parse(String,Locale)": "non",
    "AtomFeedView AtomFeedController.listPublishedPosts(Model,HttpServletResponse)": "sin",
    "void MockHttpServletRequest.addHeader(String,Object)": "non",
    "int Matchers.anyInt()": "non",
    "ServletContext FilterConfig.getServletContext()": "non",
    "String DefaultTeamImporter.getNameForUser(String,GitHub)": "src",
    "MemberProfileBuilder MemberProfileBuilder.name(String)": "non",
    "ObjectArrayAssert Assertions.assertThat(java.lang.Object[])": "san",
    "Comparator Collections.reverseOrder(Comparator)": "non",
    "GitHubConnectionFactory GitHubConfig.gitHubConnectionFactory()": "non",
    "AbstractIterableAssert AbstractIterableAssert.anySatisfy(Consumer)": "san",
    "ObjectArrayAssert ObjectArrayAssert.contains(java.lang.Object[])": "san",
    "String String.format(String,java.lang.Object[])": "non",
    "Object CachedRestClient.post(RestOperations,String,Class,String)": "src",
    "String BlogController.listPublishedPostsForDate(int,int,int,int,Model)": "sin",
    "String Enum.name()": "non",
    "String GuideHeader.getRepositoryName()": "src",
    "long Matchers.anyLong()": "non",
    "sagan.site.guides.GuideHeader[] Tutorials.findByProject(Project)": "src",
    "String ProjectRelease.toString()": "non",
    "String Project.getId()": "non",
    "Stream Stream.map(Function)": "non",
    "boolean PaginationInfo.equals(Object)": "non",
    "byte[] FileCopyUtils.copyToByteArray(File)": "non",
    "String ProjectRelease.getGroupId()": "non",
    "MockHttpServletRequestBuilder MockHttpServletRequestBuilder.content(String)": "non",
    "void Project.setStackOverflowTags(String)": "non",
    "AbstractBooleanAssert Assertions.assertThat(boolean)": "san",
    "void Project.setRawBootConfig(String)": "non",
    "String Event.getSummary()": "non",
    "void Tutorials.evictFromCache(String)": "non",
    "void MvcConfig.addViewControllers(ViewControllerRegistry)": "non",
    "String Topical.getTableOfContents()": "src",
    "int MockHttpServletResponse.getStatus()": "non",
    "List Project.getNonMostCurrentReleases()": "non",
    "String GettingStartedGuide.getSshUrl()": "src",
    "ResourceHandlerRegistration ResourceHandlerRegistration.addResourceLocations(java.lang.String[])": "non",
    "void TeamLocation.setName(String)": "non",
    "void TeamLocation.setLatitude(float)": "non",
    "Version Version.getBaseVersion()": "non",
    "void ProjectSample.setUrl(String)": "non",
    "String ProjectRepository.getName()": "non",
    "void ProjectSample.setDisplayOrder(int)": "non",
    "void RedisCacheManager.setDynamic(boolean)": "non",
    "Long ProjectGroup.getId()": "non"
}
