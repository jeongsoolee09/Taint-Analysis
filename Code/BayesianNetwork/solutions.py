# 채점에 필요한 정답지

correct_solution_WhatIWantExample = dict([
    ('void PrintStream.println(int)', 'sin'),
    ('void WhatIWantExample.g(int)', 'san'),
    ('void WhatIWantExample.m3(int)', 'sin'),
    ('void WhatIWantExample.h(int)', 'non'),
    ('void WhatIWantExample.main()', 'non'),
    ('int WhatIWantExample.m2(int)', 'san'),
    ('void WhatIWantExample.f()', 'src'),
    ('int WhatIWantExample.m1()', 'src')
])

correct_solution_relational = dict([
    ("void JdbcTemplate.execute(String)", "sin"),
    ("void RelationalDataAccessApplication.run(java.lang.String[])", "sin"),
    ("ConfigurableApplicationContext SpringApplication.run(Class,java.lang.String[])", "non"),
    ("int[] JdbcTemplate.batchUpdate(String,List)", "sin"),
    ("void RelationalDataAccessApplication.createTable()", "sin"),
    ("String Customer.toString()", "non"),
    ("Object Stream.collect(Collector)", "non"),
    ("void List.forEach(Consumer)", "non"),
    ("void Logger.info(String)", "sin"),
    ("Collector Collectors.toList()", "non"),
    ("String String.format(String,java.lang.Object[])", "non"),
    ("void RelationalDataAccessApplication.query()", "src"),
    ("List Arrays.asList(java.lang.Object[])", "non"),
    ("Long Long.valueOf(long)", "non"),
    ("void RelationalDataAccessApplication.main(java.lang.String[])", "non"),
    ("List Creator.create()", "src"),
    ("Stream List.stream()", "non"),
    ("Stream Stream.map(Function)", "non"),
    ("List JdbcTemplate.query(String,java.lang.Object[],RowMapper)", "src")
])

# correct_solution_sagan1 = dict([
#     ("Date DateFormat.parse(String)", "non"),
#     ("int Object.hashCode()", "san"),
#     ("Object Yaml.load(String)", "src"),
#     ("ResponseActions ResponseActions.andExpect(RequestMatcher)", "non"),
#     ("void ProjectMetadataControllerTests.editProjectReleases_replacesVersionPatterns()", "non"),
#     ("void GuidesJsonTests.deserializeJson()", "src"),
#     ("byte[] String.getBytes(Charset)", "non"),
#     ("void PaginationInfo_PaginationElementsTests.rendersEllipsesBetweenNonAdjacentPages()", "non"),
#     ("String String.substring(int)", "non"),
#     ("String PostView.getEditPath()", "src"),
#     ("void Topical.setTypeLabel(String)", "non"),
#     ("void BlogController_ShowTests.setUp()", "non"), # not sure: no code
#     ("String PostContentRenderer.decode(String)", "non"),
#     ("void BlogController_PublishedPostsTests.postsInModel()", "non"), # not sure: no code
#     ("void BlogAtomFeedViewTests.hasCorrectIdForEntry()", "san"),
#     ("String BlogAdminController.editPost(Long,String,Model)", "src"), # not sure
#     ("Object SpringToolsPlatformRepository.save(Object)", "sin"), # not sure: no code
#     ("InputStream URL.openStream()", "src"), # not sure: no code
#     ("void BlogAdminControllerTests.creatingABlogPostRecordsTheUser()", "san"),
#     ("boolean MemberProfile.isHidden()", "non"),
#     ("Object Mockito.verify(Object)", "san"), # not sure: no code
#     ("Object Connection.getApi()", "src"), # not sure: no code
#     ("String GuideResource.getGitUrl()", "non"),
#     ("void InMemoryUsersConnectionRepository.setConnectionSignUp(ConnectionSignUp)", "non"), # not sure: saving to memory
#     ("void PostFormAdapter_CreatePostTests.postHasCorrectUserEnteredValues()", ),
#     ("void PostForm.setBroadcast(boolean)", ),
#     ("String StaticPagePathFinder$PagePaths.getUrlPath()", ),
#     ("ResultMatcher ModelResultMatchers.attribute(String,Matcher)", ),
#     ("MemberProfile TeamService.fetchMemberProfile(Long)", ),
#     ("byte[] StreamUtils.copyToByteArray(InputStream)", ),
#     ("Comparator Collections.reverseOrder(Comparator)", ),
#     ("ModelAndView ModelAndView.addObject(String,Object)", ),
#     ("Traverson$TraversalBuilder Traverson.follow(java.lang.String[])", ),
#     ("ResponseEntity TopicalController.loadImage(String,String)", ),
#     ("void Post.setBroadcast(boolean)", ),
#     ("void FileOutputStream.write(byte[])", ),
#     ("SecurityContext SecurityContextHolder.getContext()", ),
#     ("Link LinkBuilderSupport.withRel(String)", ),
#     ("int LocalDate.compareTo(ChronoLocalDate)", ),
#     ("MemberProfile MemberProfileBuilder.build()", ),
#     ("void ProjectRelease.setVersion(String)", ),
#     ("void Topicals.evictFromCache(String)", ),
#     ("void EventsCalendarServiceTests.shouldReturnSingleEvent()", ),
#     ("void AsciidoctorGuideContentContributor.contribute(GuideContentResource,File)", ),
#     ("void BlogController_BroadcastPostsTests.postsInModel()", ),
#     ("HeadersConfigurer HeadersConfigurer$ContentTypeOptionsConfig.and()", ),
#     ("String Enum.name()", ),
#     ("void BlogService_UpdatePostTests.setup()", ),
#     ("void SignInServiceTests.mockIsMemberOfTeam(boolean)", ),
#     ("Object ArrayList.get(int)", ),
#     ("void MemberProfile.setLanyrdUsername(String)", ),
#     ("void PageElementsBuilder.addPageElements(ArrayList)", ),
#     ("PostBuilder PostBuilder.author(String,String)", ),
#     ("void BlogControllerTests.titleForBlogYearPage()", ),
#     ("void ProjectVersionOrderTests.getProjectReleases_ordersVersionsByNumber_otherCharacters()", ),
#     ("void DefaultTeamImporter.importTeamMembers(GitHub)", ),
#     ("void BlogAdminControllerTests.dashboardShowsUsersPosts()", ),
#     ("boolean LocalDate.equals(Object)", ),
#     ("ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String,String)", ),
#     ("void AtomFeedView.setCategories(Post,Entry)", ),
#     ("Collection Resources.getContent()", ),
#     ("Matcher Matchers.is(Object)", ),
#     ("void BlogAdminControllerTests.reRenderPosts()", ),
#     ("String SecurityConfig$GithubAuthenticationSigninAdapter.signIn(String,Connection,NativeWebRequest)", ),
#     ("PostFormat PostForm.getFormat()", ),
#     ("void Log.error(Object)", ),
#     ("float TeamLocation.getLatitude()", ),
#     ("sagan.site.guides.GuideHeader[] Tutorials.findAll()", ),
#     ("int Link.hashCode()", ),
#     ("String ToHtmlSerializer.toHtml(RootNode)", ),
#     ("AbstractAssert AbstractAssert.isInstanceOf(Class)", ),
#     ("void Person.setName(String)", ),
#     ("String TeamAdminController.saveProfile(Principal,MemberProfile)", ),
#     ("Optional Topicals.findGuideHeaderByName(String)", ),
#     ("PostCategory Post.getCategory()", ),
#     ("GuideHeader Tutorial.getHeader()", ),
#     ("boolean ConfigurableEnvironment.acceptsProfiles(java.lang.String[])", ),
#     ("void AtomFeedView.setFeedUrl(String,Feed)", ),
#     ("void DocsWebhookControllerTests.testHmacValue()", ),
#     ("Enum Enum.valueOf(Class,String)", ),
#     ("void Entry.setCategories(List)", ),
#     ("void TeamService.updateMemberProfile(String,MemberProfile)", ),
#     ("AbstractObjectArrayAssert AbstractObjectArrayAssert.containsExactlyInAnyOrder(java.lang.Object[])", ),
#     ("String Fixtures.githubRepoJson()", ),
#     ("DefaultResponseCreator MockRestResponseCreators.withSuccess(Resource,MediaType)", ),
#     ("Font Font.deriveFont(int,float)", ),
#     ("Object List.remove(int)", ),
#     ("void PostForm.setDraft(boolean)", ),
#     ("String System.setProperty(String,String)", ),
#     ("String ProjectRelease.getApiDocUrl()", ),
#     ("FontMetrics Graphics.getFontMetrics()", ),
#     ("PostBuilder PostBuilder.id(Long)", ),
#     ("XBUrlIO ProjectionIO.url(String)", ),
#     ("ProjectRelease ProjectRelease.createWithVersionPattern()", ),
#     ("boolean Long.equals(Object)", ),
#     ("Page PostRepository.findByBroadcastAndDraftFalseAndPublishAtBefore(boolean,Date,Pageable)", ),
#     ("BDDMockito$BDDMyOngoingStubbing BDDMockito$BDDMyOngoingStubbing.will(Answer)", ),
#     ("Object AbstractRequestMatcherRegistry.anyRequest()", ),
#     ("void MockHttpServletRequest.addHeader(String,Object)", ),
#     ("ResponseActions MockRestServiceServer.expect(RequestMatcher)", ),
# ])
