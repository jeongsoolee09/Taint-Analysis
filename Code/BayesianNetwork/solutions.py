# 채점에 필요한 정답지

correct_solution_WhatIWantExample = dict([
    ('void PrintStream.println(int)', 'sin'),
    ('void WhatIWantExample.g(int)', 'san'),
    ('void WhatIWantExample.m3(int)', 'sin'),
    ('void WhatIWantExample.h(int)', 'non'),
    ('void WhatIWantExample.main()', 'non'),
    ('int WhatIWantExample.m2(int)', 'san'),
    ('void WhatIWantExample.f()', 'src'),
    ('int WhatIWantExample.m1()', 'src')
])

correct_solution_relational = dict([
    ("void JdbcTemplate.execute(String)", "sin"),
    ("void RelationalDataAccessApplication.run(java.lang.String[])", "sin"),
    ("ConfigurableApplicationContext SpringApplication.run(Class,java.lang.String[])", "non"),
    ("int[] JdbcTemplate.batchUpdate(String,List)", "sin"),
    ("void RelationalDataAccessApplication.createTable()", "sin"),
    ("String Customer.toString()", "non"),
    ("Object Stream.collect(Collector)", "non"),
    ("void List.forEach(Consumer)", "non"),
    ("void Logger.info(String)", "sin"),
    ("Collector Collectors.toList()", "non"),
    ("String String.format(String,java.lang.Object[])", "non"),
    ("void RelationalDataAccessApplication.query()", "src"),
    ("List Arrays.asList(java.lang.Object[])", "non"),
    ("Long Long.valueOf(long)", "non"),
    ("void RelationalDataAccessApplication.main(java.lang.String[])", "non"),
    ("List Creator.create()", "src"),
    ("Stream List.stream()", "non"),
    ("Stream Stream.map(Function)", "non"),
    ("List JdbcTemplate.query(String,java.lang.Object[],RowMapper)", "src")
])


correct_solution_sagan = dict([
    ("Set GuideHeader.getProjects()", ""),
    ("void AtomFeedControllerTests.feedMetadataInModelForBroadcastPosts()", ""),
    ("List AbstractGuide.getImages()", ""),
    ("void MemberProfileTests.nullTwitterLink()", ""),
    ("String Fixtures.load(String)", ""),
    ("String BlogController.showPost(String,String,String,String,Model)", ""),
    ("void BlogControllerTests.titleForBlogYearMonthPage()", ""),
    ("void BlogService_ValidPostTests.postIsPersisted()", ""),
    ("String URL.toString()", ""),
    ("List Project.getProjectReleases()", ""),
    ("AbstractIterableAssert AbstractIterableAssert.hasSize(int)", ""),
    ("RootNode PegDownProcessor.parseMarkdown(char[])", ""),
    ("ProjectRelease ProjectReleaseBuilder.build()", ""),
    ("void MemberProfileTests.emptyLanyrdLink()", ""),
    ("void Link.setRel(String)", ""),
    ("void EventsCalendarServiceTests.shouldFailWithMissingCalendar()", ""),
    ("List TeamRepository.findByHiddenOrderByNameAsc(boolean)", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersMultipleStylesOfMilestones()", ""),
    ("void BlogAdminControllerTests.redirectToEditPostAfterCreation()", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersElementsWithinAReleaseTrain()", ""),
    ("void Entry.setAlternateLinks(List)", ""),
    ("boolean ProjectRelease.equals(Object)", ""),
    ("void DocsWebhookControllerTests.testInvalidPayload()", ""),
    ("boolean MarkdownRenderer.canRender(MediaType)", ""),
    ("List Tutorial.getImages()", ""),
    ("String DefaultGuideHeader.getCiStatusImageUrl()", ""),
    ("void RewriteTests.stripsWwwSubdomain()", ""),
    ("int ProjectGroup.hashCode()", ""),
    ("void BlogController_ShowTests.setUp()", ""),
    ("void MemberProfile.setSpeakerdeckUsername(String)", ""),
    ("void BlogService_UpdatePostTests.postIsPersisted()", ""),
    ("void Feed.setOtherLinks(List)", ""),
    ("int ProjectRelease.compareTo(ProjectRelease)", ""),
    ("String PostContentRenderer.decode(String)", ""),
    ("void Post.setCreatedAt(Date)", ""),
    ("void PostTests.isLiveIfPublishedInThePast()", ""),
    ("void PostViewTests.knowsWhenSummaryAndContentDiffer()", ""),
    ("void Log.error(Object)", ""),
    ("String PostCategory.getUrlSlug()", ""),
    ("Project ProjectVersionOrderTests.getProject(java.lang.String[])", ""),
    ("String CloudFoundryMvcConfig.getGitCommitId()", ""),
    ("ResponseEntity DocsWebhookController.handleWebhookAuthenticationFailure(WebhookAuthenticationException)", ""),
    ("String GuideContentResource.getTableOfContents()", ""),
    ("OptionalInt IntStream.max()", ""),
    ("String Tutorial.getPushToPwsUrl()", ""),
    ("void Feed.setAlternateLinks(List)", ""),
    ("void SignInServiceTests.isSpringMember()", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersVersionsByNumber_milestonesWithVersions()", ""),
    ("void AtomFeedView.setAuthor(Post,Entry)", ""),
    ("Matcher CoreMatchers.nullValue()", ""),
    ("void SpringToolsPlatformRepository.delete(Serializable)", ""),
    ("void Entry.setCategories(List)", ""),
    ("Page BlogService.refreshPosts(int,int)", ""),
    ("void FilterRegistrationBean.setFilter(Filter)", ""),
    ("ProjectRelease ProjectMetadataController.updateReleaseMetadata(String,ProjectRelease)", ""),
    ("Printer Printer.print(char)", ""),
    ("String DefaultGuideHeader.getZipUrl()", ""),
    ("void BadgeControllerTests.projecWithTwoReleasesUsingSymbolicNamesWithNumbersWithoutCurrentFlagPicksMostRecentRelease()", ""),
    ("Long MemberProfile.getId()", ""),
    ("String ProjectsController.showProject(Model,String)", ""),
    ("void MarkupControllerTests.renderMarkdown()", ""),
    ("String ProjectRelease.getVersion()", ""),
    ("void GuideResourceTests.withGuideProjects()", ""),
    ("ResultMatcher JsonPathResultMatchers.doesNotExist()", ""),
    ("void PaginationInfo_PaginationElementsTests.rendersFirstSixPagesOnPageOne_givenEnoughNumberOfPages()", ""),
    ("void MemberProfileTests.speakerdeckLink()", ""),
    ("int MemberProfile.hashCode()", ""),
    ("PostFormat Post.getFormat()", ""),
    ("void BlogAtomFeedViewTests.hasLinkToAssociatedBlogList()", ""),
    ("void MatcherAssertionErrors.assertThat(Object,Matcher)", ""),
    ("Object Connection.getApi()", ""),
    ("void Assert.isTrue(boolean,String)", ""),
    ("Long Long.valueOf(String)", ""),
    ("String MarkdownRenderer.renderToHtml(String)", ""),
    ("void PostForm.setDraft(boolean)", ""),
    ("DataSource CloudFoundryDatabaseConfig.dataSource()", ""),
    ("void Feed.setUpdated(Date)", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersVersionsByNumber_milestones()", ""),
    ("void Post.setCategory(PostCategory)", ""),
    ("void Post.setFormat(PostFormat)", ""),
    ("long Math.min(long,long)", ""),
    ("void RegistrationBean.addInitParameter(String,String)", ""),
    ("String SaganRendererClient.renderAsciidoc(String)", ""),
    ("void MemberProfile.setUsername(String)", ""),
    ("void Locale.setDefault(Locale)", ""),
    ("String Topical.getContent()", ""),
    ("String PageElement.getLabel()", ""),
    ("String SpringToolsAdminController.newPlatform(Model)", ""),
    ("Stream Collection.stream()", ""),
    ("void Attributes.setSkipFrontMatter(boolean)", ""),
    ("Set GettingStartedGuide.getProjects()", ""),
    ("void Log.error(Object,Throwable)", ""),
    ("String DateFormat.format(Date)", ""),
    ("int OptionalInt.orElse(int)", ""),
    ("MemberProfileBuilder MemberProfileBuilder.geoLocation(float,float)", ""),
    ("Object PostRepository.findOne(Serializable)", ""),
    ("List GithubClient.fetchOrgRepositories(String)", ""),
    ("String SaganRendererClient.renderMarkdown(String)", ""),
    ("void Post.setDraft(boolean)", ""),
    ("String Tutorial.getTypeLabel()", ""),
    ("List ProjectMetadataService.getActiveTopLevelProjects()", ""),
    ("void ConfigurableEnvironment.addActiveProfile(String)", ""),
    ("String TeamController.showTeam(Model)", ""),
    ("List ProjectMetadataRepository.findByCategory(String,Sort)", ""),
    ("int Object.hashCode()", ""),
    ("String PostCategory.getId()", ""),
    ("boolean List.add(Object)", ""),
    ("String Project.getRepoUrl()", ""),
    ("String GuideContentResource.getContent()", ""),
    ("HttpStatus ResponseEntity.getStatusCode()", ""),
    ("Set Collections.singleton(Object)", ""),
    ("void ProjectAdminController.normalizeProjectReleases(Project,String)", ""),
    ("Authentication SecurityContext.getAuthentication()", ""),
    ("OngoingStubbing OngoingStubbing.thenAnswer(Answer)", ""),
    ("Object RestOperations.getForObject(String,Class,java.lang.Object[])", ""),
    ("void PostFormAdapter_CreatePostTests.postCreatedDateDefaultsToNow()", ""),
    ("String PostView.getPath()", ""),
    ("String AbstractGuide.createPushToPwsUrl(String)", ""),
    ("String AbstractGuide.getDescription()", ""),
    ("ArgumentCaptor ArgumentCaptor.forClass(Class)", ""),
    ("boolean File.isDirectory()", ""),
    ("Page PostRepository.findByDraftFalseAndAuthorAndPublishAtBeforeOrderByPublishAtDesc(MemberProfile,Date,Pageable)", ""),
    ("Object AbstractJsonMarshalTester.readObject(String)", ""),
    ("void PwsGuideContentContributor.contribute(GuideContentResource,File)", ""),
    ("void GettingStartedGuide.setTypeLabel(String)", ""),
    ("void BlogController_BroadcastPostsTests.postsInModel()", ""),
    ("String StringBuffer.toString()", ""),
    ("void BlogControllerTests.tearDown()", ""),
    ("String Matcher.group(int)", ""),
    ("void Map.forEach(BiConsumer)", ""),
    ("void PaginationInfo_PaginationElementsTests.rendersFirstSixPagesOnPageThree_givenEnoughNumberOfPages()", ""),
    ("PostFormat PostForm.getFormat()", ""),
    ("void TeamControllerTests.includeTeamLocationsInModel()", ""),
    ("Object PostRepository.save(Object)", ""),
    ("Matcher Matchers.hasItems(java.lang.Object[])", ""),
    ("ResponseEntity GettingStartedGuideController.loadImage(String,String)", ""),
    ("Object Matchers.eq(Object)", ""),
    ("DefaultResponseCreator MockRestResponseCreators.withSuccess(String,MediaType)", ""),
    ("String Project.getRenderedOverview()", ""),
    ("boolean List.contains(Object)", ""),
    ("Charset Charset.forName(String)", ""),
    ("Long Post.getId()", ""),
    ("String Project.getParentId()", ""),
    ("String TeamAdminController.saveProfile(Principal,MemberProfile)", ""),
    ("void ProjectReleaseVersionTests.releaseTrainGaDetected()", ""),
    ("Object LinkedHashMap.get(Object)", ""),
    ("boolean StringUtils.isEmpty(Object)", ""),
    ("void SecurityConfig.configureHeaders(HeadersConfigurer)", ""),
    ("String MemberProfile.getFullName()", ""),
    ("String Topical.getGitUrl()", ""),
    ("void BlogService_UpdatePostTests.postIsUpdated()", ""),
    ("void RewriteTests.linkedinIsRedirected()", ""),
    ("PostBuilder PostBuilder.draft()", ""),
    ("HttpHeaders HttpEntity.getHeaders()", ""),
    ("org.springframework.core.io.Resource[] ResourcePatternResolver.getResources(String)", ""),
    ("Date Post.getCreatedAt()", ""),
    ("VersionResourceResolver VersionResourceResolver.addFixedVersionStrategy(String,java.lang.String[])", ""),
    ("void Feed.setId(String)", ""),
    ("ProjectRelease ProjectMetadataController.removeReleaseMetadata(String,String)", ""),
    ("String Matchers.anyString()", ""),
    ("void ProjectMetadataRepository.delete(Serializable)", ""),
    ("HeadersConfigurer HeadersConfigurer.addHeaderWriter(HeaderWriter)", ""),
    ("void GuidesControllerTests.fetchAllGuides()", ""),
    ("void Project.setRenderedBootConfig(String)", ""),
    ("InterceptorRegistration InterceptorRegistry.addInterceptor(HandlerInterceptor)", ""),
    ("ChainingTextStringParser Biweekly.parse(String)", ""),
    ("void RewriteTests.supportRenamedXDGuide()", ""),
    ("String AsciidoctorRenderer.renderToHtml(String)", ""),
    ("String Tutorial.getSshUrl()", ""),
    ("String MemberProfile.getName()", ""),
    ("String DefaultGuideHeader.getCiLatestUrl()", ""),
    ("MemberProfileBuilder MemberProfileBuilder.username(String)", ""),
    ("void PaginationInfo_PaginationElementsTests.givenOnePage_rendersCurrentElement()", ""),
    ("Page BlogService.getPublishedPosts(Pageable)", ""),
    ("void PostFormAdapter_CreatePostTests.draftWithNullPublishDate()", ""),
    ("String GuideHeader.getSshUrl()", ""),
    ("void RewriteTests.tools3IsRedirected()", ""),
    ("String DefaultGuideHeader.getName()", ""),
    ("VerificationMode Mockito.never()", ""),
    ("Pageable PageableFactory.forDashboard(int)", ""),
    ("void PaginationInfo_PaginationElementsTests.rendersCurrentPage()", ""),
    ("void BlogController_PublishedPostsTests.postsInModel()", ""),
    ("List ICalendar.getEvents()", ""),
    ("Object Mockito.verify(Object)", ""),
    ("String URI.getHost()", ""),
    ("void TeamService.updateAvatarUrlwithGravatar(MemberProfile)", ""),
    ("void PostFormAdapter.summarize(Post)", ""),
    ("AbstractObjectArrayAssert AbstractObjectArrayAssert.containsExactlyInAnyOrder(java.lang.Object[])", ""),
    ("GuideType GuideResource.getType()", ""),
    ("String SpringToolsAdminController.edit(SpringToolsPlatform,Model)", ""),
    ("String AbstractGuide.getGithubUrl()", ""),
    ("byte[] StreamUtils.copyToByteArray(InputStream)", ""),
    ("PostFormat PostFormat.valueOf(String)", ""),
    ("List AuthorityUtils.commaSeparatedStringToAuthorityList(String)", ""),
    ("void PostTests.slugReplacesSpacesWithDashes()", ""),
    ("java.io.File[] File.listFiles()", ""),
    ("String MessageDigestPasswordEncoder.encodePassword(String,Object)", ""),
    ("String BlogAdminController.createPost(Principal,PostForm,BindingResult,Model)", ""),
    ("void BlogAdminControllerTests.reRenderPosts()", ""),
    ("Post BlogService.getPost(String,Date)", ""),
    ("void BlogController_PublishedPostsForCategoryTests.viewNameIsIndex()", ""),
    ("void BadgeControllerTests.badgeShouldBeGenerated()", ""),
    ("List ProjectVersionOrderTests.getProjectReleases(Project)", ""),
    ("PostBuilder PostBuilder.author(String,String)", ""),
    ("Date PostView.getCreatedAt()", ""),
    ("Collection AbstractCacheManager.getCacheNames()", ""),
    ("GuideType GuideType.valueOf(String)", ""),
    ("StringBuilder StringBuilder.append(Object)", ""),
    ("String String.replaceAll(String,String)", ""),
    ("ResourceChainRegistration ResourceChainRegistration.addResolver(ResourceResolver)", ""),
    ("sagan.blog.PostFormat[] PostFormat.values()", ""),
    ("List List.subList(int,int)", ""),
    ("List ProjectMetadataController.releaseMetadata(String)", ""),
    ("List AtomFeedView.buildFeedEntries(Map,HttpServletRequest,HttpServletResponse)", ""),
    ("void GuideContentResource.setTableOfContents(String)", ""),
    ("Object HttpEntity.getBody()", ""),
    ("boolean PostView.isBroadcast()", ""),
    ("boolean String.contains(CharSequence)", ""),
    ("String GuideType.stripPrefix(String)", ""),
    ("void GithubAuthenticationSigninAdapterTests.clean()", ""),
    ("List PaginationInfo.getPageElements()", ""),
    ("File File.createTempFile(String,String)", ""),
    ("void MemberProfileTests.emptySpeakerdeckLink()", ""),
    ("void EventsCalendarServiceTests.shouldFailWithoutCalendarUri()", ""),
    ("boolean MemberProfile.hasTwitterUsername()", ""),
    ("ResultMatcher JsonPathResultMatchers.value(Matcher)", ""),
    ("String DefaultGuideHeader.getRepositoryName()", ""),
    ("String GettingStartedGuide.getContent()", ""),
    ("GuideMetadata SaganRendererClient.fetchTopicalGuide(String)", ""),
    ("Printer Printer.println()", ""),
    ("ContentResultMatchers MockMvcResultMatchers.content()", ""),
    ("void PostTests.isLiveIfPublishedNow()", ""),
    ("String HttpServletRequest.getServerName()", ""),
    ("Object CachedRestClient.get(RestOperations,String,Class)", ""),
    ("String BlogController.listPublishedPostsForYear(int,int,Model)", ""),
    ("boolean String.equals(Object)", ""),
    ("String AbstractGuide.getTypeLabel()", ""),
    ("Sort Page.getSort()", ""),
    ("int LocalDate.compareTo(ChronoLocalDate)", ""),
    ("Page PostRepository.findByDraftFalseAndPublishAtBeforeOrderByPublishAtDesc(Date,Pageable)", ""),
    ("void Person.setName(String)", ""),
    ("boolean ProjectRelease.isSnapshot()", ""),
    ("void BlogControllerTests.handleBlogPostMovedExceptionRedirects()", ""),
    ("void BlogController_ShowTests.viewNameIsShow()", ""),
    ("byte[] String.getBytes()", ""),
    ("Page BlogService.getPublishedPostsByDate(int,int,int,Pageable)", ""),
    ("void AtomFeedView.setBlogUrl(String,Feed)", ""),
    ("void BlogAtomFeedViewTests.feedUpdatedDateIsNotPresentWhenThereAreNoPosts()", ""),
    ("void BlogController_ShowTests.singlePostInModelForOnePost()", ""),
    ("OngoingStubbing Mockito.when(Object)", ""),
    ("String Tutorial.getContent()", ""),
    ("Matcher Matchers.notNullValue()", ""),
    ("void RewriteTests.setUp()", ""),
    ("List Collections.singletonList(Object)", ""),
    ("Integer Integer.valueOf(int)", ""),
    ("Page BlogService.getAllPosts(Pageable)", ""),
    ("void PostFormAdapter_UpdatePostTests.postHasRenderedSummary()", ""),
    ("void ProjectReleaseVersionTests.releaseServiceReleaseTrainGaDetected()", ""),
    ("void ProjectRelease.setRepository(ProjectRepository)", ""),
    ("String AbstractGuide.getPushToPwsUrl()", ""),
    ("MemberProfile SignInService.getOrCreateMemberProfile(Long,GitHub)", ""),
    ("Graphics BufferedImage.getGraphics()", ""),
    ("String BlogController.listPublishedPosts(Model,int)", ""),
    ("void GuidesControllerTests.fetchGuide()", ""),
    ("PostView PostView.of(Post,DateFactory)", ""),
    ("int List.size()", ""),
    ("boolean Post.isBroadcast()", ""),
    ("String PostCategory.toString()", ""),
    ("Long TeamLocation.getMemberId()", ""),
    ("void Logger.error(String,Throwable)", ""),
    ("Cloud CloudFoundryDatabaseConfig.cloud()", ""),
    ("void MemberProfile.setLanyrdUsername(String)", ""),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchAllGuides()", ""),
    ("org.springframework.social.github.api.GitHubUser[] DefaultTeamImporter.getGitHubUsers(GitHub)", ""),
    ("ProjectRelease Project.removeProjectRelease(String)", ""),
    ("String ProjectRepository.toString()", ""),
    ("String Link.toString()", ""),
    ("void BadgeControllerTests.badgeNotFound()", ""),
    ("String GuideResource.getCloneUrl()", ""),
    ("AbstractAssert AbstractAssert.isInstanceOf(Class)", ""),
    ("String Properties.getProperty(String)", ""),
    ("void AsciidoctorRendererTests.renderTitleAnchors()", ""),
    ("void MemberProfile.setHidden(boolean)", ""),
    ("void ProjectRelease.setRefDocUrl(String)", ""),
    ("String SiteUrl.getUrl()", ""),
    ("void GuideImage.setEncodedContent(String)", ""),
    ("void MarkdownRendererTests.renderJavaScript()", ""),
    ("void MemberProfileTests.emptyTwitterLink()", ""),
    ("void GuideContentContributor.contribute(GuideContentResource,File)", ""),
    ("void Assert.assertNotNull(Object)", ""),
    ("void MatcherAssert.assertThat(String,Object,Matcher)", ""),
    ("void PostTests.slugStripsNewLineCharacters()", ""),
    ("void PaginationInfo_PreviousAndNextControlsTests.givenOnFirstPageOfThree_nextIsVisible()", ""),
    ("void GuideRendererTests.renderSampleGuideWithPwsMetadata()", ""),
    ("String GuideResource.getName()", ""),
    ("void BlogAdminControllerTests.showPostView()", ""),
    ("void MemberProfile.setJobTitle(String)", ""),
    ("Post PostRepository.findByPublicSlugAndDraftFalseAndPublishAtBefore(String,Date)", ""),
    ("String Connection.getDisplayName()", ""),
    ("byte[] Fixtures.loadData(String)", ""),
    ("List TeamService.fetchActiveMembers()", ""),
    ("void BlogControllerTests.titleForBlogYearPage()", ""),
    ("void AtomFeedView.setCategories(Post,Entry)", ""),
    ("Section Section.valueOf(String)", ""),
    ("boolean Set.add(Object)", ""),
    ("String TeamAdminController.getTeamAdminPage(Model)", ""),
    ("String Topical.getTypeLabel()", ""),
    ("void Project.setRenderedOverview(String)", ""),
    ("void GuideContentResource.setContent(String)", ""),
    ("java.lang.String[] Version.getParts()", ""),
    ("UrlRewriteFilter RewriteTests.createUrlFilter(String,String)", ""),
    ("IterableAssert Assertions.assertThat(Iterable)", ""),
    ("Post BlogService.getPost(Long)", ""),
    ("Boolean Boolean.valueOf(boolean)", ""),
    ("Date PostFormAdapter.createdDate(PostForm,Date)", ""),
    ("void ZipFile.close()", ""),
    ("AbstractCharSequenceAssert Assertions.assertThat(String)", ""),
    ("String SpringToolsAdminController.delete(String)", ""),
    ("java.lang.String[] GuideResource.getProjects()", ""),
    ("void ProjectAdminControllerTests.editProject_newProjectSampleDisplayOrder()", ""),
    ("Object ControllerLinkBuilder.methodOn(Class,java.lang.Object[])", ""),
    ("Optional Topicals.findByName(String)", ""),
    ("boolean MemberProfile.equals(Object)", ""),
    ("GuideContentResource GuideRenderer.render(GuideType,String)", ""),
    ("void GithubClientTests.downloadRepositoryAsZipBall()", ""),
    ("void ArrayList.forEach(Consumer)", ""),
    ("void ViewControllerRegistration.setViewName(String)", ""),
    ("boolean PageElement.isCurrentPage()", ""),
    ("MemberProfile PostView.getAuthor()", ""),
    ("void SetSystemProperty.after()", ""),
    ("String LocalDate.toString()", ""),
    ("ResponseEntity TutorialController.loadImage(String,String)", ""),
    ("void AtomFeedControllerTests.feedMetadataInModelForCategoryPosts()", ""),
    ("Stream Stream.sorted()", ""),
    ("List ProjectMetadataRepository.findDistinctByCategoryAndParentProjectIsNull(String,Sort)", ""),
    ("boolean PaginationInfo.isVisible()", ""),
    ("int HeaderNode.getLevel()", ""),
    ("Stream List.stream()", ""),
    ("void PostFormAdapter_UpdatePostTests.setup()", ""),
    ("ConnectionRepository InMemoryUsersConnectionRepository.createConnectionRepository(String)", ""),
    ("boolean MemberProfile.hasLanyrdUsername()", ""),
    ("void RewriteTests.validateRedirect(String,String,int)", ""),
    ("void Topical.setTypeLabel(String)", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersVersionsByNumber_otherCharacters()", ""),
    ("RequestMatcher MockRestRequestMatchers.header(String,java.lang.String[])", ""),
    ("String GuideHeader.getGitUrl()", ""),
    ("boolean ProjectRepository.equals(Object)", ""),
    ("sagan.site.guides.GuideHeader[] Topicals.findByProject(Project)", ""),
    ("PostCategory PostView.getCategory()", ""),
    ("void GuidesControllerTests.fetchUnknownGuideContent()", ""),
    ("String Tutorial.getTableOfContents()", ""),
    ("List Arrays.asList(java.lang.Object[])", ""),
    ("String PostFormat.getDisplayName()", ""),
    ("String Element.text()", ""),
    ("void BlogAdminControllerTests.showPostModel()", ""),
    ("void PostFormAdapter.setPostProperties(PostForm,String,Post)", ""),
    ("String MockHttpServletResponse.getRedirectedUrl()", ""),
    ("ResourceSupport GuideResourceAssembler.toResource(Object)", ""),
    ("String StaticPagePathFinder.buildRequestMapping(String)", ""),
    ("void ProjectReleaseVersionTests.snapshotDetectedCiStyle()", ""),
    ("Float Float.valueOf(String)", ""),
    ("Object Map.put(Object,Object)", ""),
    ("MemberProfile TeamRepository.findByGithubId(Long)", ""),
    ("float TeamLocation.getLatitude()", ""),
    ("Page BlogService.getDraftPosts(Pageable)", ""),
    ("void PaginationInfo_PaginationElementsTests.assertNavigableElementOnPage(String,PageElement)", ""),
    ("String GettingStartedGuide.getCiStatusImageUrl()", ""),
    ("GuideHeader GettingStartedGuide.getHeader()", ""),
    ("RedisConnectionFactory CloudFoundryCacheConfig.redisConnectionFactory()", ""),
    ("void SiteApplication.main(java.lang.String[])", ""),
    ("boolean ArrayList.add(Object)", ""),
    ("String GettingStartedGuideController.viewGuide(String,Model)", ""),
    ("String ProjectRelease.getVersionDisplayName(boolean)", ""),
    ("MemberProfile MemberProfileBuilder.build()", ""),
    ("boolean List.isEmpty()", ""),
    ("AbstractObjectArrayAssert Assertions.assertThat(java.lang.Object[])", ""),
    ("Matcher CoreMatchers.equalTo(Object)", ""),
    ("int Link.hashCode()", ""),
    ("Date PostView.getPublishAt()", ""),
    ("String StringUtils.arrayToCommaDelimitedString(java.lang.Object[])", ""),
    ("SecurityContext SecurityContextHolder.getContext()", ""),
    ("void PostForm.setCreatedAt(Date)", ""),
    ("String Topical.getSshUrl()", ""),
    ("Project ProjectMetadataController.updateProjectMetadata(String,List)", ""),
    ("boolean ZipEntry.isDirectory()", ""),
    ("String MemberProfile.getLanyrdUsername()", ""),
    ("List StaticPagePathFinder.findPaths()", ""),
    ("void MemberProfile.setGeoLocation(GeoLocation)", ""),
    ("Post PostBuilder.build()", ""),
    ("void BlogController_BroadcastPostsTests.providesPaginationInfoInModel()", ""),
    ("PostCategory PostCategoryFormatter.parse(String,Locale)", ""),
    ("String AbstractGuide.getContent()", ""),
    ("String ProjectAdminController.save(Project,List,List,String,String)", ""),
    ("void FilterChain.doFilter(ServletRequest,ServletResponse)", ""),
    ("void BlogService_ValidPostTests.createsAPost()", ""),
    ("List Page.getContent()", ""),
    ("void Project.setChildProjectList(List)", ""),
    ("Post PostRepository.findByPublicSlugAliasesInAndDraftFalseAndPublishAtBefore(Set,Date)", ""),
    ("void AtomFeedView.setId(Post,Entry,HttpServletRequest)", ""),
    ("void PostForm.setContent(String)", ""),
    ("void Project.setRawOverview(String)", ""),
    ("PostBuilder PostBuilder.title(String)", ""),
    ("String MemberProfile.getAvatarUrl()", ""),
    ("void RewriteTests.tutorialImagesShouldNeverHaveTrailingSlash()", ""),
    ("RedirectView BlogController.handle(PostMovedException)", ""),
    ("ResponseEntity DocsWebhookController.processTopicalsUpdate(String,String,String,String)", ""),
    ("Enumeration ZipFile.entries()", ""),
    ("String LocalDate.toString(String)", ""),
    ("String ToHtmlSerializer.toHtml(RootNode)", ""),
    ("String LearnController.learn(Model)", ""),
    ("ProjectReleaseBuilder ProjectReleaseBuilder.versionName(String)", ""),
    ("String GettingStartedGuide.getPushToPwsUrl()", ""),
    ("Page BlogService.getPublishedPostsByDate(int,int,Pageable)", ""),
    ("FilterRegistrationBean UrlRewriterFilterConfig.rewriteFilterConfig()", ""),
    ("void Post.setPublishAt(Date)", ""),
    ("AtomFeedView AtomFeedController.listPublishedPostsForCategory(PostCategory,Model,HttpServletResponse)", ""),
    ("String ProjectAdminController.delete(String,Model)", ""),
    ("ICalendar ChainingTextStringParser.first()", ""),
    ("void BlogPostContentRendererTests.rendersDecodedHtml()", ""),
    ("String GitHubUser.getLogin()", ""),
    ("OptionsBuilder OptionsBuilder.baseDir(File)", ""),
    ("OptionsBuilder OptionsBuilder.headerFooter(boolean)", ""),
    ("long Page.getTotalElements()", ""),
    ("void ProjectAdminControllerTests.editProject_presentsVersionPatternsInUris()", ""),
    ("String URL.getPath()", ""),
    ("String FilterConfig.getInitParameter(String)", ""),
    ("void BlogPostContentRendererTests.rendersMultipleCallouts()", ""),
    ("String Project.getRenderedBootConfig()", ""),
    ("String Link.getRel()", ""),
    ("void MemberProfileTests.fullNameFallsBackToUsername()", ""),
    ("String GuideHeader.getDescription()", ""),
    ("String SpringToolsPlatform.getId()", ""),
    ("void AbstractGuide.setTypeLabel(String)", ""),
    ("String ProjectAdminController.edit(Project,Model)", ""),
    ("StringBuilder StringBuilder.append(int)", ""),
    ("PostBuilder PostBuilder.publishYesterday()", ""),
    ("Matcher Is.is(Object)", ""),
    ("void UrlRewriteFilter.checkConf(Conf)", ""),
    ("String BlogAdminController.dashboard(Model,int)", ""),
    ("Set AbstractGuide.getProjects()", ""),
    ("void Project.setParentProject(Project)", ""),
    ("String Elements.html()", ""),
    ("boolean PostForm.isBroadcast()", ""),
    ("Matcher CoreMatchers.containsString(String)", ""),
    ("void DefaultTeamImporter.importTeamMembers(GitHub)", ""),
    ("Pageable PageableFactory.build(int,int)", ""),
    ("String GettingStartedGuide.getGitUrl()", ""),
    ("void ProjectMetadataControllerTests.updateProject_patchesTheProject()", ""),
    ("boolean Matcher.find()", ""),
    ("void AtomFeedView.buildFeedMetadata(Map,Feed,HttpServletRequest)", ""),
    ("void ProjectAdminControllerTests.saveProject_rendersAsciidocContent()", ""),
    ("void PageElementsBuilder.addEllipsis(ArrayList)", ""),
    ("URI Event.parseLink(VEvent)", ""),
    ("List ProjectMetadataService.getProjects()", ""),
    ("ProjectionIO XBProjector.io()", ""),
    ("CacheManager StandaloneCacheConfig.simpleCacheManager()", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersVersionsByNumber_minor()", ""),
    ("void AtomFeedControllerTests.setUp()", ""),
    ("String GuideResource.getSshUrl()", ""),
    ("void GuidesJsonTests.deserializeJson()", ""),
    ("void ExpectedException.expect(Class)", ""),
    ("Iterator List.iterator()", ""),
    ("IterableAssert IterableAssert.containsExactly(java.lang.Object[])", ""),
    ("void PaginationInfo_PaginationElementsTests.givenTenPagesOnPageFive_rendersPreviousTwoPagesAndNextThree()", ""),
    ("List Collections.emptyList()", ""),
    ("void BlogController_ShowTests.providesDisqusShortnameInModel()", ""),
    ("Link MemberProfile.getGithubLink()", ""),
    ("String StringWriter.toString()", ""),
    ("Object Matchers.anyObject()", ""),
    ("Comparator Comparator.comparingInt(ToIntFunction)", ""),
    ("boolean ProjectRelease.hasApiDocUrl()", ""),
    ("PostBuilder PostBuilder.unscheduled()", ""),
    ("ResultMatcher ModelResultMatchers.attribute(String,Object)", ""),
    ("Object CloneableBean.beanClone(Object,Set)", ""),
    ("URL ClassLoader.getResource(String)", ""),
    ("int ArrayList.size()", ""),
    ("int String.hashCode()", ""),
    ("String AbstractUrlBasedView.getUrl()", ""),
    ("MemberProfileBuilder MemberProfileBuilder.id(Long)", ""),
    ("ResultMatcher JsonPathResultMatchers.value(Object)", ""),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchTopicalGuides()", ""),
    ("void ProjectAdminController.denormalizeProjectReleases(Project)", ""),
    ("void PostFormAdapter.refreshPost(Post)", ""),
    ("void PostViewTests.publishedPost()", ""),
    ("void VersionBadgeService.preDestroy()", ""),
    ("String MemberProfile.getGithubUsername()", ""),
    ("String GettingStartedGuide.getZipUrl()", ""),
    ("GitHubUserProfile UserOperations.getUserProfile()", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersVersionsByNumber_patch()", ""),
    ("String Feed.getId()", ""),
    ("Object ArrayList.remove(int)", ""),
    ("String ProjectRelease.getApiDocUrl()", ""),
    ("String AbstractGuide.getCloneUrl()", ""),
    ("List SpringToolsPlatformRepository.findAll()", ""),
    ("String BadgeSvg.toString()", ""),
    ("String ProjectAdminController.list(Model)", ""),
    ("String GettingStartedGuide.getTitle()", ""),
    ("List PostRepository.findAll()", ""),
    ("Class Object.getClass()", ""),
    ("Matcher Pattern.matcher(CharSequence)", ""),
    ("ViewControllerRegistration ViewControllerRegistry.addViewController(String)", ""),
    ("Collector Collectors.groupingBy(Function)", ""),
    ("void SignInServiceTests.mockIsMemberOfTeam(boolean)", ""),
    ("boolean MemberProfile.hasSpeakerdeckUsername()", ""),
    ("StringBuffer HttpServletRequest.getRequestURL()", ""),
    ("String String.substring(int)", ""),
    ("Link MemberProfile.getSpeakerdeckLink()", ""),
    ("void MemberProfile.setAvatarUrl(String)", ""),
    ("void DefaultGuideHeaderTests.testHeaderData()", ""),
    ("Object HashMap.put(Object,Object)", ""),
    ("void DocsWebhookController.logPayload(Map)", ""),
    ("void BlogController_PublishedPostsForCategoryTests.providesAllCategoriesInModel()", ""),
    ("void GuideResourceTests.nullRepositoryDescription()", ""),
    ("Object Object.clone()", ""),
    ("AbstractThrowableAssert AbstractThrowableAssert.hasMessage(String)", ""),
    ("String Link.getText()", ""),
    ("UserOperations GitHub.userOperations()", ""),
    ("void MatcherAssert.assertThat(Object,Matcher)", ""),
    ("void Logger.info(String,Object)", ""),
    ("ClassPathResource BlogPostContentRendererTests.getClassPathResource(String)", ""),
    ("ClassLoader Class.getClassLoader()", ""),
    ("void PostTests.isNotLiveIfScheduledInTheFuture()", ""),
    ("void PostViewTests.knowsWhenSummaryAndContentAreEqual()", ""),
    ("Optional Tutorial.getImageContent(String)", ""),
    ("AbstractBooleanAssert AbstractBooleanAssert.isTrue()", ""),
    ("String AbstractGuide.getName()", ""),
    ("LocalDate Event.getFirstDay()", ""),
    ("String BlogAdminController.updatePost(Long,PostForm,BindingResult,Model)", ""),
    ("VerificationMode Mockito.times(int)", ""),
    ("int Long.compareTo(Long)", ""),
    ("Date DateFactory.now()", ""),
    ("void SetSystemProperty.before()", ""),
    ("void PostFormAdapter_UpdatePostTests.postHasRenderedContent()", ""),
    ("void PrettifyVerbatimSerializer.printAttribute(Printer,String,String)", ""),
    ("void Entry.setTitle(String)", ""),
    ("String GuideContentResource.getName()", ""),
    ("String ProjectAdminController.newProject(Model)", ""),
    ("void PaginationInfo_PreviousAndNextControlsTests.givenOnThirdPageOfThree_previousIsVisible()", ""),
    ("Page BlogService.getPublishedPosts(PostCategory,Pageable)", ""),
    ("boolean ProjectRelease.isPreRelease()", ""),
    ("void GettingStartedGuides.evictListFromCache()", ""),
    ("Project ProjectPatchingService.patch(Project,Project)", ""),
    ("String Principal.getName()", ""),
    ("void ProjectMetadataControllerTests.getProject_doesNotContainVersionPlaceholders()", ""),
    ("String GitHubUserProfile.getProfileImageUrl()", ""),
    ("List ProjectMetadataService.getProjectsForCategory(String)", ""),
    ("void ProjectReleaseVersionTests.snapshotDetected()", ""),
    ("void MarkdownRendererTests.renderRawHtml()", ""),
    ("ResponseActions MockRestServiceServer.expect(RequestMatcher)", ""),
    ("void BindingResult.rejectValue(String,String,String)", ""),
    ("String Tutorial.getZipUrl()", ""),
    ("void PostFormAdapter_UpdatePostTests.postRetainsOriginalAuthor()", ""),
    ("GuideHeader AbstractGuide.getHeader()", ""),
    ("void InputStream.close()", ""),
    ("DefaultResponseCreator MockRestResponseCreators.withStatus(HttpStatus)", ""),
    ("void UrlRewriteFilter.init(FilterConfig)", ""),
    ("List ProjectMetadataService.getProjectsWithGroups()", ""),
    ("void DocsWebhookController.verifyHmacSignature(String,String)", ""),
    ("Object Iterator.next()", ""),
    ("void Link.setHref(String)", ""),
    ("ResultMatcher ModelResultMatchers.attribute(String,Matcher)", ""),
    ("GuideHeader Tutorial.getHeader()", ""),
    ("void Graphics.dispose()", ""),
    ("String MemberProfile.getJobTitle()", ""),
    ("void AsciidoctorRendererTests.renderAdmonition()", ""),
    ("RequestMatcher MockRestRequestMatchers.requestTo(String)", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersReleaseTrainsByName()", ""),
    ("void SecurityContext.setAuthentication(Authentication)", ""),
    ("void Project.setProjectSamples(List)", ""),
    ("ResponseEntity DocsWebhookController.handlePayloadParsingException(IOException)", ""),
    ("Long Long.valueOf(long)", ""),
    ("void BlogService.updatePost(Post,PostForm)", ""),
    ("void BlogAtomFeedViewTests.setUp()", ""),
    ("MockHttpServletRequestBuilder MockHttpServletRequestBuilder.contentType(MediaType)", ""),
    ("void SignInServiceTests.createOrUpdateMemberProfileOnLogin()", ""),
    ("void TeamServiceTests.updateMemberProfileDoesNotUpdateAvatarUrlIfGravatarEmailIsEmpty()", ""),
    ("String TeamLocation.getName()", ""),
    ("void Post.setRenderedSummary(String)", ""),
    ("String GuideHeader.getCiStatusImageUrl()", ""),
    ("void PostViewTests.setUp()", ""),
    ("Matcher Matchers.is(Object)", ""),
    ("int Page.getNumber()", ""),
    ("void Project.setGroups(Set)", ""),
    ("GeoLocation MemberProfile.getGeoLocation()", ""),
    ("void TeamService.updateMemberProfile(MemberProfile,MemberProfile)", ""),
    ("void RewriteTests.validatePermanentRedirect(String,String)", ""),
    ("Hop Hop.rel(String)", ""),
    ("void RendererApplication.main(java.lang.String[])", ""),
    ("Date Calendar.getTime()", ""),
    ("void BlogController_ShowTests.providesAllCategoriesInModel()", ""),
    ("boolean Post.isLiveOn(Date)", ""),
    ("void PostFormAdapter_CreatePostTests.postHasRenderedContent()", ""),
    ("Optional AbstractGuide.getImageContent(String)", ""),
    ("void ResponseActions.andRespond(ResponseCreator)", ""),
    ("void BlogAdminControllerTests.dashboardShowsUsersPosts()", ""),
    ("boolean Object.equals(Object)", ""),
    ("List PostRepository.findByDraftFalseAndPublishAtBeforeOrderByPublishAtDesc(Date)", ""),
    ("sagan.blog.PostCategory[] PostCategory.values()", ""),
    ("GuideHeader Topical.getHeader()", ""),
    ("Object Matchers.argThat(Matcher)", ""),
    ("Date PostForm.getPublishAt()", ""),
    ("String GuideHeader.getName()", ""),
    ("String HttpHeaders.getETag()", ""),
    ("Elements Element.select(String)", ""),
    ("void RewriteTests.gsgGuidesShouldAlwaysHaveTrailingSlash()", ""),
    ("List ProjectMetadataRepository.findAll(Sort)", ""),
    ("String PostView.getFormattedPublishDate()", ""),
    ("String SpringToolsAdminController.save(SpringToolsPlatform,List)", ""),
    ("void TeamService.updateMemberProfile(Long,MemberProfile)", ""),
    ("sagan.site.guides.GuideHeader[] GettingStartedGuides.findAll()", ""),
    ("String Topical.getRepositoryName()", ""),
    ("void File.deleteOnExit()", ""),
    ("int Event.compareTo(Event)", ""),
    ("JsonContent AbstractJsonMarshalTester.write(Object)", ""),
    ("void DocsWebhookControllerTests.testHmacValue()", ""),
    ("int ProjectRelease.compareTo(Object)", ""),
    ("void PostViewTests.draftPath()", ""),
    ("ResultActions MockMvc.perform(RequestBuilder)", ""),
    ("ProjectRelease Project.getProjectRelease(String)", ""),
    ("String File.getParent()", ""),
    ("void MarkdownRendererTests.renderLink()", ""),
    ("Optional Topical.getImageContent(String)", ""),
    ("Optional Tutorials.findByName(String)", ""),
    ("String ProjectsController.listProjects(Model)", ""),
    ("Locale Locale.getDefault()", ""),
    ("void BlogPostContentRendererTests.shouldRenderMarkdown()", ""),
    ("boolean String.endsWith(String)", ""),
    ("void MemberProfile.setName(String)", ""),
    ("String Event.getLocation()", ""),
    ("Object Alternatives.firstNotNull(java.lang.Object[])", ""),
    ("void AtomFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)", ""),
    ("List EventsCalendarService.findEvents(Period)", ""),
    ("GuideMetadata SaganRendererClient.fetchTutorialGuide(String)", ""),
    ("List ProjectMetadataService.getAllGroups()", ""),
    ("void MemberProfileTests.githubLink()", ""),
    ("Object RestTemplate.postForObject(String,Object,Class,java.lang.Object[])", ""),
    ("ResponseEntity RestOperations.getForEntity(String,Class,java.lang.Object[])", ""),
    ("Long GitHubUser.getId()", ""),
    ("void Entry.setContents(List)", ""),
    ("Object Mockito.verify(Object,VerificationMode)", ""),
    ("String DefaultGuideHeader.getTitle()", ""),
    ("ThymeleafViewResolverCustomizer CloudFoundryMvcConfig.thymeleafViewResolverCustomizer(ThymeleafViewResolver)", ""),
    ("TimeZone DateFactory.timeZone()", ""),
    ("void ProjectTests.isTopLevelProjectWhenItHasNoParentProject()", ""),
    ("Object ArgumentCaptor.getValue()", ""),
    ("boolean File.mkdir()", ""),
    ("Project ProjectMetadataService.getProject(String)", ""),
    ("PostBuilder PostBuilder.createdAt(String)", ""),
    ("Cloud CloudFactory.getCloud()", ""),
    ("String GuideResource.getGithubUrl()", ""),
    ("List Topical.getImages()", ""),
    ("void PaginationInfo_PaginationElementsTests.rendersEllipsesBetweenNonAdjacentPages()", ""),
    ("String AbstractGuide.getTitle()", ""),
    ("AbstractIterableAssert AbstractIterableAssert.containsExactlyInAnyOrder(java.lang.Object[])", ""),
    ("void Assert.assertTrue(boolean)", ""),
    ("void TeamControllerTests.setUp()", ""),
    ("String Topical.getCiStatusImageUrl()", ""),
    ("ResponseEntity GuidesController.showGuide(String,String)", ""),
    ("Object Cloud.getServiceConnector(String,Class,ServiceConnectorConfig)", ""),
    ("void MarkdownRendererTests.renderFencedCodeBlock()", ""),
    ("Page PostRepository.findAll(Pageable)", ""),
    ("String ZipEntry.getName()", ""),
    ("Matcher Matchers.containsString(String)", ""),
    ("void BlogController_BroadcastPostsTests.viewNameIsIndex()", ""),
    ("void ProjectTests.currentVersion()", ""),
    ("String String.replace(char,char)", ""),
    ("PostBuilder PostBuilder.publishAt(String)", ""),
    ("void ProjectTests.setup()", ""),
    ("void PostViewTests.formattedPublishDateForUnscheduledDraft()", ""),
    ("void TeamImporter.importTeamMembers(GitHub)", ""),
    ("String GitHubUserProfile.getUsername()", ""),
    ("AbstractIterableAssert AbstractIterableAssert.containsOnly(java.lang.Object[])", ""),
    ("void RewriteTests.supportRenamedMongodbGSGuide()", ""),
    ("void GuideContentResource.setName(String)", ""),
    ("AbstractByteArrayAssert Assertions.assertThat(byte[])", ""),
    ("String Matcher.group()", ""),
    ("String String.substring(int,int)", ""),
    ("void MockHttpServletRequest.setServletPath(String)", ""),
    ("void Tutorials.evictListFromCache()", ""),
    ("void DocsWebhookControllerTests.testGuideCacheEviction()", ""),
    ("String Tutorial.getDescription()", ""),
    ("void ProjectsControllerTests.showProjectWithoutReleases()", ""),
    ("Object RestTemplate.getForObject(String,Class,java.lang.Object[])", ""),
    ("Collection Resources.getContent()", ""),
    ("Resource ResourcePatternResolver.getResource(String)", ""),
    ("Set DefaultGuideHeader.getProjects()", ""),
    ("sagan.site.renderer.GuideType[] GuideType.values()", ""),
    ("JsonPathResultMatchers MockMvcResultMatchers.jsonPath(String,java.lang.Object[])", ""),
    ("void ProjectRelease.replaceVersionPattern()", ""),
    ("String MemberProfile.getVideoEmbeds()", ""),
    ("String GettingStartedGuide.getName()", ""),
    ("void PostViewTests.tearDown()", ""),
    ("void MarkdownToHtmlSerializer.visit(HeaderNode)", ""),
    ("void ProjectsControllerTests.setUp()", ""),
    ("void AbstractCacheManager.addCache(Cache)", ""),
    ("Post PostRepository.findByTitleAndCreatedAt(String,Date)", ""),
    ("ConfigurableApplicationContext SpringApplication.run(Class,java.lang.String[])", ""),
    ("Optional Optional.map(Function)", ""),
    ("void OAuth2ConnectionFactory.setScope(String)", ""),
    ("boolean List.removeAll(Collection)", ""),
    ("String AbstractGuide.getCiLatestUrl()", ""),
    ("List TeamService.fetchHiddenMembers()", ""),
    ("String GuideResource.getTitle()", ""),
    ("String ToStringBean.toString(Class,Object)", ""),
    ("boolean Page.isFirst()", ""),
    ("PostBuilder PostBuilder.id(Long)", ""),
    ("boolean PostView.isScheduled()", ""),
    ("String PostContentRenderer.render(String,PostFormat)", ""),
    ("Pattern Pattern.compile(String)", ""),
    ("String BlogController.listPublishedBroadcasts(Model,int)", ""),
    ("void GithubAuthenticationSigninAdapterTests.signInFailureAfterRestException()", ""),
    ("String String.replaceFirst(String,String)", ""),
    ("void FileOutputStream.close()", ""),
    ("RestTemplate SiteApplication.restTemplate()", ""),
    ("String StringUtils.arrayToDelimitedString(java.lang.Object[],String)", ""),
    ("AbstractListAssert AbstractIterableAssert.extracting(String)", ""),
    ("OngoingStubbing OngoingStubbing.thenReturn(Object)", ""),
    ("String Feed.getTitle()", ""),
    ("String BlogAdminController.deletePost(Long)", ""),
    ("void RewriteTests.tutorialPagesShouldAlwaysHaveTrailingSlash()", ""),
    ("boolean ConfigurableEnvironment.acceptsProfiles(java.lang.String[])", ""),
    ("Collector Collectors.toList()", ""),
    ("void DocsWebhookControllerTests.testInvalidHmacValue()", ""),
    ("InputStream ZipFile.getInputStream(ZipEntry)", ""),
    ("Font Font.createFont(int,InputStream)", ""),
    ("void PostFormAdapter_CreatePostTests.postWithNullPublishDateSetsPublishAtToNow()", ""),
    ("void MockitoAnnotations.initMocks(Object)", ""),
    ("LocalDate Event.getLastDay()", ""),
    ("void ProjectAdminControllerTests.listProjects_providesProjectMetadataServiceInModel()", ""),
    ("String BlogController.listPublishedPostsForYearAndMonth(int,int,int,Model)", ""),
    ("void AsciidoctorRendererTests.renderFencedCodeBlock()", ""),
    ("boolean FileSystemUtils.deleteRecursively(File)", ""),
    ("void SecurityContextHolder.clearContext()", ""),
    ("void Attributes.setAttribute(String,Object)", ""),
    ("String BlogAdminController.refreshBlogPosts(int,int)", ""),
    ("java.lang.Object[] Stream.toArray(IntFunction)", ""),
    ("String TeamAdminController.saveTeamMember(String,MemberProfile)", ""),
    ("String FileCopyUtils.copyToString(Reader)", ""),
    ("int Page.getSize()", ""),
    ("void AbstractObjectArrayAssert.isEmpty()", ""),
    ("String AsciidoctorGuideContentContributor.findTableOfContents(Document)", ""),
    ("XBUrlIO ProjectionIO.url(String)", ""),
    ("String EventsController.community(Model)", ""),
    ("String Tutorial.getRepositoryName()", ""),
    ("Object Matchers.any()", ""),
    ("boolean ArrayList.addAll(Collection)", ""),
    ("void ProjectReleaseVersionTests.gaDetected()", ""),
    ("Object Enumeration.nextElement()", ""),
    ("void FileOutputStream.write(byte[])", ""),
    ("boolean Enumeration.hasMoreElements()", ""),
    ("String Long.toString()", ""),
    ("int String.compareTo(String)", ""),
    ("String Post.getRenderedContent()", ""),
    ("void Tutorial.setImages(List)", ""),
    ("boolean PaginationInfo.isPreviousVisible()", ""),
    ("boolean Post.isScheduled()", ""),
    ("AbstractStringAssert Assertions.assertThat(String)", ""),
    ("void ProjectVersionDisplayNameTests.getDisplayNameForReleaseTrainServiceRelease()", ""),
    ("String PostFormat.toString()", ""),
    ("void PageElementsBuilder.findStartPage()", ""),
    ("Object ValuedProperty.getValue()", ""),
    ("Matcher CoreMatchers.is(Object)", ""),
    ("Project ProjectMetadataController.updateProject(String,Project)", ""),
    ("String Topical.getDescription()", ""),
    ("MemberProfile TeamRepository.findById(Long)", ""),
    ("float Float.floatValue()", ""),
    ("boolean Version.equals(Object)", ""),
    ("List HttpHeaders.get(Object)", ""),
    ("Page PostView.pageOf(Page,DateFactory)", ""),
    ("String String.trim()", ""),
    ("void EventsCalendarServiceTests.shouldParseHtmlEvent()", ""),
    ("void Topical.setImages(List)", ""),
    ("void BlogAtomFeedViewTests.hasCorrectIdForEntry()", ""),
    ("String GuideType.getSlug()", ""),
    ("void Post.setBroadcast(boolean)", ""),
    ("ProjectRepository ProjectRelease.getRepository()", ""),
    ("Date DateFormat.parse(String)", ""),
    ("Date DateTestUtils.getDate(String)", ""),
    ("byte[] String.getBytes(Charset)", ""),
    ("Version Version.build(String)", ""),
    ("boolean Project.updateProjectRelease(ProjectRelease)", ""),
    ("int Project.hashCode()", ""),
    ("boolean PostView.showReadMore()", ""),
    ("boolean Project.equals(Object)", ""),
    ("String PostView.getEditPath()", ""),
    ("void TeamService.updateMemberProfile(String,MemberProfile)", ""),
    ("String GuideHeader.getTitle()", ""),
    ("ResponseActions ResponseActions.andExpect(RequestMatcher)", ""),
    ("String MemberProfile.getGravatarEmail()", ""),
    ("int Page.getTotalPages()", ""),
    ("Object List.get(int)", ""),
    ("void AbstractGuide.setImages(List)", ""),
    ("String PostView.getRenderedContent()", ""),
    ("String GettingStartedGuide.getCiLatestUrl()", ""),
    ("ControllerLinkBuilder ControllerLinkBuilder.linkTo(Object)", ""),
    ("Object XBUrlIO.read(Class)", ""),
    ("long System.currentTimeMillis()", ""),
    ("GuideContent SaganRendererClient.fetchTutorialGuideContent(String)", ""),
    ("Iterator ArrayList.iterator()", ""),
    ("OptionsBuilder OptionsBuilder.safe(SafeMode)", ""),
    ("String DefaultGuideHeader.getSshUrl()", ""),
    ("String BlogAdminController.editPost(Long,String,Model)", ""),
    ("RedisCacheManager RedisCacheManager.withCache(String,long)", ""),
    ("String GuideHeader.getCiLatestUrl()", ""),
    ("String File.getName()", ""),
    ("PostBuilder PostBuilder.renderedContent(String)", ""),
    ("String PostSummary.forContent(String,int)", ""),
    ("Pageable PageableFactory.forLists(int)", ""),
    ("void Log.info(Object)", ""),
    ("boolean BindingResult.hasErrors()", ""),
    ("String Topical.getCiLatestUrl()", ""),
    ("void ProjectVersionDisplayNameTests.getDisplayNameForGeneralAvailability()", ""),
    ("void ProjectMetadataControllerTests.addProjectRelease_replacesVersionPatterns()", ""),
    ("int ProjectRepository.hashCode()", ""),
    ("void Assert.notNull(Object,String)", ""),
    ("int TeamRepository.hideTeamMembersNotInIds(List)", ""),
    ("String String.concat(String)", ""),
    ("int HttpStatus.value()", ""),
    ("String Post.getTitle()", ""),
    ("void AbstractUrlBasedView.setUrl(String)", ""),
    ("Optional Optional.empty()", ""),
    ("void MemberProfileTests.isNotHiddenByDefault()", ""),
    ("Stream Arrays.stream(java.lang.Object[])", ""),
    ("String DatatypeConverter.printHexBinary(byte[])", ""),
    ("PostCategory PostForm.getCategory()", ""),
    ("void Category.setTerm(String)", ""),
    ("String MemberProfile.getLocation()", ""),
    ("Page PostRepository.findByDraftFalseAndPublishAtAfter(Date,Pageable)", ""),
    ("AbstractBooleanAssert AbstractBooleanAssert.isFalse()", ""),
    ("String Post.getRawContent()", ""),
    ("ClassPathResource GuidesRepositoryTest.getClassPathResource(String)", ""),
    ("void BlogController_BroadcastPostsTests.providesAllCategoriesInModel()", ""),
    ("List ProjectMetadataService.getProjectsWithReleases()", ""),
    ("Map Collections.singletonMap(Object,Object)", ""),
    ("void Calendar.set(int,int,int)", ""),
    ("Object ProjectMetadataRepository.save(Object)", ""),
    ("GitHub TeamAdminController.getGitHub(Principal)", ""),
    ("void GuidesControllerTests.fetchGuideContent()", ""),
    ("void BlogController_PublishedPostsTests.providesAllCategoriesInModel()", ""),
    ("String Tutorial.getCiStatusImageUrl()", ""),
    ("int Objects.hash(java.lang.Object[])", ""),
    ("InputStream ClassLoader.getResourceAsStream(String)", ""),
    ("Object SpringToolsPlatformRepository.save(Object)", ""),
    ("void BadgeControllerTests.projecWithTwoReleasesFlagPicksCurrentRelease()", ""),
    ("void SignInServiceTests.isNotSpringMember()", ""),
    ("Matcher IsEqual.equalTo(Object)", ""),
    ("String TeamController.showProfile(String,Model)", ""),
    ("InputStream URL.openStream()", ""),
    ("void Post.addPublicSlugAlias(String)", ""),
    ("MemberProfile TeamService.fetchMemberProfile(Long)", ""),
    ("Stream Stream.filter(Predicate)", ""),
    ("Repository GithubClient.fetchOrgRepository(String,String)", ""),
    ("RequestMatcher MockRestRequestMatchers.method(HttpMethod)", ""),
    ("String TextNode.getText()", ""),
    ("void ProjectVersionDisplayNameTests.getDisplayNameForReleaseTrainVersion()", ""),
    ("String YearMonth.toString(String)", ""),
    ("void PostForm.setPublishAt(Date)", ""),
    ("void BadgeControllerTests.tearDown()", ""),
    ("String ToHtmlSerializer.printChildrenToString(SuperNode)", ""),
    ("String GitHubUserProfile.getName()", ""),
    ("void PostTests.isScheduledIfPublishDateIsInTheFuture()", ""),
    ("String DocsWebhookController.stripPrefix(String)", ""),
    ("List SpringToolsPlatform.getDownloads()", ""),
    ("int Version.hashCode()", ""),
    ("String Topical.getPushToPwsUrl()", ""),
    ("ResultMatcher StatusResultMatchers.isNotFound()", ""),
    ("String StreamUtils.copyToString(InputStream,Charset)", ""),
    ("Long PostView.getId()", ""),
    ("void ProjectVersionDisplayNameTests.getDisplayNameForMilestoneReleaseVersion()", ""),
    ("void GettingStartedGuides.evictFromCache(String)", ""),
    ("char[] String.toCharArray()", ""),
    ("void BlogController_ShowTests.providesActiveCategoryInModel()", ""),
    ("Page BlogService.getPublishedBroadcastPosts(Pageable)", ""),
    ("String PostView.getRenderedSummary()", ""),
    ("void DefaultGuideHeaderTests.testEmptyProjectList()", ""),
    ("sagan.site.guides.GuideHeader[] Topicals.findAll()", ""),
    ("String SpringToolsPlatform.toString()", ""),
    ("void DocsWebhookControllerTests.testTutorialCacheEviction2()", ""),
    ("String GuideResource.getRepositoryName()", ""),
    ("void ProjectReleaseVersionTests.prereleaseDetected()", ""),
    ("String GitHubUser.getAvatarUrl()", ""),
    ("List BlogService.getAllPublishedPosts()", ""),
    ("MockHttpServletRequestBuilder MockMvcRequestBuilders.get(String,java.lang.Object[])", ""),
    ("Pageable PageableFactory.first(int)", ""),
    ("Optional BadgeController.getRelease(Collection,Predicate)", ""),
    ("byte[] RedisCachePrefix.prefix(String)", ""),
    ("String AbstractGuide.getTableOfContents()", ""),
    ("void PostFormAdapter_UpdatePostTests.postHasCorrectUserEnteredValues()", ""),
    ("String MemberProfile.getTwitterUsername()", ""),
    ("void BlogControllerTests.titleForBlogYearMonthDayPage()", ""),
    ("ResponseEntity MarkupController.renderMarkup(MediaType,String)", ""),
    ("void BlogService_ValidPostTests.setup()", ""),
    ("Optional Topicals.findGuideHeaderByName(String)", ""),
    ("Link MemberProfile.getLanyrdLink()", ""),
    ("float TeamLocation.getLongitude()", ""),
    ("void Feed.setIcon(String)", ""),
    ("void MemberProfile.setVideoEmbeds(String)", ""),
    ("ObjectArrayAssert AbstractObjectArrayAssert.extracting(String)", ""),
    ("Optional Optional.of(Object)", ""),
    ("String Link.getHref()", ""),
    ("void MarkupControllerTests.noCompatibleRenderer()", ""),
    ("void AtomFeedView.setPostUrl(Post,Entry)", ""),
    ("Iterator Page.iterator()", ""),
    ("ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String,String)", ""),
    ("void RewriteTests.gplusIsRedirected()", ""),
    ("List ResourceAssemblerSupport.toResources(Iterable)", ""),
    ("boolean Post.isDraft()", ""),
    ("void PostCategoryFormatterTests.itConvertsEnumNameStringsToPostCategories()", ""),
    ("Matcher Matchers.is(Matcher)", ""),
    ("String TeamAdminController.editProfileForm(Principal,Model)", ""),
    ("String ProjectGroup.toString()", ""),
    ("void ProjectTests.currentVersionNotAvailable()", ""),
    ("String Node.outerHtml()", ""),
    ("String PostView.getTitle()", ""),
    ("Optional GettingStartedGuide.getImageContent(String)", ""),
    ("void RewriteTests.projectPagesAreRedirected()", ""),
    ("String MemberProfile.getSpeakerdeckUsername()", ""),
    ("URI URI.create(String)", ""),
    ("AtomFeedView AtomFeedController.listPublishedBroadcastPosts(Model,HttpServletResponse)", ""),
    ("PostBuilder PostBuilder.publishAt(Date)", ""),
    ("void List.forEach(Consumer)", ""),
    ("boolean MemberProfile.hasGithubUsername()", ""),
    ("void ProjectsControllerTests.showProjectHasReleases()", ""),
    ("byte[] Mac.doFinal(byte[])", ""),
    ("String PostForm.getTitle()", ""),
    ("int StreamUtils.copy(InputStream,OutputStream)", ""),
    ("Pageable PageableFactory.all()", ""),
    ("ResultActions ResultActions.andExpect(ResultMatcher)", ""),
    ("String System.getProperty(String)", ""),
    ("Printer Printer.print(String)", ""),
    ("void AsciidoctorRendererTests.canConvert()", ""),
    ("void RegistrationBean.setName(String)", ""),
    ("void PaginationInfo_PaginationElementsTests.alwaysRendersFirstAndLastPage()", ""),
    ("void AtomFeedController.prepareResponse(Model,HttpServletResponse,Page,String,String)", ""),
    ("void AtomFeedControllerTests.postsInModelForPublishedBroadcastPosts()", ""),
    ("void RewriteTests.deprecatedTutorialsRedirected()", ""),
    ("String DefaultGuideHeader.getCloneUrl()", ""),
    ("void PaginationInfo_PreviousAndNextControlsTests.givenOnePage_controlsAreNotVisible()", ""),
    ("UriComponentsBuilder UriComponentsBuilder.fromHttpUrl(String)", ""),
    ("String System.setProperty(String,String)", ""),
    ("String BlogAdminController.newPost(Model)", ""),
    ("List BadgeSvg.getGraphicElements()", ""),
    ("DefaultResponseCreator MockRestResponseCreators.withSuccess(Resource,MediaType)", ""),
    ("void ProjectVersionOrderTests.getProjectReleases_ordersVersionsByNumber_major()", ""),
    ("MemberProfile Post.getAuthor()", ""),
    ("String PostMovedException.getPublicSlug()", ""),
    ("void Topicals.evictFromCache(String)", ""),
    ("void TuckeyRewriteFilter.loadUrlRewriter(FilterConfig)", ""),
    ("String PostCategoryFormatter.print(PostCategory,Locale)", ""),
    ("StringBuilder StringBuilder.append(char)", ""),
    ("String Post.getAdminSlug()", ""),
    ("String BlogAdminController.resummarizeAllBlogPosts()", ""),
    ("String ProjectsController.stackOverflowUrl(Project)", ""),
    ("void HttpServletResponse.setCharacterEncoding(String)", ""),
    ("String GeoLocationFormatter.print(GeoLocation,Locale)", ""),
    ("void AbstractCharSequenceAssert.isEmpty()", ""),
    ("ConfigurableApplicationContext SpringApplication.run(java.lang.String[])", ""),
    ("void MemberProfileTests.nullSpeakerdeckLink()", ""),
    ("Object List.remove(int)", ""),
    ("void GithubAuthenticationSigninAdapterTests.signInSunnyDay()", ""),
    ("Object SpringToolsPlatformRepository.findOne(Serializable)", ""),
    ("boolean HashSet.add(Object)", ""),
    ("void RewriteTests.projectPageIndexWithSlashIsNotRedirected()", ""),
    ("Matcher Matchers.empty()", ""),
    ("void RedirectView.setStatusCode(HttpStatus)", ""),
    ("Object ArrayList.get(int)", ""),
    ("PostBuilder PostBuilder.createdAt(Date)", ""),
    ("void PaginationInfo_PaginationElementsTests.doesNotRenderEllipsesBetweenAdjacentPages()", ""),
    ("String String.replace(CharSequence,CharSequence)", ""),
    ("String Post.toString()", ""),
    ("void Throwable.addSuppressed(Throwable)", ""),
    ("String MemberProfile.getUsername()", ""),
    ("void ImagesGuideContentContributor.contribute(GuideContentResource,File)", ""),
    ("MemberProfile TeamRepository.findByUsername(String)", ""),
    ("void MemberProfile.setBio(String)", ""),
    ("Object RestOperations.postForObject(String,Object,Class,java.lang.Object[])", ""),
    ("ResultMatcher StatusResultMatchers.isUnsupportedMediaType()", ""),
    ("ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String)", ""),
    ("String Asciidoctor.convert(String,OptionsBuilder)", ""),
    ("String EventsController.events(Model)", ""),
    ("String SpringToolsAdminController.edit(String,Model)", ""),
    ("void BlogService.deletePost(Post)", ""),
    ("Object PostCategoryFormatter.parse(String,Locale)", ""),
    ("Link LinkBuilderSupport.withSelfRel()", ""),
    ("void ProjectReleaseVersionTests.releaseDashSeparatorDetected()", ""),
    ("boolean ProjectRelease.hasRefDocUrl()", ""),
    ("void PageElementsBuilder.addPageElements(ArrayList)", ""),
    ("String PostCategory.getDisplayName()", ""),
    ("String Topical.getZipUrl()", ""),
    ("void ToHtmlSerializer.visitChildren(SuperNode)", ""),
    ("String TeamAdminController.importTeamMembersFromGithub(Principal)", ""),
    ("void SecurityContextAuthenticationFilterTests.clean()", ""),
    ("void BlogAtomFeedViewTests.hasLinkToSelf()", ""),
    ("OptionsBuilder OptionsBuilder.attributes(Attributes)", ""),
    ("List GuideContentResource.getImages()", ""),
    ("void GuidesControllerTests.fetchAllGuidesFiltersUnknownTypes()", ""),
    ("String GitHubUser.getName()", ""),
    ("void AsciidoctorGuideContentContributor.contribute(GuideContentResource,File)", ""),
    ("RedisConnectionFactory ServiceConnectionFactory.redisConnectionFactory()", ""),
    ("int String.indexOf(String)", ""),
    ("sagan.site.guides.GuideHeader[] Tutorials.findAll()", ""),
    ("List Feed.getAlternateLinks()", ""),
    ("float GeoLocation.getLongitude()", ""),
    ("ProjectRelease ProjectRelease.createWithVersionPattern()", ""),
    ("String BlogController.renderListOfPosts(Page,Model,String)", ""),
    ("void ResourceSupport.add(Link)", ""),
    ("void GuideRendererTests.renderImages()", ""),
    ("GuideType GuideType.fromRepositoryName(String)", ""),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchGettingStartedGuides()", ""),
    ("void ProjectReleaseVersionTests.releaseTrainSnapshotDetected()", ""),
    ("void GuideResourceTests.noGuideProjects()", ""),
    ("void PostSummaryTests.extractNestedTagSummary()", ""),
    ("List ProjectMetadataRepository.findTopLevelProjectsWithGroup()", ""),
    ("String Project.getRawBootConfig()", ""),
    ("Page PostRepository.findByDraftTrue(Pageable)", ""),
    ("void BlogPostContentRendererTests.rendersCallouts()", ""),
    ("void HttpHeaders.add(String,String)", ""),
    ("String ProjectRepository.getUrl()", ""),
    ("String StringBuilder.toString()", ""),
    ("GuideMetadata SaganRendererClient.fetchGettingStartedGuide(String)", ""),
    ("String HttpHeaders.getCacheControl()", ""),
    ("void ProjectGroup.setName(String)", ""),
    ("Matcher Matchers.nullValue()", ""),
    ("String GettingStartedGuide.getTypeLabel()", ""),
    ("ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String,String)", ""),
    ("void MutablePropertySources.addLast(PropertySource)", ""),
    ("int String.length()", ""),
    ("void Entry.setId(String)", ""),
    ("String TutorialController.viewTutorial(String,Model)", ""),
    ("ResourceSupport IndexController.index()", ""),
    ("void ProjectsControllerTests.listProjectsProvidesProjectMetadata()", ""),
    ("Page BlogService.getPublishedPostsForMember(MemberProfile,Pageable)", ""),
    ("void ProjectTests.nonMostCurrentVersions()", ""),
    ("void MemberProfile.setTwitterUsername(String)", ""),
    ("Object TeamRepository.save(Object)", ""),
    ("Date PostForm.getCreatedAt()", ""),
    ("List ProjectMetadataRepository.findAllWithReleases(Sort)", ""),
    ("AbstractIterableAssert AbstractIterableAssert.isNotNull()", ""),
    ("void DocsWebhookControllerTests.testTutorialCacheEviction()", ""),
    ("void RewriteTests.rossensWebSocketPostIsRedirectedToOldBlog()", ""),
    ("void AsciidoctorRendererTests.renderLink()", ""),
    ("MediaType MediaType.parseMediaType(String)", ""),
    ("String Fixtures.githubRepoListJson()", ""),
    ("Object Optional.orElse(Object)", ""),
    ("Object Matchers.any(Class)", ""),
    ("void BlogAtomFeedViewTests.hasFeedTitleFromModel()", ""),
    ("Date Feed.getUpdated()", ""),
    ("void RewriteTests.deprecatedWarGuideRedirected()", ""),
    ("Cache RedisCacheManager.getCache(String)", ""),
    ("String AbstractGuide.getCiStatusImageUrl()", ""),
    ("void RewriteTests.gsgGuidesListingRedirectsToIndex()", ""),
    ("void Tutorial.setTypeLabel(String)", ""),
    ("void BlogController_PublishedPostsForCategoryTests.postsInModel()", ""),
    ("void BlogController_PublishedPostsTests.providesPaginationInfoInModel()", ""),
    ("void PostFormAdapter.updatePostFromPostForm(Post,PostForm)", ""),
    ("void DocsWebhookControllerTests.testTopicalCacheEviction()", ""),
    ("TeamLocation MemberProfile.getTeamLocation()", ""),
    ("boolean ProjectGroup.equals(Object)", ""),
    ("void GuideContentResource.setImages(List)", ""),
    ("void BadgeSvg.setWidth(int)", ""),
    ("Model Model.addAttribute(String,Object)", ""),
    ("void GithubAuthenticationSigninAdapterTests.signInFailure()", ""),
    ("void PrettifyVerbatimSerializer.serialize(VerbatimNode,Printer)", ""),
    ("Enum Enum.valueOf(Class,String)", ""),
    ("boolean AsciidoctorRenderer.canRender(MediaType)", ""),
    ("Font Font.deriveFont(int,float)", ""),
    ("String File.getAbsolutePath()", ""),
    ("ProjectRelease ProjectMetadataController.releaseMetadata(String,String)", ""),
    ("ResponseEntity BadgeController.releaseBadge(String)", ""),
    ("void HttpHeaders.setContentType(MediaType)", ""),
    ("String String.format(Locale,String,java.lang.Object[])", ""),
    ("boolean String.equalsIgnoreCase(String)", ""),
    ("void PostFormAdapter_UpdatePostTests.updatingABlogPost_doesNotChangeItsCreatedDateByDefault()", ""),
    ("String Link.getHrefResolved()", ""),
    ("void CloudFoundryMvcConfig.addResourceHandlers(ResourceHandlerRegistry)", ""),
    ("void PostFormAdapter_CreatePostTests.postHasCorrectUserEnteredValues()", ""),
    ("RestOperations GitHub.restOperations()", ""),
    ("void AtomFeedView.setUpdatedDate(Map,Feed)", ""),
    ("void EventsCalendarServiceTests.shouldReturnSingleEvent()", ""),
    ("Page PostRepository.findByDate(int,Pageable)", ""),
    ("void PaginationInfo_PaginationElementsTests.assertNotNavigableElementOnPage(String,PageElement)", ""),
    ("Elements Elements.select(String)", ""),
    ("sagan.site.guides.GuideHeader[] GettingStartedGuides.findByProject(Project)", ""),
    ("FontMetrics Graphics.getFontMetrics()", ""),
    ("Matcher CoreMatchers.is(Matcher)", ""),
    ("String GuideHeader.getZipUrl()", ""),
    ("String Tutorial.getGitUrl()", ""),
    ("String VerbatimNode.getType()", ""),
    ("String Post.generatePublicSlug()", ""),
    ("void PostCategoryFormatterTests.itPrintsAStringThatCanBeParsed()", ""),
    ("Matcher Matchers.equalTo(Object)", ""),
    ("Long MemberProfile.getGithubId()", ""),
    ("Float Float.valueOf(float)", ""),
    ("ListAssert Assertions.assertThat(List)", ""),
    ("void PostForm.setFormat(PostFormat)", ""),
    ("void MemberProfile.setGithubUsername(String)", ""),
    ("void TeamService.showOnlyTeamMembersWithIds(List)", ""),
    ("float GeoLocation.getLatitude()", ""),
    ("boolean SignInService.isSpringMember(String,GitHub)", ""),
    ("int Event.compareTo(Object)", ""),
    ("boolean PostForm.isDraft()", ""),
    ("Link MemberProfile.getTwitterLink()", ""),
    ("Date Post.getPublishAt()", ""),
    ("String Post.getPublicSlug()", ""),
    ("String Topical.getCloneUrl()", ""),
    ("boolean Link.equals(Object)", ""),
    ("void Entry.setAuthors(List)", ""),
    ("Set StringUtils.commaDelimitedListToSet(String)", ""),
    ("String System.clearProperty(String)", ""),
    ("Object ObjectMapper.readValue(String,Class)", ""),
    ("String SpringToolsDownload.toString()", ""),
    ("void PostTests.slugStripsNonAlphanumericCharacters()", ""),
    ("void AtomFeedControllerTests.feedMetadataInModelForAllPublishedPosts()", ""),
    ("void PostFormAdapter_CreatePostTests.postCreatedDateCanBeSetFromAPostForm()", ""),
    ("void GeoLocationFormatterTests.testPrint()", ""),
    ("void PostFormAdapter_UpdatePostTests.updatingABlogPost_usesTheCreatedDateFromThePostFormIfPresent()", ""),
    ("String Tutorial.getGithubUrl()", ""),
    ("boolean PaginationInfo.isNextVisible()", ""),
    ("ResultMatcher JsonPathResultMatchers.isEmpty()", ""),
    ("void Assert.assertThat(Object,Matcher)", ""),
    ("String Post.getSlug()", ""),
    ("StringBuilder StringBuilder.append(String)", ""),
    ("RedisCache RedisCacheManager.createCache(String,RedisTemplate,long)", ""),
    ("GuideResource GuideResourceAssembler.toResource(Repository)", ""),
    ("void MemberProfileTests.emptyGithubLink()", ""),
    ("Object List.set(int,Object)", ""),
    ("InputStream ClassPathResource.getInputStream()", ""),
    ("String HttpServletRequest.getRequestURI()", ""),
    ("IntStream Stream.mapToInt(ToIntFunction)", ""),
    ("MemberProfileBuilder MemberProfileBuilder.profile()", ""),
    ("void GeoLocationFormatterTests.assertLatLon(String,float,float)", ""),
    ("void PostViewTests.scheduledPost()", ""),
    ("Hop Hop.withParameter(String,Object)", ""),
    ("void Category.setLabel(String)", ""),
    ("String DefaultGuideHeader.getGithubUrl()", ""),
    ("boolean EqualsBean.beanEquals(Class,Object,Object)", ""),
    ("Matcher Matchers.contains(java.lang.Object[])", ""),
    ("String Entry.getId()", ""),
    ("int FontMetrics.stringWidth(String)", ""),
    ("int EqualsBean.beanHashCode(Object)", ""),
    ("boolean StringUtils.hasText(String)", ""),
    ("void BlogAdminControllerTests.creatingABlogPostRecordsTheUser()", ""),
    ("void MemberProfileTests.nullGithubLink()", ""),
    ("OptionsBuilder OptionsBuilder.options()", ""),
    ("Page PostRepository.findByDate(int,int,Pageable)", ""),
    ("boolean LocalDate.equals(Object)", ""),
    ("boolean PageElement.isNavigable()", ""),
    ("String DefaultGuideHeader.getGitUrl()", ""),
    ("void MockFilterConfig.addInitParameter(String,String)", ""),
    ("String GuideType.getPrefix()", ""),
    ("void Graphics.setFont(Font)", ""),
    ("Project ProjectMetadataService.save(Project)", ""),
    ("void Entry.setUpdated(Date)", ""),
    ("void BlogController_PublishedPostsTests.setUp()", ""),
    ("Connection ConnectionRepository.findPrimaryConnection(Class)", ""),
    ("int Enum.ordinal()", ""),
    ("String TeamAdminController.editTeamMemberForm(String,Model)", ""),
    ("String String.join(CharSequence,Iterable)", ""),
    ("void ProjectTests.orderedProjectSamples()", ""),
    ("long Long.longValue()", ""),
    ("void DocsWebhookControllerTests.testGuideWebhookPing()", ""),
    ("void BadgeControllerTests.projecWithTwoReleasesShouldBeGenerated()", ""),
    ("void DateFormat.setTimeZone(TimeZone)", ""),
    ("Object Mockito.mock(Class)", ""),
    ("PostBuilder PostBuilder.post()", ""),
    ("Object Optional.get()", ""),
    ("boolean Project.isTopLevelProject()", ""),
    ("Post PostFormAdapter.createPostFromPostForm(PostForm,String)", ""),
    ("void PostFormAdapter_CreatePostTests.postHasRenderedSummary()", ""),
    ("Object Stream.collect(Collector)", ""),
    ("HttpServletRequest ServletRequestAttributes.getRequest()", ""),
    ("void EventsCalendarServiceTests.shouldReturnManyEvents()", ""),
    ("void BlogAdminControllerTests.attemptingToCreateADuplicatePostReturnsToEditForm()", ""),
    ("void Post.setTitle(String)", ""),
    ("MutablePropertySources ConfigurableEnvironment.getPropertySources()", ""),
    ("void MemberProfileTests.nullLanyrdLink()", ""),
    ("void GeoLocationFormatterTests.testParse()", ""),
    ("void SecurityContextAuthenticationFilterTests.testSuccessfulAuthentication()", ""),
    ("String Matchers.contains(String)", ""),
    ("ResponseEntity TopicalController.loadImage(String,String)", ""),
    ("ModelResultMatchers MockMvcResultMatchers.model()", ""),
    ("String GeoLocationFormatter.print(Object,Locale)", ""),
    ("HttpClientBuilder HttpClientBuilder.create()", ""),
    ("Set Tutorial.getProjects()", ""),
    ("ResourceChainRegistration ResourceHandlerRegistration.resourceChain(boolean)", ""),
    ("Optional GithubClient.findNextPageLink(ResponseEntity)", ""),
    ("void Logger.info(String)", ""),
    ("Optional Stream.findFirst()", ""),
    ("ServiceConnectionFactory AbstractCloudConfig.connectionFactory()", ""),
    ("void ProjectVersionDisplayNameTests.getDisplayNameForReleaseTrainSnapshot()", ""),
    ("void Content.setValue(String)", ""),
    ("String ProjectRelease.getRefDocUrl()", ""),
    ("java.lang.String[] StringUtils.tokenizeToStringArray(String,String)", ""),
    ("void PaginationInfo_PreviousAndNextControlsTests.givenOnSecondPageOfThree_nextAndPreviousAreVisible()", ""),
    ("void RewriteTests.gsgTutorialsListingRedirectsToIndex()", ""),
    ("void PostForm.setBroadcast(boolean)", ""),
    ("void HttpHeaders.setAccept(List)", ""),
    ("void PaginationInfo_PaginationElementsTests.givenTwoPages_rendersCurrentElementAndPageTwo()", ""),
    ("String GettingStartedGuide.getDescription()", ""),
    ("Object Link.clone()", ""),
    ("void Topicals.evictListFromCache()", ""),
    ("void ProjectsControllerTests.showProjectHasStackOverflowLink()", ""),
    ("void PostFormAdapter_UpdatePostTests.draftWithNullPublishDate()", ""),
    ("Printer Printer.printEncoded(String)", ""),
    ("String Tutorial.getTitle()", ""),
    ("String StaticPagePathFinder.relativeFilePath(String,Resource)", ""),
    ("void AbstractIterableAssert.isEmpty()", ""),
    ("boolean File.isFile()", ""),
    ("int Math.min(int,int)", ""),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchTutorialGuides()", ""),
    ("String AbstractGuide.getZipUrl()", ""),
    ("boolean Enum.equals(Object)", ""),
    ("Set Topical.getProjects()", ""),
    ("Set Project.getStackOverflowTagList()", ""),
    ("Page PostRepository.findByDate(int,int,int,Pageable)", ""),
    ("String GettingStartedGuide.getGithubUrl()", ""),
    ("String Post.getRenderedSummary()", ""),
    ("boolean ProjectRelease.isGeneralAvailability()", ""),
    ("boolean Project.hasSite()", ""),
    ("String DefaultGuideHeader.getDescription()", ""),
    ("void AtomFeedControllerTests.postsInModelForPublishedCategoryPosts()", ""),
    ("List BadgeSvg.getPaths()", ""),
    ("ResourceHandlerRegistration ResourceHandlerRegistry.addResourceHandler(java.lang.String[])", ""),
    ("void BlogController_PublishedPostsForCategoryTests.setUp()", ""),
    ("GuideContent SaganRendererClient.fetchGettingStartedGuideContent(String)", ""),
    ("void ProjectVersionDisplayNameTests.assertVersionDisplayName(String,String)", ""),
    ("CacheManager CloudFoundryCacheConfig.redisCacheManager(RedisConnectionFactory,ObjectMapper,SiteProperties)", ""),
    ("boolean String.isEmpty()", ""),
    ("String GithubClientTests.getAuthorizationHeader()", ""),
    ("void DefaultGuideHeaderTests.setUp()", ""),
    ("List GettingStartedGuide.getImages()", ""),
    ("String GuideResource.getDescription()", ""),
    ("MockHttpServletRequestBuilder MockMvcRequestBuilders.post(String,java.lang.Object[])", ""),
    ("String URI.getPath()", ""),
    ("void DocsWebhookControllerTests.testGuideCacheEviction2()", ""),
    ("Resources GuidesController.listGuides()", ""),
    ("void VersionBadgeService.postConstruct()", ""),
    ("String UriComponentsBuilder.toUriString()", ""),
    ("void Content.setType(String)", ""),
    ("void PaginationInfo_PaginationElementsTests.givenThreePagesOnPageTwo_rendersCurrentElementAndPageTwo()", ""),
    ("boolean Resource.exists()", ""),
    ("Collection RedisCacheManager.loadCaches()", ""),
    ("void AtomFeedControllerTests.postsInModelForAllPublishedPosts()", ""),
    ("void Project.setProjectReleases(List)", ""),
    ("ResponseEntity RestTemplate.getForEntity(String,Class,java.lang.Object[])", ""),
    ("boolean Iterator.hasNext()", ""),
    ("Object Map.get(Object)", ""),
    ("Stream Set.stream()", ""),
    ("LocalDate LocalDate.now()", ""),
    ("void Attributes.setAnchors(boolean)", ""),
    ("URI Event.getLink()", ""),
    ("VersionResourceResolver VersionResourceResolver.addContentVersionStrategy(java.lang.String[])", ""),
    ("String ProjectRelease.getVersionDisplayName()", ""),
    ("void MarkdownRendererTests.renderTitleAnchors()", ""),
    ("Matcher Matcher.appendReplacement(StringBuffer,String)", ""),
    ("List ArrayList.subList(int,int)", ""),
    ("Project ProjectMetadataController.projectMetadata(String)", ""),
    ("void Post.setAuthor(MemberProfile)", ""),
    ("ResponseEntity GuidesController.renderGuide(String,String)", ""),
    ("List ProjectGroupRepository.findAll()", ""),
    ("void BadgeControllerTests.projecWithTwoReleasesUsingSymbolicNamesWithoutCurrentFlagPicksFirstRelease()", ""),
    ("ClassPathResource EventsCalendarServiceTests.getClassPathResource(String)", ""),
    ("void ProjectReleaseVersionTests.releaseTrainPrereleaseDetected()", ""),
    ("Cache AbstractCacheManager.getCache(String)", ""),
    ("byte[] GuideRendererTests.readAsBytes(String)", ""),
    ("void MemberProfile.setGithubId(Long)", ""),
    ("String Tutorial.getName()", ""),
    ("java.lang.Object[] Collection.toArray(java.lang.Object[])", ""),
    ("void Asciidoctor.convert(Reader,Writer,OptionsBuilder)", ""),
    ("void GuidesJsonTests.serializeJson()", ""),
    ("void Assert.assertEquals(Object,Object)", ""),
    ("boolean Date.after(Date)", ""),
    ("Object Mockito.spy(Object)", ""),
    ("String MimeType.toString()", ""),
    ("Optional Optional.flatMap(Function)", ""),
    ("GuideType GuideType.fromName(String)", ""),
    ("Optional Project.getMostCurrentRelease()", ""),
    ("String ProjectAdminController.edit(String,Model)", ""),
    ("void PageElementsBuilder.addLastPage(ArrayList)", ""),
    ("void BlogAtomFeedViewTests.hasCorrectIdForFeed()", ""),
    ("String MemberProfile.getBio()", ""),
    ("void PostCategoryFormatterTests.itConvertsUrlSlugStringsToPostCategories()", ""),
    ("void BlogController_PublishedPostsTests.viewNameIsIndex()", ""),
    ("List PageElementsBuilder.build()", ""),
    ("char String.charAt(int)", ""),
    ("RequestAttributes RequestContextHolder.currentRequestAttributes()", ""),
    ("String GuideIndexController.viewIndex(Model)", ""),
    ("void ProjectReleaseVersionTests.snapshotDetectedMavenStyle()", ""),
    ("URL Resource.getURL()", ""),
    ("void AtomFeedView.setRenderedContent(Post,Entry)", ""),
    ("void PostRepository.delete(Object)", ""),
    ("void MockHttpServletRequest.setRequestURI(String)", ""),
    ("String GuideHeader.getGithubUrl()", ""),
    ("int Long.hashCode()", ""),
    ("int ProjectRelease.hashCode()", ""),
    ("String AbstractGuide.getRepositoryName()", ""),
    ("long Matchers.eq(long)", ""),
    ("void AtomFeedView.setFeedUrl(String,Feed)", ""),
    ("void GettingStartedGuide.setImages(List)", ""),
    ("void PostTests.isNotLiveIfDraft()", ""),
    ("List Feed.getOtherLinks()", ""),
    ("Object Yaml.load(String)", ""),
    ("byte[] VersionBadgeService.createSvgBadge(BadgeSvg,List,String,String)", ""),
    ("void Post.setRawContent(String)", ""),
    ("String Topical.getGithubUrl()", ""),
    ("void SaganApplication.configureProfiles(ConfigurableEnvironment,java.lang.String[])", ""),
    ("Post BlogService.getPublishedPost(String)", ""),
    ("String Project.getRawOverview()", ""),
    ("boolean Long.equals(Object)", ""),
    ("String GuideContentResource.getPushToPwsMetadata()", ""),
    ("void BlogService_UpdatePostTests.setup()", ""),
    ("void RewriteTests.videosRedirectToYoutube()", ""),
    ("MemberProfile TeamService.fetchMemberProfileUsername(String)", ""),
    ("void GuideContentResource.setPushToPwsMetadata(String)", ""),
    ("JsonContentAssert JsonContentAssert.isEqualToJson(String,Class)", ""),
    ("String Topical.getName()", ""),
    ("void ProjectsControllerTests.showProjectModelHasProjectData()", ""),
    ("void PageElementsBuilder.addFirstPage(ArrayList)", ""),
    ("RedisCacheManager RedisCacheManager.withCache(String,RedisTemplate,long)", ""),
    ("Date PostFormAdapter.publishDate(PostForm)", ""),
    ("boolean Authentication.isAuthenticated()", ""),
    ("void PostFormAdapter_CreatePostTests.postHasPublicSlug()", ""),
    ("void BadgeControllerTests.projecWithTwoReleasesWithoutCurrentFlagPicksHighestRelease()", ""),
    ("void DocsWebhookControllerTests.setup()", ""),
    ("boolean ProjectRelease.isNumber(String)", ""),
    ("void PostForm.setCategory(PostCategory)", ""),
    ("String Throwable.getMessage()", ""),
    ("void PostFormAdapter_CreatePostTests.setup()", ""),
    ("String GettingStartedGuide.getTableOfContents()", ""),
    ("boolean Event.isSingleDayEvent()", ""),
    ("void Project.setFeatured(boolean)", ""),
    ("Optional Tutorials.findGuideHeaderByName(String)", ""),
    ("String SiteUrl.getAbsoluteUrl(String)", ""),
    ("String BlogController.listPublishedPostsForCategory(PostCategory,Model,int)", ""),
    ("void PageElementsBuilder.findEndPage()", ""),
    ("String Project.getName()", ""),
    ("String GettingStartedGuide.getCloneUrl()", ""),
    ("void MvcConfig.addInterceptors(InterceptorRegistry)", ""),
    ("String GuideHeader.getCloneUrl()", ""),
    ("void Attributes.setAllowUriRead(boolean)", ""),
    ("boolean PostView.isDraft()", ""),
    ("Page BlogService.getPublishedPostsByDate(int,Pageable)", ""),
    ("void ProjectGroup.setLabel(String)", ""),
    ("String URI.toString()", ""),
    ("GuideType GuideType.fromSlug(String)", ""),
    ("void MemberProfileTests.twitterLink()", ""),
    ("void BlogService.resummarizeAllPosts()", ""),
    ("String SaganRendererClient.renderMarkup(String,MediaType)", ""),
    ("boolean Optional.isPresent()", ""),
    ("String PostView.getUpdatePath()", ""),
    ("AbstractAssert AbstractAssert.isEqualTo(Object)", ""),
    ("String Fixtures.githubRepoJson()", ""),
    ("GitHub GitHubConfig.gitHubTemplate()", ""),
    ("boolean MemberProfile.isHidden()", ""),
    ("String AbstractGuide.getSshUrl()", ""),
    ("Object GeoLocationFormatter.parse(String,Locale)", ""),
    ("Page BlogService.getScheduledPosts(Pageable)", ""),
    ("void MemberProfile.setLocation(String)", ""),
    ("void BlogControllerTests.setUp()", ""),
    ("String PostCategoryFormatter.print(Object,Locale)", ""),
    ("String PostFormat.getId()", ""),
    ("String Period.toString()", ""),
    ("Object ArgumentCaptor.capture()", ""),
    ("void PostViewTests.formattedPublishDateForPublishedPosts()", ""),
    ("boolean Map.containsKey(Object)", ""),
    ("void Iterator.remove()", ""),
    ("void GithubClientTests.downloadRepositoryInfo()", ""),
    ("long Math.max(long,long)", ""),
    ("ObjectAssert Assertions.assertThat(Object)", ""),
    ("MemberProfile TeamService.createOrUpdateMemberProfile(Long,String,String,String)", ""),
    ("Description VEvent.getDescription()", ""),
    ("void EventsCalendarServiceTests.shouldFailForInvalidCalendar()", ""),
    ("boolean MediaType.isCompatibleWith(MediaType)", ""),
    ("GuideContent SaganRendererClient.fetchTopicalGuideContent(String)", ""),
    ("void Feed.setTitle(String)", ""),
    ("void ProjectMetadataService.delete(String)", ""),
    ("Object ArgumentMatchers.any()", ""),
    ("void GuideImage.setName(String)", ""),
    ("void RewriteTests.validateTemporaryRedirect(String,String)", ""),
    ("Set Collections.emptySet()", ""),
    ("Optional GettingStartedGuides.findGuideHeaderByName(String)", ""),
    ("void MemberProfileTests.fullNameUsesNameIfAvailable()", ""),
    ("void RewriteTests.validateOk(String)", ""),
    ("void PostForm.setTitle(String)", ""),
    ("String AbstractGuide.getGitUrl()", ""),
    ("Predicate Period.toCalendarFilter()", ""),
    ("String SpringToolsAdminController.list(Model)", ""),
    ("void SpringApplication.configureProfiles(ConfigurableEnvironment,java.lang.String[])", ""),
    ("byte[] GithubClient.downloadRepositoryAsZipball(String,String)", ""),
    ("byte[] VersionBadgeService.createSvgBadge(Project,ProjectRelease)", ""),
    ("void RewriteTests.tutorialRootShouldHaveTrailingSlash()", ""),
    ("void GeoLocationFormatterTests.testNoParse()", ""),
    ("void BlogAtomFeedViewTests.feedUpdatedDateIsMostRecentPublishedPostDate()", ""),
    ("void GuidesControllerTests.fetchUnknownGuide()", ""),
    ("boolean String.matches(String)", ""),
    ("StatusResultMatchers MockMvcResultMatchers.status()", ""),
    ("Element Document.body()", ""),
    ("ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String)", ""),
    ("List Project.getProjectSamples()", ""),
    ("PostCategory Post.getCategory()", ""),
    ("String BlogService.getDisqusShortname()", ""),
    ("Link LinkBuilderSupport.withRel(String)", ""),
    ("void PostTests.slugReplacesMultipleSpacesWithASingleDash()", ""),
    ("AbstractCharSequenceAssert AbstractCharSequenceAssert.contains(java.lang.CharSequence[])", ""),
    ("Elements Element.children()", ""),
    ("StringBuffer Matcher.appendTail(StringBuffer)", ""),
    ("ResponseEntity ResponseEntity.ok(Object)", ""),
    ("void BlogPostContentRendererTests.shouldRenderAsciidoc()", ""),
    ("Optional GettingStartedGuides.findByName(String)", ""),
    ("void SecurityContextAuthenticationFilterTests.testUnsuccessfulAuthentication()", ""),
    ("ResultMatcher StatusResultMatchers.isOk()", ""),
    ("String GettingStartedGuide.getRepositoryName()", ""),
    ("void BadgeControllerTests.projecWithTwoReleasesUsingSymbolicNamesFlagPicksCurrentRelease()", ""),
    ("String Topical.getTitle()", ""),
    ("String BlogAdminController.showPost(Long,String,Model)", ""),
    ("Period Period.of(String,int)", ""),
    ("ClassPathResource GithubClientTests.getClassPathResource(String)", ""),
    ("void SimpleCacheManager.setCaches(Collection)", ""),
    ("void GithubClientTests.fetchRepositoriesMultiplePages()", ""),
    ("ExtendedModelMap ExtendedModelMap.addAttribute(String,Object)", ""),
    ("Document Jsoup.parse(String)", ""),
    ("void BlogController_PublishedPostsForCategoryTests.providesPaginationInfoInModel()", ""),
    ("LocalDate LocalDate.parse(CharSequence)", ""),
    ("void ProjectMetadataControllerTests.editProjectReleases_replacesVersionPatterns()", ""),
    ("String Project.toString()", ""),
    ("void ProjectRelease.setApiDocUrl(String)", ""),
    ("DefaultResponseCreator DefaultResponseCreator.headers(HttpHeaders)", ""),
    ("void BlogAtomFeedViewTests.buildPostsWithDate(int,List)", ""),
    ("Pageable PageableFactory.forFeeds()", ""),
    ("String TopicalController.viewTutorial(String,Model)", ""),
    ("void List.sort(Comparator)", ""),
    ("String GuideResource.getGitUrl()", ""),
    ("void TeamServiceTests.updateMemberProfileUpdatesAvatarUrlFromGravatarEmail()", ""),
    ("sagan.renderer.guides.GuideType[] GuideType.values()", ""),
    ("String SpringToolsController.listDownloads(Model)", ""),
    ("int String.lastIndexOf(String)", ""),
    ("void PostFormAdapter_CreatePostTests.postHasAuthor()", ""),
    ("ResultMatcher ContentResultMatchers.string(String)", ""),
    ("void Post.setRenderedContent(String)", ""),
    ("sagan.support.nav.Section[] Section.values()", ""),
    ("boolean StringUtils.isEmpty(String)", ""),
    ("void MemberProfile.setGravatarEmail(String)", ""),
    ("String Elements.toString()", ""),
    ("String PostContentRenderer.renderCallouts(String)", ""),
    ("void GuideRendererTests.setup()", ""),
    ("void HstsHeaderWriter.setRequestMatcher(RequestMatcher)", ""),
    ("Post BlogService.addPost(PostForm,String)", ""),
    ("String PostForm.getContent()", ""),
    ("AbstractListAssert AbstractObjectAssert.extracting(java.lang.String[])", ""),
    ("String Tutorial.getCiLatestUrl()", ""),
    ("boolean File.exists()", ""),
    ("void GuideRendererTests.renderAsciidoctorContent()", ""),
    ("String Tutorial.getCloneUrl()", ""),
    ("CloseableHttpClient HttpClientBuilder.build()", ""),
    ("void ProjectRelease.setGroupId(String)", ""),
    ("Page PostRepository.findByBroadcastAndDraftFalseAndPublishAtBefore(boolean,Date,Pageable)", ""),
    ("void RewriteTests.projectPageIndexIsNotRedirected()", ""),
    ("void ProjectVersionDisplayNameTests.getDisplayNameForSnapshotRelease()", ""),
    ("PostCategory PostCategory.valueOf(String)", ""),
    ("AbstractComparableAssert Assertions.assertThat(Comparable)", ""),
    ("Object Assertions.assertThat(AssertProvider)", ""),
    ("void AbstractFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)", ""),
    ("Properties PropertiesLoaderUtils.loadProperties(Resource)", ""),
    ("Object ProjectMetadataRepository.findOne(Serializable)", ""),
    ("Page PostRepository.findByCategoryAndDraftFalseAndPublishAtBefore(PostCategory,Date,Pageable)", ""),
    ("void ProjectVersionDisplayNameTests.getDisplayNameForReleaseCandidateVersion()", ""),
    ("PostBuilder PostBuilder.renderedSummary(String)", ""),
    ("String String.toLowerCase()", ""),
    ("GeoLocation GeoLocationFormatter.parse(String,Locale)", ""),
    ("AtomFeedView AtomFeedController.listPublishedPosts(Model,HttpServletResponse)", ""),
    ("void GuideResourceTests.deprecatedGuide()", ""),
    ("void MockHttpServletRequest.addHeader(String,Object)", ""),
    ("int Matchers.anyInt()", ""),
    ("ServletContext FilterConfig.getServletContext()", ""),
    ("void GuidesRepositoryTest.findAllShouldReturnOnlyGettingStartedGuides()", ""),
    ("String DefaultTeamImporter.getNameForUser(String,GitHub)", ""),
    ("void PostFormAdapter_UpdatePostTests.postWithNullPublishDateSetsPublishAtToNow()", ""),
    ("MemberProfileBuilder MemberProfileBuilder.name(String)", ""),
    ("ObjectArrayAssert Assertions.assertThat(java.lang.Object[])", ""),
    ("Comparator Collections.reverseOrder(Comparator)", ""),
    ("GitHubConnectionFactory GitHubConfig.gitHubConnectionFactory()", ""),
    ("AbstractIterableAssert AbstractIterableAssert.anySatisfy(Consumer)", ""),
    ("ObjectArrayAssert ObjectArrayAssert.contains(java.lang.Object[])", ""),
    ("String String.format(String,java.lang.Object[])", ""),
    ("Object CachedRestClient.post(RestOperations,String,Class,String)", ""),
    ("String BlogController.listPublishedPostsForDate(int,int,int,int,Model)", ""),
    ("String Enum.name()", ""),
    ("String GuideHeader.getRepositoryName()", ""),
    ("long Matchers.anyLong()", ""),
    ("sagan.site.guides.GuideHeader[] Tutorials.findByProject(Project)", ""),
    ("String ProjectRelease.toString()", ""),
    ("void BadgeControllerTests.setUp()", ""),
    ("String Project.getId()", ""),
    ("void MemberProfileTests.lanyrdLink()", ""),
    ("Stream Stream.map(Function)", ""),
    ("void PostTests.slugStripsNonAlphanumericCharactersUsedAsDividersWithSpaces()", ""),
    ("boolean PaginationInfo.equals(Object)", ""),
    ("byte[] FileCopyUtils.copyToByteArray(File)", ""),
    ("String ProjectRelease.getGroupId()", ""),
    ("MockHttpServletRequestBuilder MockHttpServletRequestBuilder.content(String)", ""),
    ("void Project.setStackOverflowTags(String)", ""),
    ("AbstractBooleanAssert Assertions.assertThat(boolean)", ""),
    ("void PostSummaryTests.extractBasicSummary()", ""),
    ("void BlogController_BroadcastPostsTests.setUp()", ""),
    ("void Project.setRawBootConfig(String)", ""),
    ("String Event.getSummary()", ""),
    ("void Tutorials.evictFromCache(String)", ""),
    ("void MvcConfig.addViewControllers(ViewControllerRegistry)", ""),
    ("String Topical.getTableOfContents()", ""),
    ("int MockHttpServletResponse.getStatus()", ""),
    ("List Project.getNonMostCurrentReleases()", ""),
    ("String GettingStartedGuide.getSshUrl()", ""),
    ("ResourceHandlerRegistration ResourceHandlerRegistration.addResourceLocations(java.lang.String[])", "")
])
