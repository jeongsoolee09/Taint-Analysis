# 채점에 필요한 정답지

correct_solution_WhatIWantExample = dict([
    ('void PrintStream.println(int)', 'sin'),
    ('void WhatIWantExample.g(int)', 'san'),
    ('void WhatIWantExample.m3(int)', 'sin'),
    ('void WhatIWantExample.h(int)', 'non'),
    ('void WhatIWantExample.main()', 'non'),
    ('int WhatIWantExample.m2(int)', 'san'),
    ('void WhatIWantExample.f()', 'src'),
    ('int WhatIWantExample.m1()', 'src')
])

correct_solution_relational = dict([
    ("void JdbcTemplate.execute(String)", "sin"),
    ("void RelationalDataAccessApplication.run(java.lang.String[])", "sin"),
    ("ConfigurableApplicationContext SpringApplication.run(Class,java.lang.String[])", "non"),
    ("int[] JdbcTemplate.batchUpdate(String,List)", "sin"),
    ("void RelationalDataAccessApplication.createTable()", "sin"),
    ("String Customer.toString()", "non"),
    ("Object Stream.collect(Collector)", "non"),
    ("void List.forEach(Consumer)", "non"),
    ("void Logger.info(String)", "sin"),
    ("Collector Collectors.toList()", "non"),
    ("String String.format(String,java.lang.Object[])", "non"),
    ("void RelationalDataAccessApplication.query()", "src"),
    ("List Arrays.asList(java.lang.Object[])", "non"),
    ("Long Long.valueOf(long)", "non"),
    ("void RelationalDataAccessApplication.main(java.lang.String[])", "non"),
    ("List Creator.create()", "src"),
    ("Stream List.stream()", "non"),
    ("Stream Stream.map(Function)", "non"),
    ("List JdbcTemplate.query(String,java.lang.Object[],RowMapper)", "src")
])


correct_solution_sagan = dict([
    ("Set GuideHeader.getProjects()", "non"),
    ("List AbstractGuide.getImages()", "non"),
    ("String Fixtures.load(String)", "src"),
    ("String BlogController.showPost(String,String,String,String,Model)", "non"),
    ("String URL.toString()", "non"),
    ("List Project.getProjectReleases()", "non"),
    ("AbstractIterableAssert AbstractIterableAssert.hasSize(int)", "san"),
    ("RootNode PegDownProcessor.parseMarkdown(char[])", "non"),
    ("ProjectRelease ProjectReleaseBuilder.build()", "non"),
    ("void Link.setRel(String)", "non"),
    ("List TeamRepository.findByHiddenOrderByNameAsc(boolean)", "src"),
    ("void Entry.setAlternateLinks(List)", "non"), # not sure
    ("boolean ProjectRelease.equals(Object)", "non"),
    ("boolean MarkdownRenderer.canRender(MediaType)", "non"),
    ("List Tutorial.getImages()", "non"),
    ("String DefaultGuideHeader.getCiStatusImageUrl()", "non"),
    ("int ProjectGroup.hashCode()", "san"),
    ("void MemberProfile.setSpeakerdeckUsername(String)", "non"),
    ("void Feed.setOtherLinks(List)", "non"),
    ("int ProjectRelease.compareTo(ProjectRelease)", "non"),
    ("String PostContentRenderer.decode(String)", "non"),
    ("void Post.setCreatedAt(Date)", "non"),
    ("void Log.error(Object)", "sin"),
    ("String PostCategory.getUrlSlug()", "non"),
    ("String CloudFoundryMvcConfig.getGitCommitId()", "non"), # not sure
    ("ResponseEntity DocsWebhookController.handleWebhookAuthenticationFailure(WebhookAuthenticationException)", "sin"),
    ("String GuideContentResource.getTableOfContents()", "non"),
    ("OptionalInt IntStream.max()", "non"),
    ("String Tutorial.getPushToPwsUrl()", "non"),
    ("void Feed.setAlternateLinks(List)", "non"),
    ("void AtomFeedView.setAuthor(Post,Entry)", "non"),
    ("Matcher CoreMatchers.nullValue()", "non"),
    ("void SpringToolsPlatformRepository.delete(Serializable)", "sin"),
    ("void Entry.setCategories(List)", "non"),  # not sure
    ("Page BlogService.refreshPosts(int,int)", "sin"),
    ("void FilterRegistrationBean.setFilter(Filter)", "non"),
    ("ProjectRelease ProjectMetadataController.updateReleaseMetadata(String,ProjectRelease)", "src"),
    ("Printer Printer.print(char)", "sin"),
    ("String DefaultGuideHeader.getZipUrl()", "src"),
    ("Long MemberProfile.getId()", "non"),
    ("String ProjectsController.showProject(Model,String)", "non"),
    ("String ProjectRelease.getVersion()", "non"),
    ("ResultMatcher JsonPathResultMatchers.doesNotExist()", "non"),
    ("int MemberProfile.hashCode()", "san"),
    ("PostFormat Post.getFormat()", "non"),
    ("void MatcherAssertionErrors.assertThat(Object,Matcher)", "san"),
    ("Object Connection.getApi()", "src"),  # not sure
    ("void Assert.isTrue(boolean,String)", "san"),
    ("Long Long.valueOf(String)", "non"),
    ("String MarkdownRenderer.renderToHtml(String)", "sin"),
    ("void PostForm.setDraft(boolean)", "non"),
    ("DataSource CloudFoundryDatabaseConfig.dataSource()", "src"),  # not sure
    ("void Feed.setUpdated(Date)", "non"),          # not sure
    ("void Post.setCategory(PostCategory)", "non"),  # not sure
    ("void Post.setFormat(PostFormat)", "non"),
    ("long Math.min(long,long)", "non"),
    ("void RegistrationBean.addInitParameter(String,String)", "non"),  # not sure
    ("String SaganRendererClient.renderAsciidoc(String)", "sin"),
    ("void MemberProfile.setUsername(String)", "non"),
    ("void Locale.setDefault(Locale)", "non"),
    ("String Topical.getContent()", "non"),  # not sure
    ("String PageElement.getLabel()", "non"),
    ("String SpringToolsAdminController.newPlatform(Model)", "src"),
    ("Stream Collection.stream()", "non"),
    ("void Attributes.setSkipFrontMatter(boolean)", "non"),  # not sure
    ("Set GettingStartedGuide.getProjects()", "non"),
    ("void Log.error(Object,Throwable)", "non"),
    ("String DateFormat.format(Date)", "non"),
    ("int OptionalInt.orElse(int)", "non"),
    ("MemberProfileBuilder MemberProfileBuilder.geoLocation(float,float)", "src"),
    ("Object PostRepository.findOne(Serializable)", "src"),
    ("List GithubClient.fetchOrgRepositories(String)", "src"),
    ("String SaganRendererClient.renderMarkdown(String)", "sin"),
    ("void Post.setDraft(boolean)", "non"),
    ("String Tutorial.getTypeLabel()", "non"),  # not sure
    ("List ProjectMetadataService.getActiveTopLevelProjects()", "sin"),
    ("void ConfigurableEnvironment.addActiveProfile(String)", "non"),
    ("String TeamController.showTeam(Model)", "src"),
    ("List ProjectMetadataRepository.findByCategory(String,Sort)", "src"),
    ("int Object.hashCode()", "san"),
    ("String PostCategory.getId()", "non"),
    ("boolean List.add(Object)", "non"),
    ("String Project.getRepoUrl()", "non"),
    ("String GuideContentResource.getContent()", "non"),
    ("HttpStatus ResponseEntity.getStatusCode()", "non"),
    ("Set Collections.singleton(Object)", "non"),
    ("void ProjectAdminController.normalizeProjectReleases(Project,String)", "non"),
    ("Authentication SecurityContext.getAuthentication()", "src"),  # not sure
    ("OngoingStubbing OngoingStubbing.thenAnswer(Answer)", "non"),  # not sure
    ("Object RestOperations.getForObject(String,Class,java.lang.Object[])", "src"),
    ("String PostView.getPath()", "src"),
    ("String AbstractGuide.createPushToPwsUrl(String)", "sin"),
    ("String AbstractGuide.getDescription()", "non"),
    ("ArgumentCaptor ArgumentCaptor.forClass(Class)", "non"),
    ("boolean File.isDirectory()", "sin"),
    ("Page PostRepository.findByDraftFalseAndAuthorAndPublishAtBeforeOrderByPublishAtDesc(MemberProfile,Date,Pageable)", "src"),
    ("void PwsGuideContentContributor.contribute(GuideContentResource,File)", "nonnon"),
    ("void GettingStartedGuide.setTypeLabel(String)", "nonsan"),
    ("String StringBuffer.toString()", "nonsan"),
    ("String Matcher.group(int)", "nonnon"),
    ("void Map.forEach(BiConsumer)", "non"),
   non ("PostFormat PostForm.getFormat()", "non"),
    ("Object PostRepository.save(Object)", "sinsrc"),
    ("Matcher Matchers.hasItems(java.lang.Objecnont[])", "non"),
    ("ResponseEntity GettingStartedGuideControlsrcler.loadImage(String,String)", "src"),
    ("Object Matchers.eq(Object)", "non"),
    ("DefaultResponseCreator MsrcockRestResponseCreators.withSuccess(String,MediaType)", "non"),
    ("String Project.getRenderedOverview()non", "non"),
 non   ("boolean List.contains(Object)", "non"),
 non   ("Charset Charset.forName(String)", "non"),
    ("Long Post.getId()", "non"),
    ("String Psrcroject.getParentId()", "non"),
    ("String Tnonnot sureeamAdminController.saveProfile(Principal,MemberProfile)", "src"),
    ("Object LinkedHashMap.get(Object)", "nonnon"),
    ("boolean StringUtils.isEmpty(Object)", "non"),
    ("void SecurityConfig.configureHeaders(HeadersConfigurer)", "non"),
    ("String MemberProfile.getFullName()", "nonsan"),
    ("String Topical.getGitUrl()", "src"),  # not sure
    ("PostBuilder PostnonBuilder.draft()", "non"),
    ("HttpHeaders HttpEntity.getHeaders()", "non"),
    ("org.springframework.core.io.Resource[] ResourcePatternResolver.getResources(String)", "non"),
    ("Date Post.getCreatedAt()", "non"),
    ("VersionResourceResolver VersionResourceResolver.addFixedVersionStrategy(String,java.lang.String[])", "src"),
    ("void Feed.setId(String)", "non"), # not sure
    ("ProjectRelease ProjectMetadataController.removeReleaseMetadata(String,String)", "sin"),
    ("String Matchers.anyString()", "non"),
    ("void ProjectMetadataRepository.delete(Serializable)", "sin"),
    ("HeadersConfigurer HeadersConfigurer.addHeaderWriter(HeaderWriter)", "non"),
    ("void Project.setRenderedBootConfig(String)", "non"),
    ("InterceptorRegistration InterceptorRegistry.addInterceptor(HandlerInterceptor)", "non"),
    ("ChainingTextStringParser Biweekly.parse(String)", "non"),
    ("String AsciidoctorRenderer.renderToHtml(String)", "sin"),
    ("String Tutorial.getSshUrl()", "src"),  # not sure
    ("String MemberProfile.getName()", "non"),
    ("String DefaultGuideHeader.getCiLatestUrl()", "src"),
    ("MemberProfileBuilder MemberProfileBuilder.username(String)", "non"),
    ("Page BlogService.getPublishedPosts(Pageable)", "src"),
    ("String GuideHeader.getSshUrl()", "src"),  # not sure
    ("String DefaultGuideHeader.getName()", "non"),
    ("VerificationMode Mockito.never()", "san"),
    ("Pageable PageableFactory.forDashboard(int)", "non"),
    ("List ICalendar.getEvents()", "src"),  # not sure
    ("Object Mockito.verify(Object)", "san"),
    ("String URI.getHost()", "non"),
    ("void TeamService.updateAvatarUrlwithGravatar(MemberProfile)", "sin"),
    ("void PostFormAdapter.summarize(Post)", "non"),
    ("AbstractObjectArrayAssert AbstractObjectArrayAssert.containsExactlyInAnyOrder(java.lang.Object[])", "san"),
    ("GuideType GuideResource.getType()", "non"),
    ("String SpringToolsAdminController.edit(SpringToolsPlatform,Model)", "src"),
    ("String AbstractGuide.getGithubUrl()", "non"),
    ("byte[] StreamUtils.copyToByteArray(InputStream)", "non"),
    ("PostFormat PostFormat.valueOf(String)", "non"),
    ("List AuthorityUtils.commaSeparatedStringToAuthorityList(String)", "non"),
    ("java.io.File[] File.listFiles()", "src"),
    ("String MessageDigestPasswordEncoder.encodePassword(String,Object)", "san"),
    ("String BlogAdminController.createPost(Principal,PostForm,BindingResult,Model)", "src"),
    ("Post BlogService.getPost(String,Date)", "src"),
    ("PostBuilder PostBuilder.author(String,String)", "non"),
    ("Date PostView.getCreatedAt()", "non"),
    ("Collection AbstractCacheManager.getCacheNames()", "non"),
    ("GuideType GuideType.valueOf(String)", "non"),  # not sure
    ("StringBuilder StringBuilder.append(Object)", "non"),
    ("String String.replaceAll(String,String)", "non"),
    ("ResourceChainRegistration ResourceChainRegistration.addResolver(ResourceResolver)", "non"),
    ("sagan.blog.PostFormat[] PostFormat.values()", "non"),
    ("List List.subList(int,int)", "non"),
    ("List ProjectMetadataController.releaseMetadata(String)", "non"),
    ("List AtomFeedView.buildFeedEntries(Map,HttpServletRequest,HttpServletResponse)", "non"),
    ("void GuideContentResource.setTableOfContents(String)", "non"),
    ("Object HttpEntity.getBody()", "non"),  # not sure
    ("boolean PostView.isBroadcast()", "non"),
    ("boolean String.contains(CharSequence)", "non"),
    ("String GuideType.stripPrefix(String)", "non"),
    ("List PaginationInfo.getPageElements()", "non"),  # not sure
    ("File File.createTempFile(String,String)", "sin"),
    ("boolean MemberProfile.hasTwitterUsername()", "non"),
    ("ResultMatcher JsonPathResultMatchers.value(Matcher)", "non"),
    ("String DefaultGuideHeader.getRepositoryName()", "non"),
    ("String GettingStartedGuide.getContent()", "non"),  # not sure
    ("GuideMetadata SaganRendererClient.fetchTopicalGuide(String)", "non"),
    ("Printer Printer.println()", "sin"),
    ("ContentResultMatchers MockMvcResultMatchers.content()", "non"),
    ("String HttpServletRequest.getServerName()", "src"),  # not sure
    ("Object CachedRestClient.get(RestOperations,String,Class)", "src"),
    ("String BlogController.listPublishedPostsForYear(int,int,Model)", "non"),
    ("boolean String.equals(Object)", "non"),
    ("String AbstractGuide.getTypeLabel()", "non"),
    ("Sort Page.getSort()", "non"),
    ("int LocalDate.compareTo(ChronoLocalDate)", "non"),
    ("Page PostRepository.findByDraftFalseAndPublishAtBeforeOrderByPublishAtDesc(Date,Pageable)", "src"),  # not sure
    ("void Person.setName(String)", "non"),
    ("boolean ProjectRelease.isSnapshot()", "non"),
    ("byte[] String.getBytes()", "non"),
    ("Page BlogService.getPublishedPostsByDate(int,int,int,Pageable)", "src"),
    ("void AtomFeedView.setBlogUrl(String,Feed)", "sin"),  # not sure
    ("OngoingStubbing Mockito.when(Object)", "non"),
    ("String Tutorial.getContent()", "non"),
    ("Matcher Matchers.notNullValue()", "non"),  # not sure
    ("List Collections.singletonList(Object)", "non"),
    ("Integer Integer.valueOf(int)", "non"),
    ("Page BlogService.getAllPosts(Pageable)", "src"),
    ("void ProjectRelease.setRepository(ProjectRepository)", "non"),
    ("String AbstractGuide.getPushToPwsUrl()", "non"),
    ("MemberProfile SignInService.getOrCreateMemberProfile(Long,GitHub)", "non"),  # not sure
    ("Graphics BufferedImage.getGraphics()", "non"),
    ("String BlogController.listPublishedPosts(Model,int)", "src"),
    ("PostView PostView.of(Post,DateFactory)", "non"),
    ("int List.size()", "non"),
    ("boolean Post.isBroadcast()", "non"),
    ("String PostCategory.toString()",
     "non"),
    ("Long TeamLocation.getMemberId()", "non"),
    ("void Logger.error(String,Throwable)", "san"),
    ("Cloud CloudFoundryDatabaseConfig.cloud()", "non"),  # not sure
    ("void MemberProfile.setLanyrdUsername(String)", "non"),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchAllGuides()", "src"),  # not sure
    ("org.springframework.social.github.api.GitHubUser[] DefaultTeamImporter.getGitHubUsers(GitHub)", "src"),
    ("ProjectRelease Project.removeProjectRelease(String)", "sin"),
    ("String ProjectRepository.toString()", "non"),
    ("String Link.toString()", "non"),
    ("String GuideResource.getCloneUrl()", "non"),
    ("AbstractAssert AbstractAssert.isInstanceOf(Class)", "san"),
    ("String Properties.getProperty(String)", "non"),
    ("void MemberProfile.setHidden(boolean)", "non"),
    ("void ProjectRelease.setRefDocUrl(String)", "non"),
    ("String SiteUrl.getUrl()", "src"),  # not sure
    ("void GuideImage.setEncodedContent(String)", "non"),
    ("void GuideContentContributor.contribute(GuideContentResource,File)", "non"),
    ("void Assert.assertNotNull(Object)", "san"),
    ("void MatcherAssert.assertThat(String,Object,Matcher)", "san"),
    ("String GuideResource.getName()", "non"),
    ("void MemberProfile.setJobTitle(String)", "non"),
    ("Post PostRepository.findByPublicSlugAndDraftFalseAndPublishAtBefore(String,Date)", "src"),
    ("String Connection.getDisplayName()", "non"),
    ("byte[] Fixtures.loadData(String)", "src"),
    ("List TeamService.fetchActiveMembers()", "src"),
    ("void AtomFeedView.setCategories(Post,Entry)", "non"),
    ("Section Section.valueOf(String)", "non"),
    ("boolean Set.add(Object)", "non"),
    ("String TeamAdminController.getTeamAdminPage(Model)", "src"),
    ("String Topical.getTypeLabel()", "non"),  # not sure
    ("void Project.setRenderedOverview(String)", "non"),
    ("void GuideContentResource.setContent(String)", "non"),
    ("java.lang.String[] Version.getParts()", "non"),
    ("IterableAssert Assertions.assertThat(Iterable)", "san"),
    ("Post BlogService.getPost(Long)", "src"),
    ("Boolean Boolean.valueOf(boolean)", "non"),
    ("Date PostFormAdapter.createdDate(PostForm,Date)", "non"),
    ("void ZipFile.close()", "sin"),
    ("AbstractCharSequenceAssert Assertions.assertThat(String)", "san"),
    ("String SpringToolsAdminController.delete(String)", "sin"),
    ("java.lang.String[] GuideResource.getProjects()", "non"),
    ("Object ControllerLinkBuilder.methodOn(Class,java.lang.Object[])", "non"),
    ("Optional Topicals.findByName(String)", "src"),  # not sure
    ("boolean MemberProfile.equals(Object)", "non"),
    ("GuideContentResource GuideRenderer.render(GuideType,String)", "sin"),
    ("void ArrayList.forEach(Consumer)", "non"),
    ("void ViewControllerRegistration.setViewName(String)", "non"),
    ("boolean PageElement.isCurrentPage()", "non"),
    ("MemberProfile PostView.getAuthor()", "non"),
    ("void SetSystemProperty.after()", "sin"),
    ("String LocalDate.toString()", "non"),
    ("ResponseEntity TutorialController.loadImage(String,String)", "src"),
    ("Stream Stream.sorted()", "non"),
    ("List ProjectMetadataRepository.findDistinctByCategoryAndParentProjectIsNull(String,Sort)", "src"),
    ("boolean PaginationInfo.isVisible()", "non"),
    ("int HeaderNode.getLevel()", "non"),
    ("Stream List.stream()", "non"),
    ("ConnectionRepository InMemoryUsersConnectionRepository.createConnectionRepository(String)", "src"),  # not sure
    ("boolean MemberProfile.hasLanyrdUsername()", "non"),
    ("void Topical.setTypeLabel(String)", "non"),  # not sure
    ("RequestMatcher MockRestRequestMatchers.header(String,java.lang.String[])", "san"),
    ("String GuideHeader.getGitUrl()", "non"),
    ("boolean ProjectRepository.equals(Object)", "non"),
    ("sagan.site.guides.GuideHeader[] Topicals.findByProject(Project)", "non"),
    ("PostCategory PostView.getCategory()", "non"),
    ("String Tutorial.getTableOfContents()", "non"),
    ("List Arrays.asList(java.lang.Object[])", "non"),
    ("String PostFormat.getDisplayName()", "non"),
    ("String Element.text()", "non"),
    ("void PostFormAdapter.setPostProperties(PostForm,String,Post)", "non"),
    ("String MockHttpServletResponse.getRedirectedUrl()", "src"),  # not sure
    ("ResourceSupport GuideResourceAssembler.toResource(Object)", "non"),
    ("String StaticPagePathFinder.buildRequestMapping(String)", "src"),
    ("Float Float.valueOf(String)", "non"),
    ("Object Map.put(Object,Object)", "non"),
    ("MemberProfile TeamRepository.findByGithubId(Long)", "src"),
    ("float TeamLocation.getLatitude()", "non"),
    ("Page BlogService.getDraftPosts(Pageable)", "src"),
    ("String GettingStartedGuide.getCiStatusImageUrl()", "src"),  # not sure
    ("GuideHeader GettingStartedGuide.getHeader()", "non"),       # not sure
    ("RedisConnectionFactory CloudFoundryCacheConfig.redisConnectionFactory()", "non"),  # not sure
    ("void SiteApplication.main(java.lang.String[])", "non"),
    ("boolean ArrayList.add(Object)", "non"),
    ("String GettingStartedGuideController.viewGuide(String,Model)", "src"),  # not sure
    ("String ProjectRelease.getVersionDisplayName(boolean)", "non"),
    ("MemberProfile MemberProfileBuilder.build()", "non"),
    ("boolean List.isEmpty()", "non"),
    ("AbstractObjectArrayAssert Assertions.assertThat(java.lang.Object[])", "san"),
    ("Matcher CoreMatchers.equalTo(Object)", "non"),
    ("int Link.hashCode()", "src"),
    ("Date PostView.getPublishAt()", "non"),
    ("String StringUtils.arrayToCommaDelimitedString(java.lang.Object[])", "non"),
    ("SecurityContext SecurityContextHolder.getContext()", "non"),
    ("void PostForm.setCreatedAt(Date)", "non"),
    ("String Topical.getSshUrl()", "non"),  # not sure
    ("Project ProjectMetadataController.updateProjectMetadata(String,List)", "src"),
    ("boolean ZipEntry.isDirectory()", "src"),
    ("String MemberProfile.getLanyrdUsername()", "non"),
    ("List StaticPagePathFinder.findPaths()", "src"),
    ("void MemberProfile.setGeoLocation(GeoLocation)", "non"),
    ("Post PostBuilder.build()", "non"),
    ("PostCategory PostCategoryFormatter.parse(String,Locale)", "non"),
    ("String AbstractGuide.getContent()", "non"),
    ("String ProjectAdminController.save(Project,List,List,String,String)", "src"),  # call chain too deep
    ("void FilterChain.doFilter(ServletRequest,ServletResponse)", "non"),
    ("List Page.getContent()", "non"),
    ("void Project.setChildProjectList(List)", "non"),
    ("Post PostRepository.findByPublicSlugAliasesInAndDraftFalseAndPublishAtBefore(Set,Date)", "src"),
    ("void AtomFeedView.setId(Post,Entry,HttpServletRequest)", "non"),
    ("void PostForm.setContent(String)", "non"),
    ("void Project.setRawOverview(String)", "non"),
    ("PostBuilder PostBuilder.title(String)", "non"),
    ("String MemberProfile.getAvatarUrl()", "non"),
    ("RedirectView BlogController.handle(PostMovedException)", "src"),
    ("ResponseEntity DocsWebhookController.processTopicalsUpdate(String,String,String,String)", "src"),  # not sure: obscure
    ("Enumeration ZipFile.entries()", "src"),
    ("String LocalDate.toString(String)", "non"),
    ("String ToHtmlSerializer.toHtml(RootNode)", "sin"),  # not sure: no code
    ("String LearnController.learn(Model)", "src"),       # not sure: obscure
    ("ProjectReleaseBuilder ProjectReleaseBuilder.versionName(String)", "non"),
    ("String GettingStartedGuide.getPushToPwsUrl()", "src"),  # not sure: no code
    ("Page BlogService.getPublishedPostsByDate(int,int,Pageable)", "src"),  # not sure: no code
    ("FilterRegistrationBean UrlRewriterFilterConfig.rewriteFilterConfig()", "non"),
    ("void Post.setPublishAt(Date)", "non"),
    ("AtomFeedView AtomFeedController.listPublishedPostsForCategory(PostCategory,Model,HttpServletResponse)", "src"),  # not sure: obscure
    ("String ProjectAdminController.delete(String,Model)", "src"),
    ("ICalendar ChainingTextStringParser.first()", "non"),
    ("String GitHubUser.getLogin()", "src"),  # not sure: no code
    ("OptionsBuilder OptionsBuilder.baseDir(File)", "non"),  # not sure: no code
    ("OptionsBuilder OptionsBuilder.headerFooter(boolean)", "non"),  # not sure: no code
    ("long Page.getTotalElements()", "non"), # not sure: no code
    ("String URL.getPath()", "non"),
    ("String FilterConfig.getInitParameter(String)", "non"),  # not sure: no code
    ("String Project.getRenderedBootConfig()", "non"),
    ("String Link.getRel()", "non"),
    ("String GuideHeader.getDescription()", "non"),  # not sure: no code
    ("String SpringToolsPlatform.getId()", "non"),
    ("void AbstractGuide.setTypeLabel(String)", "non"),
    ("String ProjectAdminController.edit(Project,Model)", "src"),  # not sure: obscure
    ("StringBuilder StringBuilder.append(int)", "non"),
    ("PostBuilder PostBuilder.publishYesterday()", "non"),
    ("Matcher Is.is(Object)", "non"),  # not sure: no code
    ("void UrlRewriteFilter.checkConf(Conf)", "san"),  # not sure: no code
    ("String BlogAdminController.dashboard(Model,int)", "src"),  # not sure: obscure
    ("Set AbstractGuide.getProjects()", "non"),
    ("void Project.setParentProject(Project)", "non"),
    ("String Elements.html()", "non"),  # not sure: no code
    ("boolean PostForm.isBroadcast()", "non"),
    ("Matcher CoreMatchers.containsString(String)", "non"),
    ("void DefaultTeamImporter.importTeamMembers(GitHub)", "sin"),
    ("Pageable PageableFactory.build(int,int)", "non"),
    ("String GettingStartedGuide.getGitUrl()", "non"),
    ("boolean Matcher.find()", "non"),
    ("void AtomFeedView.buildFeedMetadata(Map,Feed,HttpServletRequest)", "non"),  # not sure: no (super) code
    ("void PageElementsBuilder.addEllipsis(ArrayList)", "non"),
    ("URI Event.parseLink(VEvent)", "non"),
    ("List ProjectMetadataService.getProjects()", "src"),
    ("ProjectionIO XBProjector.io()", "non"), # not sure: no code
    ("CacheManager StandaloneCacheConfig.simpleCacheManager()", "non"),  # not sure: no code
    ("String GuideResource.getSshUrl()", "non"),
    ("void ExpectedException.expect(Class)", "san"),  # not sure: no code
    ("Iterator List.iterator()", "non"),
    ("IterableAssert IterableAssert.containsExactly(java.lang.Object[])", "san"),
    ("List Collections.emptyList()", "non"),
    ("Link MemberProfile.getGithubLink()", "non"),
    ("String StringWriter.toString()", "non"),
    ("Object Matchers.anyObject()", "non"),
    ("Comparator Comparator.comparingInt(ToIntFunction)", "non"),
    ("boolean ProjectRelease.hasApiDocUrl()", "non"),
    ("PostBuilder PostBuilder.unscheduled()", "non"),
    ("ResultMatcher ModelResultMatchers.attribute(String,Object)", "san"),
    ("Object CloneableBean.beanClone(Object,Set)", "non"),  # not sure
    ("URL ClassLoader.getResource(String)", "non"),
    ("int ArrayList.size()", "non"),
    ("int String.hashCode()", "san"),
    ("String AbstractUrlBasedView.getUrl()", "non"),
    ("MemberProfileBuilder MemberProfileBuilder.id(Long)", "non"),
    ("ResultMatcher JsonPathResultMatchers.value(Object)", "san"),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchTopicalGuides()", "src"),  # not sure: no code
    ("void ProjectAdminController.denormalizeProjectReleases(Project)", "non"),
    ("void PostFormAdapter.refreshPost(Post)", "non"),
    ("void VersionBadgeService.preDestroy()", "non"),
    ("String MemberProfile.getGithubUsername()", "non"),
    ("String GettingStartedGuide.getZipUrl()", "src"),  # not sure: no code
    ("GitHubUserProfile UserOperations.getUserProfile()", "src"),
    ("String Feed.getId()", "src"),  # not sure: no code
    ("Object ArrayList.remove(int)", "non"),
    ("String ProjectRelease.getApiDocUrl()", "non"),
    ("String AbstractGuide.getCloneUrl()", "non"),
    ("List SpringToolsPlatformRepository.findAll()", "src"),  # not sure: no code
    ("String BadgeSvg.toString()", "non"),
    ("String ProjectAdminController.list(Model)", "src"),
    ("String GettingStartedGuide.getTitle()", "non"),
    ("List PostRepository.findAll()", "src"),
    ("Class Object.getClass()", "non"),
    ("Matcher Pattern.matcher(CharSequence)", "non"),
    ("ViewControllerRegistration ViewControllerRegistry.addViewController(String)", "src"),
    ("Collector Collectors.groupingBy(Function)", "non"),
    ("boolean MemberProfile.hasSpeakerdeckUsername()", "non"),
    ("StringBuffer HttpServletRequest.getRequestURL()", "src"),
    ("String String.substring(int)", "non"),
    ("Link MemberProfile.getSpeakerdeckLink()", "non"),
    ("void MemberProfile.setAvatarUrl(String)", "non"),
    ("Object HashMap.put(Object,Object)", "non"),
    ("void DocsWebhookController.logPayload(Map)", "sin"),
    ("Object Object.clone()", "non"),
    ("AbstractThrowableAssert AbstractThrowableAssert.hasMessage(String)", "san"),
    ("String Link.getText()", "non"),
    ("UserOperations GitHub.userOperations()", "non"),  # not sure: no code
    ("void MatcherAssert.assertThat(Object,Matcher)", "san"),
    ("void Logger.info(String,Object)", "sin"),
    ("ClassLoader Class.getClassLoader()", "non"),
    ("Optional Tutorial.getImageContent(String)", "src"),  # not sure: no code
    ("AbstractBooleanAssert AbstractBooleanAssert.isTrue()", "san"),
    ("String AbstractGuide.getName()", "non"),
    ("LocalDate Event.getFirstDay()", "non"),
    ("String BlogAdminController.updatePost(Long,PostForm,BindingResult,Model)", "src"),
    ("VerificationMode Mockito.times(int)", "san"),
    ("int Long.compareTo(Long)", "non"),
    ("Date DateFactory.now()", "non"),
    ("void SetSystemProperty.before()", "sin"),
    ("void PrettifyVerbatimSerializer.printAttribute(Printer,String,String)", "sin"),
    ("void Entry.setTitle(String)", "non"),
    ("String GuideContentResource.getName()", "non"),
    ("String ProjectAdminController.newProject(Model)", "sin"),
    ("Page BlogService.getPublishedPosts(PostCategory,Pageable)", "src"),
    ("boolean ProjectRelease.isPreRelease()", "non"),
    ("void GettingStartedGuides.evictListFromCache()", "non"),
    ("Project ProjectPatchingService.patch(Project,Project)", "non"),  # not sure: obscure
    ("String Principal.getName()", "non"),                             # not sure: no code
    ("String GitHubUserProfile.getProfileImageUrl()", "src"),          # not sure: no code
    ("List ProjectMetadataService.getProjectsForCategory(String)", "src"),
    ("ResponseActions MockRestServiceServer.expect(RequestMatcher)", "san"),
    ("void BindingResult.rejectValue(String,String,String)", "non"),  # not sure: no code
    ("String Tutorial.getZipUrl()", "src"),  # not sure: no code
    ("GuideHeader AbstractGuide.getHeader()", "non"),
    ("void InputStream.close()", "non"),
    ("DefaultResponseCreator MockRestResponseCreators.withStatus(HttpStatus)", "non"),
    ("void UrlRewriteFilter.init(FilterConfig)", "non"),
    ("List ProjectMetadataService.getProjectsWithGroups()", "src"),
    ("void DocsWebhookController.verifyHmacSignature(String,String)", "san"),
    ("Object Iterator.next()", "non"),
    ("void Link.setHref(String)", "non"),
    ("ResultMatcher ModelResultMatchers.attribute(String,Matcher)", "san"),
    ("GuideHeader Tutorial.getHeader()", "non"),  # not sure: no code
    ("void Graphics.dispose()", "non"),
    ("String MemberProfile.getJobTitle()", "non"),
    ("RequestMatcher MockRestRequestMatchers.requestTo(String)", "san"),
    ("void SecurityContext.setAuthentication(Authentication)", "sin"),  # not sure: no code
    ("void Project.setProjectSamples(List)", "non"),
    ("ResponseEntity DocsWebhookController.handlePayloadParsingException(IOException)", "non"),
    ("Long Long.valueOf(long)", "non"),
    ("void BlogService.updatePost(Post,PostForm)", "sin"),
    ("MockHttpServletRequestBuilder MockHttpServletRequestBuilder.contentType(MediaType)", "non"),
    ("String TeamLocation.getName()", "non"),
    ("void Post.setRenderedSummary(String)", "non"),
    ("String GuideHeader.getCiStatusImageUrl()", "src"),  # not sure: no code
    ("Matcher Matchers.is(Object)", "non"),
    ("int Page.getNumber()", "non"),
    ("void Project.setGroups(Set)", "non"),
    ("GeoLocation MemberProfile.getGeoLocation()", "non"),
    ("void TeamService.updateMemberProfile(MemberProfile,MemberProfile)", "sin"),
    ("Hop Hop.rel(String)", "non"),  # not sure: no code
    ("void RendererApplication.main(java.lang.String[])", "non"),
    ("Date Calendar.getTime()", "non"),
    ("boolean Post.isLiveOn(Date)", "non"),
    ("Optional AbstractGuide.getImageContent(String)", "non"),
    ("void ResponseActions.andRespond(ResponseCreator)", "non"),
    ("boolean Object.equals(Object)", "non"),
    ("List PostRepository.findByDraftFalseAndPublishAtBeforeOrderByPublishAtDesc(Date)", "src"),
    ("sagan.blog.PostCategory[] PostCategory.values()", "non"),  # not sure: no code
    ("GuideHeader Topical.getHeader()", "src"),                  # not sure: no code
    ("Object Matchers.argThat(Matcher)", "non"),
    ("Date PostForm.getPublishAt()", "non"),
    ("String GuideHeader.getName()", "non"),  # not sure: no code
    ("String HttpHeaders.getETag()", "non"),
    ("Elements Element.select(String)", "non"),  # not sure: no code
    ("List ProjectMetadataRepository.findAll(Sort)", "src"),
    ("String PostView.getFormattedPublishDate()", "non"),
    ("String SpringToolsAdminController.save(SpringToolsPlatform,List)", "sin"),
    ("void TeamService.updateMemberProfile(Long,MemberProfile)", "sin"),
    ("sagan.site.guides.GuideHeader[] GettingStartedGuides.findAll()", "src"),
    ("String Topical.getRepositoryName()", "src"),  # not sure: no code
    ("void File.deleteOnExit()", "sin"),
    ("int Event.compareTo(Event)", "non"),
    ("int ProjectRelease.compareTo(Object)", "non"),
    ("ResultActions MockMvc.perform(RequestBuilder)", "src"),
    ("ProjectRelease Project.getProjectRelease(String)", "non"),  # not sure: obscure
    ("String File.getParent()", "src"),
    ("Optional Topical.getImageContent(String)", "src"),  # not sure: no code
    ("Optional Tutorials.findByName(String)", ""),
    ("String ProjectsController.listProjects(Model)", ""),
    ("Locale Locale.getDefault()", ""),
    ("boolean String.endsWith(String)", ""),
    ("void MemberProfile.setName(String)", ""),
    ("String Event.getLocation()", ""),
    ("Object Alternatives.firstNotNull(java.lang.Object[])", ""),
    ("void AtomFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)", ""),
    ("List EventsCalendarService.findEvents(Period)", ""),
    ("GuideMetadata SaganRendererClient.fetchTutorialGuide(String)", ""),
    ("List ProjectMetadataService.getAllGroups()", ""),
    ("Object RestTemplate.postForObject(String,Object,Class,java.lang.Object[])", ""),
    ("ResponseEntity RestOperations.getForEntity(String,Class,java.lang.Object[])", ""),
    ("Long GitHubUser.getId()", ""),
    ("void Entry.setContents(List)", ""),
    ("Object Mockito.verify(Object,VerificationMode)", ""),
    ("String DefaultGuideHeader.getTitle()", ""),
    ("ThymeleafViewResolverCustomizer CloudFoundryMvcConfig.thymeleafViewResolverCustomizer(ThymeleafViewResolver)", ""),
    ("TimeZone DateFactory.timeZone()", ""),
    ("Object ArgumentCaptor.getValue()", ""),
    ("boolean File.mkdir()", ""),
    ("Project ProjectMetadataService.getProject(String)", ""),
    ("PostBuilder PostBuilder.createdAt(String)", ""),
    ("Cloud CloudFactory.getCloud()", ""),
    ("String GuideResource.getGithubUrl()", ""),
    ("List Topical.getImages()", ""),
    ("String AbstractGuide.getTitle()", ""),
    ("AbstractIterableAssert AbstractIterableAssert.containsExactlyInAnyOrder(java.lang.Object[])", ""),
    ("void Assert.assertTrue(boolean)", ""),
    ("String Topical.getCiStatusImageUrl()", ""),
    ("ResponseEntity GuidesController.showGuide(String,String)", ""),
    ("Object Cloud.getServiceConnector(String,Class,ServiceConnectorConfig)", ""),
    ("Page PostRepository.findAll(Pageable)", ""),
    ("String ZipEntry.getName()", ""),
    ("Matcher Matchers.containsString(String)", ""),
    ("String String.replace(char,char)", ""),
    ("PostBuilder PostBuilder.publishAt(String)", ""),
    ("void TeamImporter.importTeamMembers(GitHub)", ""),
    ("String GitHubUserProfile.getUsername()", ""),
    ("AbstractIterableAssert AbstractIterableAssert.containsOnly(java.lang.Object[])", ""),
    ("void GuideContentResource.setName(String)", ""),
    ("AbstractByteArrayAssert Assertions.assertThat(byte[])", ""),
    ("String Matcher.group()", ""),
    ("String String.substring(int,int)", ""),
    ("void MockHttpServletRequest.setServletPath(String)", ""),
    ("void Tutorials.evictListFromCache()", ""),
    ("String Tutorial.getDescription()", ""),
    ("Object RestTemplate.getForObject(String,Class,java.lang.Object[])", ""),
    ("Collection Resources.getContent()", ""),
    ("Resource ResourcePatternResolver.getResource(String)", ""),
    ("Set DefaultGuideHeader.getProjects()", ""),
    ("sagan.site.renderer.GuideType[] GuideType.values()", ""),
    ("JsonPathResultMatchers MockMvcResultMatchers.jsonPath(String,java.lang.Object[])", ""),
    ("void ProjectRelease.replaceVersionPattern()", ""),
    ("String MemberProfile.getVideoEmbeds()", ""),
    ("String GettingStartedGuide.getName()", ""),
    ("void MarkdownToHtmlSerializer.visit(HeaderNode)", ""),
    ("void AbstractCacheManager.addCache(Cache)", ""),
    ("Post PostRepository.findByTitleAndCreatedAt(String,Date)", ""),
    ("ConfigurableApplicationContext SpringApplication.run(Class,java.lang.String[])", ""),
    ("Optional Optional.map(Function)", ""),
    ("void OAuth2ConnectionFactory.setScope(String)", ""),
    ("boolean List.removeAll(Collection)", ""),
    ("String AbstractGuide.getCiLatestUrl()", ""),
    ("List TeamService.fetchHiddenMembers()", ""),
    ("String GuideResource.getTitle()", ""),
    ("String ToStringBean.toString(Class,Object)", ""),
    ("boolean Page.isFirst()", ""),
    ("PostBuilder PostBuilder.id(Long)", ""),
    ("boolean PostView.isScheduled()", ""),
    ("String PostContentRenderer.render(String,PostFormat)", ""),
    ("Pattern Pattern.compile(String)", ""),
    ("String BlogController.listPublishedBroadcasts(Model,int)", ""),
    ("String String.replaceFirst(String,String)", ""),
    ("void FileOutputStream.close()", ""),
    ("RestTemplate SiteApplication.restTemplate()", ""),
    ("String StringUtils.arrayToDelimitedString(java.lang.Object[],String)", ""),
    ("AbstractListAssert AbstractIterableAssert.extracting(String)", ""),
    ("OngoingStubbing OngoingStubbing.thenReturn(Object)", ""),
    ("String Feed.getTitle()", ""),
    ("String BlogAdminController.deletePost(Long)", ""),
    ("boolean ConfigurableEnvironment.acceptsProfiles(java.lang.String[])", ""),
    ("Collector Collectors.toList()", ""),
    ("InputStream ZipFile.getInputStream(ZipEntry)", ""),
    ("Font Font.createFont(int,InputStream)", ""),
    ("void MockitoAnnotations.initMocks(Object)", ""),
    ("LocalDate Event.getLastDay()", ""),
    ("String BlogController.listPublishedPostsForYearAndMonth(int,int,int,Model)", ""),
    ("boolean FileSystemUtils.deleteRecursively(File)", ""),
    ("void SecurityContextHolder.clearContext()", ""),
    ("void Attributes.setAttribute(String,Object)", ""),
    ("String BlogAdminController.refreshBlogPosts(int,int)", ""),
    ("java.lang.Object[] Stream.toArray(IntFunction)", ""),
    ("String TeamAdminController.saveTeamMember(String,MemberProfile)", ""),
    ("String FileCopyUtils.copyToString(Reader)", ""),
    ("int Page.getSize()", ""),
    ("void AbstractObjectArrayAssert.isEmpty()", ""),
    ("String AsciidoctorGuideContentContributor.findTableOfContents(Document)", ""),
    ("XBUrlIO ProjectionIO.url(String)", ""),
    ("String EventsController.community(Model)", ""),
    ("String Tutorial.getRepositoryName()", ""),
    ("Object Matchers.any()", ""),
    ("boolean ArrayList.addAll(Collection)", ""),
    ("Object Enumeration.nextElement()", ""),
    ("void FileOutputStream.write(byte[])", ""),
    ("boolean Enumeration.hasMoreElements()", ""),
    ("String Long.toString()", ""),
    ("int String.compareTo(String)", ""),
    ("String Post.getRenderedContent()", ""),
    ("void Tutorial.setImages(List)", ""),
    ("boolean PaginationInfo.isPreviousVisible()", ""),
    ("boolean Post.isScheduled()", ""),
    ("AbstractStringAssert Assertions.assertThat(String)", ""),
    ("String PostFormat.toString()", ""),
    ("void PageElementsBuilder.findStartPage()", ""),
    ("Object ValuedProperty.getValue()", ""),
    ("Matcher CoreMatchers.is(Object)", ""),
    ("Project ProjectMetadataController.updateProject(String,Project)", ""),
    ("String Topical.getDescription()", ""),
    ("MemberProfile TeamRepository.findById(Long)", ""),
    ("float Float.floatValue()", ""),
    ("boolean Version.equals(Object)", ""),
    ("List HttpHeaders.get(Object)", ""),
    ("Page PostView.pageOf(Page,DateFactory)", ""),
    ("String String.trim()", ""),
    ("void Topical.setImages(List)", ""),
    ("String GuideType.getSlug()", ""),
    ("void Post.setBroadcast(boolean)", ""),
    ("ProjectRepository ProjectRelease.getRepository()", ""),
    ("Date DateFormat.parse(String)", ""),
    ("byte[] String.getBytes(Charset)", ""),
    ("Version Version.build(String)", ""),
    ("boolean Project.updateProjectRelease(ProjectRelease)", ""),
    ("int Project.hashCode()", ""),
    ("boolean PostView.showReadMore()", ""),
    ("boolean Project.equals(Object)", ""),
    ("String PostView.getEditPath()", ""),
    ("void TeamService.updateMemberProfile(String,MemberProfile)", ""),
    ("String GuideHeader.getTitle()", ""),
    ("ResponseActions ResponseActions.andExpect(RequestMatcher)", ""),
    ("String MemberProfile.getGravatarEmail()", ""),
    ("int Page.getTotalPages()", ""),
    ("Object List.get(int)", ""),
    ("void AbstractGuide.setImages(List)", ""),
    ("String PostView.getRenderedContent()", ""),
    ("String GettingStartedGuide.getCiLatestUrl()", ""),
    ("ControllerLinkBuilder ControllerLinkBuilder.linkTo(Object)", ""),
    ("Object XBUrlIO.read(Class)", ""),
    ("long System.currentTimeMillis()", ""),
    ("GuideContent SaganRendererClient.fetchTutorialGuideContent(String)", ""),
    ("Iterator ArrayList.iterator()", ""),
    ("OptionsBuilder OptionsBuilder.safe(SafeMode)", ""),
    ("String DefaultGuideHeader.getSshUrl()", ""),
    ("String BlogAdminController.editPost(Long,String,Model)", ""),
    ("RedisCacheManager RedisCacheManager.withCache(String,long)", ""),
    ("String GuideHeader.getCiLatestUrl()", ""),
    ("String File.getName()", ""),
    ("PostBuilder PostBuilder.renderedContent(String)", ""),
    ("String PostSummary.forContent(String,int)", ""),
    ("Pageable PageableFactory.forLists(int)", ""),
    ("void Log.info(Object)", ""),
    ("boolean BindingResult.hasErrors()", ""),
    ("String Topical.getCiLatestUrl()", ""),
    ("int ProjectRepository.hashCode()", ""),
    ("void Assert.notNull(Object,String)", ""),
    ("int TeamRepository.hideTeamMembersNotInIds(List)", ""),
    ("String String.concat(String)", ""),
    ("int HttpStatus.value()", ""),
    ("String Post.getTitle()", ""),
    ("void AbstractUrlBasedView.setUrl(String)", ""),
    ("Optional Optional.empty()", ""),
    ("Stream Arrays.stream(java.lang.Object[])", ""),
    ("String DatatypeConverter.printHexBinary(byte[])", ""),
    ("PostCategory PostForm.getCategory()", ""),
    ("void Category.setTerm(String)", ""),
    ("String MemberProfile.getLocation()", ""),
    ("Page PostRepository.findByDraftFalseAndPublishAtAfter(Date,Pageable)", ""),
    ("AbstractBooleanAssert AbstractBooleanAssert.isFalse()", ""),
    ("String Post.getRawContent()", ""),
    ("List ProjectMetadataService.getProjectsWithReleases()", ""),
    ("Map Collections.singletonMap(Object,Object)", ""),
    ("void Calendar.set(int,int,int)", ""),
    ("Object ProjectMetadataRepository.save(Object)", ""),
    ("GitHub TeamAdminController.getGitHub(Principal)", ""),
    ("String Tutorial.getCiStatusImageUrl()", ""),
    ("int Objects.hash(java.lang.Object[])", ""),
    ("InputStream ClassLoader.getResourceAsStream(String)", ""),
    ("Object SpringToolsPlatformRepository.save(Object)", ""),
    ("Matcher IsEqual.equalTo(Object)", ""),
    ("String TeamController.showProfile(String,Model)", ""),
    ("InputStream URL.openStream()", ""),
    ("void Post.addPublicSlugAlias(String)", ""),
    ("MemberProfile TeamService.fetchMemberProfile(Long)", ""),
    ("Stream Stream.filter(Predicate)", ""),
    ("Repository GithubClient.fetchOrgRepository(String,String)", ""),
    ("RequestMatcher MockRestRequestMatchers.method(HttpMethod)", ""),
    ("String TextNode.getText()", ""),
    ("String YearMonth.toString(String)", ""),
    ("void PostForm.setPublishAt(Date)", ""),
    ("String ToHtmlSerializer.printChildrenToString(SuperNode)", ""),
    ("String GitHubUserProfile.getName()", ""),
    ("String DocsWebhookController.stripPrefix(String)", ""),
    ("List SpringToolsPlatform.getDownloads()", ""),
    ("int Version.hashCode()", ""),
    ("String Topical.getPushToPwsUrl()", ""),
    ("ResultMatcher StatusResultMatchers.isNotFound()", ""),
    ("String StreamUtils.copyToString(InputStream,Charset)", ""),
    ("Long PostView.getId()", ""),
    ("void GettingStartedGuides.evictFromCache(String)", ""),
    ("char[] String.toCharArray()", ""),
    ("Page BlogService.getPublishedBroadcastPosts(Pageable)", ""),
    ("String PostView.getRenderedSummary()", ""),
    ("sagan.site.guides.GuideHeader[] Topicals.findAll()", ""),
    ("String SpringToolsPlatform.toString()", ""),
    ("String GuideResource.getRepositoryName()", ""),
    ("String GitHubUser.getAvatarUrl()", ""),
    ("List BlogService.getAllPublishedPosts()", ""),
    ("MockHttpServletRequestBuilder MockMvcRequestBuilders.get(String,java.lang.Object[])", ""),
    ("Pageable PageableFactory.first(int)", ""),
    ("Optional BadgeController.getRelease(Collection,Predicate)", ""),
    ("byte[] RedisCachePrefix.prefix(String)", ""),
    ("String AbstractGuide.getTableOfContents()", ""),
    ("String MemberProfile.getTwitterUsername()", ""),
    ("ResponseEntity MarkupController.renderMarkup(MediaType,String)", ""),
    ("Optional Topicals.findGuideHeaderByName(String)", ""),
    ("Link MemberProfile.getLanyrdLink()", ""),
    ("float TeamLocation.getLongitude()", ""),
    ("void Feed.setIcon(String)", ""),
    ("void MemberProfile.setVideoEmbeds(String)", ""),
    ("ObjectArrayAssert AbstractObjectArrayAssert.extracting(String)", ""),
    ("Optional Optional.of(Object)", ""),
    ("String Link.getHref()", ""),
    ("void AtomFeedView.setPostUrl(Post,Entry)", ""),
    ("Iterator Page.iterator()", ""),
    ("ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String,String)", ""),
    ("List ResourceAssemblerSupport.toResources(Iterable)", ""),
    ("boolean Post.isDraft()", ""),
    ("Matcher Matchers.is(Matcher)", ""),
    ("String TeamAdminController.editProfileForm(Principal,Model)", ""),
    ("String ProjectGroup.toString()", ""),
    ("String Node.outerHtml()", ""),
    ("String PostView.getTitle()", ""),
    ("Optional GettingStartedGuide.getImageContent(String)", ""),
    ("String MemberProfile.getSpeakerdeckUsername()", ""),
    ("URI URI.create(String)", ""),
    ("AtomFeedView AtomFeedController.listPublishedBroadcastPosts(Model,HttpServletResponse)", ""),
    ("PostBuilder PostBuilder.publishAt(Date)", ""),
    ("void List.forEach(Consumer)", ""),
    ("boolean MemberProfile.hasGithubUsername()", ""),
    ("byte[] Mac.doFinal(byte[])", ""),
    ("String PostForm.getTitle()", ""),
    ("int StreamUtils.copy(InputStream,OutputStream)", ""),
    ("Pageable PageableFactory.all()", ""),
    ("ResultActions ResultActions.andExpect(ResultMatcher)", ""),
    ("String System.getProperty(String)", ""),
    ("Printer Printer.print(String)", ""),
    ("void RegistrationBean.setName(String)", ""),
    ("void AtomFeedController.prepareResponse(Model,HttpServletResponse,Page,String,String)", ""),
    ("String DefaultGuideHeader.getCloneUrl()", ""),
    ("UriComponentsBuilder UriComponentsBuilder.fromHttpUrl(String)", ""),
    ("String System.setProperty(String,String)", ""),
    ("String BlogAdminController.newPost(Model)", ""),
    ("List BadgeSvg.getGraphicElements()", ""),
    ("DefaultResponseCreator MockRestResponseCreators.withSuccess(Resource,MediaType)", ""),
    ("MemberProfile Post.getAuthor()", ""),
    ("String PostMovedException.getPublicSlug()", ""),
    ("void Topicals.evictFromCache(String)", ""),
    ("void TuckeyRewriteFilter.loadUrlRewriter(FilterConfig)", ""),
    ("String PostCategoryFormatter.print(PostCategory,Locale)", ""),
    ("StringBuilder StringBuilder.append(char)", ""),
    ("String Post.getAdminSlug()", ""),
    ("String BlogAdminController.resummarizeAllBlogPosts()", ""),
    ("String ProjectsController.stackOverflowUrl(Project)", ""),
    ("void HttpServletResponse.setCharacterEncoding(String)", ""),
    ("String GeoLocationFormatter.print(GeoLocation,Locale)", ""),
    ("void AbstractCharSequenceAssert.isEmpty()", ""),
    ("ConfigurableApplicationContext SpringApplication.run(java.lang.String[])", ""),
    ("Object List.remove(int)", ""),
    ("Object SpringToolsPlatformRepository.findOne(Serializable)", ""),
    ("boolean HashSet.add(Object)", ""),
    ("Matcher Matchers.empty()", ""),
    ("void RedirectView.setStatusCode(HttpStatus)", ""),
    ("Object ArrayList.get(int)", ""),
    ("PostBuilder PostBuilder.createdAt(Date)", ""),
    ("String String.replace(CharSequence,CharSequence)", ""),
    ("String Post.toString()", ""),
    ("void Throwable.addSuppressed(Throwable)", ""),
    ("String MemberProfile.getUsername()", ""),
    ("void ImagesGuideContentContributor.contribute(GuideContentResource,File)", ""),
    ("MemberProfile TeamRepository.findByUsername(String)", ""),
    ("void MemberProfile.setBio(String)", ""),
    ("Object RestOperations.postForObject(String,Object,Class,java.lang.Object[])", ""),
    ("ResultMatcher StatusResultMatchers.isUnsupportedMediaType()", ""),
    ("ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String)", ""),
    ("String Asciidoctor.convert(String,OptionsBuilder)", ""),
    ("String EventsController.events(Model)", ""),
    ("String SpringToolsAdminController.edit(String,Model)", ""),
    ("void BlogService.deletePost(Post)", ""),
    ("Object PostCategoryFormatter.parse(String,Locale)", ""),
    ("Link LinkBuilderSupport.withSelfRel()", ""),
    ("boolean ProjectRelease.hasRefDocUrl()", ""),
    ("void PageElementsBuilder.addPageElements(ArrayList)", ""),
    ("String PostCategory.getDisplayName()", ""),
    ("String Topical.getZipUrl()", ""),
    ("void ToHtmlSerializer.visitChildren(SuperNode)", ""),
    ("String TeamAdminController.importTeamMembersFromGithub(Principal)", ""),
    ("OptionsBuilder OptionsBuilder.attributes(Attributes)", ""),
    ("List GuideContentResource.getImages()", ""),
    ("String GitHubUser.getName()", ""),
    ("void AsciidoctorGuideContentContributor.contribute(GuideContentResource,File)", ""),
    ("RedisConnectionFactory ServiceConnectionFactory.redisConnectionFactory()", ""),
    ("int String.indexOf(String)", ""),
    ("sagan.site.guides.GuideHeader[] Tutorials.findAll()", ""),
    ("List Feed.getAlternateLinks()", ""),
    ("float GeoLocation.getLongitude()", ""),
    ("ProjectRelease ProjectRelease.createWithVersionPattern()", ""),
    ("String BlogController.renderListOfPosts(Page,Model,String)", ""),
    ("void ResourceSupport.add(Link)", ""),
    ("GuideType GuideType.fromRepositoryName(String)", ""),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchGettingStartedGuides()", ""),
    ("List ProjectMetadataRepository.findTopLevelProjectsWithGroup()", ""),
    ("String Project.getRawBootConfig()", ""),
    ("Page PostRepository.findByDraftTrue(Pageable)", ""),
    ("void HttpHeaders.add(String,String)", ""),
    ("String ProjectRepository.getUrl()", ""),
    ("String StringBuilder.toString()", ""),
    ("GuideMetadata SaganRendererClient.fetchGettingStartedGuide(String)", ""),
    ("String HttpHeaders.getCacheControl()", ""),
    ("void ProjectGroup.setName(String)", ""),
    ("Matcher Matchers.nullValue()", ""),
    ("String GettingStartedGuide.getTypeLabel()", ""),
    ("ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String,String)", ""),
    ("void MutablePropertySources.addLast(PropertySource)", ""),
    ("int String.length()", ""),
    ("void Entry.setId(String)", ""),
    ("String TutorialController.viewTutorial(String,Model)", ""),
    ("ResourceSupport IndexController.index()", ""),
    ("Page BlogService.getPublishedPostsForMember(MemberProfile,Pageable)", ""),
    ("void MemberProfile.setTwitterUsername(String)", ""),
    ("Object TeamRepository.save(Object)", ""),
    ("Date PostForm.getCreatedAt()", ""),
    ("List ProjectMetadataRepository.findAllWithReleases(Sort)", ""),
    ("AbstractIterableAssert AbstractIterableAssert.isNotNull()", ""),
    ("MediaType MediaType.parseMediaType(String)", ""),
    ("String Fixtures.githubRepoListJson()", ""),
    ("Object Optional.orElse(Object)", ""),
    ("Object Matchers.any(Class)", ""),
    ("Date Feed.getUpdated()", ""),
    ("Cache RedisCacheManager.getCache(String)", ""),
    ("String AbstractGuide.getCiStatusImageUrl()", ""),
    ("void Tutorial.setTypeLabel(String)", ""),
    ("void PostFormAdapter.updatePostFromPostForm(Post,PostForm)", ""),
    ("TeamLocation MemberProfile.getTeamLocation()", ""),
    ("boolean ProjectGroup.equals(Object)", ""),
    ("void GuideContentResource.setImages(List)", ""),
    ("void BadgeSvg.setWidth(int)", ""),
    ("Model Model.addAttribute(String,Object)", ""),
    ("void PrettifyVerbatimSerializer.serialize(VerbatimNode,Printer)", ""),
    ("Enum Enum.valueOf(Class,String)", ""),
    ("boolean AsciidoctorRenderer.canRender(MediaType)", ""),
    ("Font Font.deriveFont(int,float)", ""),
    ("String File.getAbsolutePath()", ""),
    ("ProjectRelease ProjectMetadataController.releaseMetadata(String,String)", ""),
    ("ResponseEntity BadgeController.releaseBadge(String)", ""),
    ("void HttpHeaders.setContentType(MediaType)", ""),
    ("String String.format(Locale,String,java.lang.Object[])", ""),
    ("boolean String.equalsIgnoreCase(String)", ""),
    ("String Link.getHrefResolved()", ""),
    ("void CloudFoundryMvcConfig.addResourceHandlers(ResourceHandlerRegistry)", ""),
    ("RestOperations GitHub.restOperations()", ""),
    ("void AtomFeedView.setUpdatedDate(Map,Feed)", ""),
    ("Page PostRepository.findByDate(int,Pageable)", ""),
    ("Elements Elements.select(String)", ""),
    ("sagan.site.guides.GuideHeader[] GettingStartedGuides.findByProject(Project)", ""),
    ("FontMetrics Graphics.getFontMetrics()", ""),
    ("Matcher CoreMatchers.is(Matcher)", ""),
    ("String GuideHeader.getZipUrl()", ""),
    ("String Tutorial.getGitUrl()", ""),
    ("String VerbatimNode.getType()", ""),
    ("String Post.generatePublicSlug()", ""),
    ("Matcher Matchers.equalTo(Object)", ""),
    ("Long MemberProfile.getGithubId()", ""),
    ("Float Float.valueOf(float)", ""),
    ("ListAssert Assertions.assertThat(List)", ""),
    ("void PostForm.setFormat(PostFormat)", ""),
    ("void MemberProfile.setGithubUsername(String)", ""),
    ("void TeamService.showOnlyTeamMembersWithIds(List)", ""),
    ("float GeoLocation.getLatitude()", ""),
    ("boolean SignInService.isSpringMember(String,GitHub)", ""),
    ("int Event.compareTo(Object)", ""),
    ("boolean PostForm.isDraft()", ""),
    ("Link MemberProfile.getTwitterLink()", ""),
    ("Date Post.getPublishAt()", ""),
    ("String Post.getPublicSlug()", ""),
    ("String Topical.getCloneUrl()", ""),
    ("boolean Link.equals(Object)", ""),
    ("void Entry.setAuthors(List)", ""),
    ("Set StringUtils.commaDelimitedListToSet(String)", ""),
    ("String System.clearProperty(String)", ""),
    ("Object ObjectMapper.readValue(String,Class)", ""),
    ("String SpringToolsDownload.toString()", ""),
    ("String Tutorial.getGithubUrl()", ""),
    ("boolean PaginationInfo.isNextVisible()", ""),
    ("ResultMatcher JsonPathResultMatchers.isEmpty()", ""),
    ("void Assert.assertThat(Object,Matcher)", ""),
    ("String Post.getSlug()", ""),
    ("StringBuilder StringBuilder.append(String)", ""),
    ("RedisCache RedisCacheManager.createCache(String,RedisTemplate,long)", ""),
    ("GuideResource GuideResourceAssembler.toResource(Repository)", ""),
    ("Object List.set(int,Object)", ""),
    ("InputStream ClassPathResource.getInputStream()", ""),
    ("String HttpServletRequest.getRequestURI()", ""),
    ("IntStream Stream.mapToInt(ToIntFunction)", ""),
    ("MemberProfileBuilder MemberProfileBuilder.profile()", ""),
    ("Hop Hop.withParameter(String,Object)", ""),
    ("void Category.setLabel(String)", ""),
    ("String DefaultGuideHeader.getGithubUrl()", ""),
    ("boolean EqualsBean.beanEquals(Class,Object,Object)", ""),
    ("Matcher Matchers.contains(java.lang.Object[])", ""),
    ("String Entry.getId()", ""),
    ("int FontMetrics.stringWidth(String)", ""),
    ("int EqualsBean.beanHashCode(Object)", ""),
    ("boolean StringUtils.hasText(String)", ""),
    ("OptionsBuilder OptionsBuilder.options()", ""),
    ("Page PostRepository.findByDate(int,int,Pageable)", ""),
    ("boolean LocalDate.equals(Object)", ""),
    ("boolean PageElement.isNavigable()", ""),
    ("String DefaultGuideHeader.getGitUrl()", ""),
    ("void MockFilterConfig.addInitParameter(String,String)", ""),
    ("String GuideType.getPrefix()", ""),
    ("void Graphics.setFont(Font)", ""),
    ("Project ProjectMetadataService.save(Project)", ""),
    ("void Entry.setUpdated(Date)", ""),
    ("Connection ConnectionRepository.findPrimaryConnection(Class)", ""),
    ("int Enum.ordinal()", ""),
    ("String TeamAdminController.editTeamMemberForm(String,Model)", ""),
    ("String String.join(CharSequence,Iterable)", ""),
    ("long Long.longValue()", ""),
    ("void DateFormat.setTimeZone(TimeZone)", ""),
    ("Object Mockito.mock(Class)", ""),
    ("PostBuilder PostBuilder.post()", ""),
    ("Object Optional.get()", ""),
    ("boolean Project.isTopLevelProject()", ""),
    ("Post PostFormAdapter.createPostFromPostForm(PostForm,String)", ""),
    ("Object Stream.collect(Collector)", ""),
    ("HttpServletRequest ServletRequestAttributes.getRequest()", ""),
    ("void Post.setTitle(String)", ""),
    ("MutablePropertySources ConfigurableEnvironment.getPropertySources()", ""),
    ("String Matchers.contains(String)", ""),
    ("ResponseEntity TopicalController.loadImage(String,String)", ""),
    ("ModelResultMatchers MockMvcResultMatchers.model()", ""),
    ("String GeoLocationFormatter.print(Object,Locale)", ""),
    ("HttpClientBuilder HttpClientBuilder.create()", ""),
    ("Set Tutorial.getProjects()", ""),
    ("ResourceChainRegistration ResourceHandlerRegistration.resourceChain(boolean)", ""),
    ("Optional GithubClient.findNextPageLink(ResponseEntity)", ""),
    ("void Logger.info(String)", ""),
    ("Optional Stream.findFirst()", ""),
    ("ServiceConnectionFactory AbstractCloudConfig.connectionFactory()", ""),
    ("void Content.setValue(String)", ""),
    ("String ProjectRelease.getRefDocUrl()", ""),
    ("java.lang.String[] StringUtils.tokenizeToStringArray(String,String)", ""),
    ("void PostForm.setBroadcast(boolean)", ""),
    ("void HttpHeaders.setAccept(List)", ""),
    ("String GettingStartedGuide.getDescription()", ""),
    ("Object Link.clone()", ""),
    ("void Topicals.evictListFromCache()", ""),
    ("Printer Printer.printEncoded(String)", ""),
    ("String Tutorial.getTitle()", ""),
    ("String StaticPagePathFinder.relativeFilePath(String,Resource)", ""),
    ("void AbstractIterableAssert.isEmpty()", ""),
    ("boolean File.isFile()", ""),
    ("int Math.min(int,int)", ""),
    ("sagan.site.renderer.GuideMetadata[] SaganRendererClient.fetchTutorialGuides()", ""),
    ("String AbstractGuide.getZipUrl()", ""),
    ("boolean Enum.equals(Object)", ""),
    ("Set Topical.getProjects()", ""),
    ("Set Project.getStackOverflowTagList()", ""),
    ("Page PostRepository.findByDate(int,int,int,Pageable)", ""),
    ("String GettingStartedGuide.getGithubUrl()", ""),
    ("String Post.getRenderedSummary()", ""),
    ("boolean ProjectRelease.isGeneralAvailability()", ""),
    ("boolean Project.hasSite()", ""),
    ("String DefaultGuideHeader.getDescription()", ""),
    ("List BadgeSvg.getPaths()", ""),
    ("ResourceHandlerRegistration ResourceHandlerRegistry.addResourceHandler(java.lang.String[])", ""),
    ("GuideContent SaganRendererClient.fetchGettingStartedGuideContent(String)", ""),
    ("CacheManager CloudFoundryCacheConfig.redisCacheManager(RedisConnectionFactory,ObjectMapper,SiteProperties)", ""),
    ("boolean String.isEmpty()", ""),
    ("List GettingStartedGuide.getImages()", ""),
    ("String GuideResource.getDescription()", ""),
    ("MockHttpServletRequestBuilder MockMvcRequestBuilders.post(String,java.lang.Object[])", ""),
    ("String URI.getPath()", ""),
    ("Resources GuidesController.listGuides()", ""),
    ("void VersionBadgeService.postConstruct()", ""),
    ("String UriComponentsBuilder.toUriString()", ""),
    ("void Content.setType(String)", ""),
    ("boolean Resource.exists()", ""),
    ("Collection RedisCacheManager.loadCaches()", ""),
    ("void Project.setProjectReleases(List)", ""),
    ("ResponseEntity RestTemplate.getForEntity(String,Class,java.lang.Object[])", ""),
    ("boolean Iterator.hasNext()", ""),
    ("Object Map.get(Object)", ""),
    ("Stream Set.stream()", ""),
    ("LocalDate LocalDate.now()", ""),
    ("void Attributes.setAnchors(boolean)", ""),
    ("URI Event.getLink()", ""),
    ("VersionResourceResolver VersionResourceResolver.addContentVersionStrategy(java.lang.String[])", ""),
    ("String ProjectRelease.getVersionDisplayName()", ""),
    ("Matcher Matcher.appendReplacement(StringBuffer,String)", ""),
    ("List ArrayList.subList(int,int)", ""),
    ("Project ProjectMetadataController.projectMetadata(String)", ""),
    ("void Post.setAuthor(MemberProfile)", ""),
    ("ResponseEntity GuidesController.renderGuide(String,String)", ""),
    ("List ProjectGroupRepository.findAll()", ""),
    ("Cache AbstractCacheManager.getCache(String)", ""),
    ("void MemberProfile.setGithubId(Long)", ""),
    ("String Tutorial.getName()", ""),
    ("java.lang.Object[] Collection.toArray(java.lang.Object[])", ""),
    ("void Asciidoctor.convert(Reader,Writer,OptionsBuilder)", ""),
    ("void Assert.assertEquals(Object,Object)", ""),
    ("boolean Date.after(Date)", ""),
    ("Object Mockito.spy(Object)", ""),
    ("String MimeType.toString()", ""),
    ("Optional Optional.flatMap(Function)", ""),
    ("GuideType GuideType.fromName(String)", ""),
    ("Optional Project.getMostCurrentRelease()", ""),
    ("String ProjectAdminController.edit(String,Model)", ""),
    ("void PageElementsBuilder.addLastPage(ArrayList)", ""),
    ("String MemberProfile.getBio()", ""),
    ("List PageElementsBuilder.build()", ""),
    ("char String.charAt(int)", ""),
    ("RequestAttributes RequestContextHolder.currentRequestAttributes()", ""),
    ("String GuideIndexController.viewIndex(Model)", ""),
    ("URL Resource.getURL()", ""),
    ("void AtomFeedView.setRenderedContent(Post,Entry)", ""),
    ("void PostRepository.delete(Object)", ""),
    ("void MockHttpServletRequest.setRequestURI(String)", ""),
    ("String GuideHeader.getGithubUrl()", ""),
    ("int Long.hashCode()", ""),
    ("int ProjectRelease.hashCode()", ""),
    ("String AbstractGuide.getRepositoryName()", ""),
    ("long Matchers.eq(long)", ""),
    ("void AtomFeedView.setFeedUrl(String,Feed)", ""),
    ("void GettingStartedGuide.setImages(List)", ""),
    ("List Feed.getOtherLinks()", ""),
    ("Object Yaml.load(String)", ""),
    ("byte[] VersionBadgeService.createSvgBadge(BadgeSvg,List,String,String)", ""),
    ("void Post.setRawContent(String)", ""),
    ("String Topical.getGithubUrl()", ""),
    ("void SaganApplication.configureProfiles(ConfigurableEnvironment,java.lang.String[])", ""),
    ("Post BlogService.getPublishedPost(String)", ""),
    ("String Project.getRawOverview()", ""),
    ("boolean Long.equals(Object)", ""),
    ("String GuideContentResource.getPushToPwsMetadata()", ""),
    ("MemberProfile TeamService.fetchMemberProfileUsername(String)", ""),
    ("void GuideContentResource.setPushToPwsMetadata(String)", ""),
    ("JsonContentAssert JsonContentAssert.isEqualToJson(String,Class)", ""),
    ("String Topical.getName()", ""),
    ("void PageElementsBuilder.addFirstPage(ArrayList)", ""),
    ("RedisCacheManager RedisCacheManager.withCache(String,RedisTemplate,long)", ""),
    ("Date PostFormAdapter.publishDate(PostForm)", ""),
    ("boolean Authentication.isAuthenticated()", ""),
    ("boolean ProjectRelease.isNumber(String)", ""),
    ("void PostForm.setCategory(PostCategory)", ""),
    ("String Throwable.getMessage()", ""),
    ("String GettingStartedGuide.getTableOfContents()", ""),
    ("boolean Event.isSingleDayEvent()", ""),
    ("void Project.setFeatured(boolean)", ""),
    ("Optional Tutorials.findGuideHeaderByName(String)", ""),
    ("String SiteUrl.getAbsoluteUrl(String)", ""),
    ("String BlogController.listPublishedPostsForCategory(PostCategory,Model,int)", ""),
    ("void PageElementsBuilder.findEndPage()", ""),
    ("String Project.getName()", ""),
    ("String GettingStartedGuide.getCloneUrl()", ""),
    ("void MvcConfig.addInterceptors(InterceptorRegistry)", ""),
    ("String GuideHeader.getCloneUrl()", ""),
    ("void Attributes.setAllowUriRead(boolean)", ""),
    ("boolean PostView.isDraft()", ""),
    ("Page BlogService.getPublishedPostsByDate(int,Pageable)", ""),
    ("void ProjectGroup.setLabel(String)", ""),
    ("String URI.toString()", ""),
    ("GuideType GuideType.fromSlug(String)", ""),
    ("void BlogService.resummarizeAllPosts()", ""),
    ("String SaganRendererClient.renderMarkup(String,MediaType)", ""),
    ("boolean Optional.isPresent()", ""),
    ("String PostView.getUpdatePath()", ""),
    ("AbstractAssert AbstractAssert.isEqualTo(Object)", ""),
    ("String Fixtures.githubRepoJson()", ""),
    ("GitHub GitHubConfig.gitHubTemplate()", ""),
    ("boolean MemberProfile.isHidden()", ""),
    ("String AbstractGuide.getSshUrl()", ""),
    ("Object GeoLocationFormatter.parse(String,Locale)", ""),
    ("Page BlogService.getScheduledPosts(Pageable)", ""),
    ("void MemberProfile.setLocation(String)", ""),
    ("String PostCategoryFormatter.print(Object,Locale)", ""),
    ("String PostFormat.getId()", ""),
    ("String Period.toString()", ""),
    ("Object ArgumentCaptor.capture()", ""),
    ("boolean Map.containsKey(Object)", ""),
    ("void Iterator.remove()", ""),
    ("long Math.max(long,long)", ""),
    ("ObjectAssert Assertions.assertThat(Object)", ""),
    ("MemberProfile TeamService.createOrUpdateMemberProfile(Long,String,String,String)", ""),
    ("Description VEvent.getDescription()", ""),
    ("boolean MediaType.isCompatibleWith(MediaType)", ""),
    ("GuideContent SaganRendererClient.fetchTopicalGuideContent(String)", ""),
    ("void Feed.setTitle(String)", ""),
    ("void ProjectMetadataService.delete(String)", ""),
    ("Object ArgumentMatchers.any()", ""),
    ("void GuideImage.setName(String)", ""),
    ("Set Collections.emptySet()", ""),
    ("Optional GettingStartedGuides.findGuideHeaderByName(String)", ""),
    ("void PostForm.setTitle(String)", ""),
    ("String AbstractGuide.getGitUrl()", ""),
    ("Predicate Period.toCalendarFilter()", ""),
    ("String SpringToolsAdminController.list(Model)", ""),
    ("void SpringApplication.configureProfiles(ConfigurableEnvironment,java.lang.String[])", ""),
    ("byte[] GithubClient.downloadRepositoryAsZipball(String,String)", ""),
    ("byte[] VersionBadgeService.createSvgBadge(Project,ProjectRelease)", ""),
    ("boolean String.matches(String)", ""),
    ("StatusResultMatchers MockMvcResultMatchers.status()", ""),
    ("Element Document.body()", ""),
    ("ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String)", ""),
    ("List Project.getProjectSamples()", ""),
    ("PostCategory Post.getCategory()", ""),
    ("String BlogService.getDisqusShortname()", ""),
    ("Link LinkBuilderSupport.withRel(String)", ""),
    ("AbstractCharSequenceAssert AbstractCharSequenceAssert.contains(java.lang.CharSequence[])", ""),
    ("Elements Element.children()", ""),
    ("StringBuffer Matcher.appendTail(StringBuffer)", ""),
    ("ResponseEntity ResponseEntity.ok(Object)", ""),
    ("Optional GettingStartedGuides.findByName(String)", ""),
    ("ResultMatcher StatusResultMatchers.isOk()", ""),
    ("String GettingStartedGuide.getRepositoryName()", ""),
    ("String Topical.getTitle()", ""),
    ("String BlogAdminController.showPost(Long,String,Model)", ""),
    ("Period Period.of(String,int)", ""),
    ("void SimpleCacheManager.setCaches(Collection)", ""),
    ("ExtendedModelMap ExtendedModelMap.addAttribute(String,Object)", ""),
    ("Document Jsoup.parse(String)", ""),
    ("LocalDate LocalDate.parse(CharSequence)", ""),
    ("String Project.toString()", ""),
    ("void ProjectRelease.setApiDocUrl(String)", ""),
    ("DefaultResponseCreator DefaultResponseCreator.headers(HttpHeaders)", ""),
    ("Pageable PageableFactory.forFeeds()", ""),
    ("String TopicalController.viewTutorial(String,Model)", ""),
    ("void List.sort(Comparator)", ""),
    ("String GuideResource.getGitUrl()", ""),
    ("sagan.renderer.guides.GuideType[] GuideType.values()", ""),
    ("String SpringToolsController.listDownloads(Model)", ""),
    ("int String.lastIndexOf(String)", ""),
    ("ResultMatcher ContentResultMatchers.string(String)", ""),
    ("void Post.setRenderedContent(String)", ""),
    ("sagan.support.nav.Section[] Section.values()", ""),
    ("boolean StringUtils.isEmpty(String)", ""),
    ("void MemberProfile.setGravatarEmail(String)", ""),
    ("String Elements.toString()", ""),
    ("String PostContentRenderer.renderCallouts(String)", ""),
    ("void HstsHeaderWriter.setRequestMatcher(RequestMatcher)", ""),
    ("Post BlogService.addPost(PostForm,String)", ""),
    ("String PostForm.getContent()", ""),
    ("AbstractListAssert AbstractObjectAssert.extracting(java.lang.String[])", ""),
    ("String Tutorial.getCiLatestUrl()", ""),
    ("boolean File.exists()", ""),
    ("String Tutorial.getCloneUrl()", ""),
    ("CloseableHttpClient HttpClientBuilder.build()", ""),
    ("void ProjectRelease.setGroupId(String)", ""),
    ("Page PostRepository.findByBroadcastAndDraftFalseAndPublishAtBefore(boolean,Date,Pageable)", ""),
    ("PostCategory PostCategory.valueOf(String)", ""),
    ("AbstractComparableAssert Assertions.assertThat(Comparable)", ""),
    ("Object Assertions.assertThat(AssertProvider)", ""),
    ("void AbstractFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)", ""),
    ("Properties PropertiesLoaderUtils.loadProperties(Resource)", ""),
    ("Object ProjectMetadataRepository.findOne(Serializable)", ""),
    ("Page PostRepository.findByCategoryAndDraftFalseAndPublishAtBefore(PostCategory,Date,Pageable)", ""),
    ("PostBuilder PostBuilder.renderedSummary(String)", ""),
    ("String String.toLowerCase()", ""),
    ("GeoLocation GeoLocationFormatter.parse(String,Locale)", ""),
    ("AtomFeedView AtomFeedController.listPublishedPosts(Model,HttpServletResponse)", ""),
    ("void MockHttpServletRequest.addHeader(String,Object)", ""),
    ("int Matchers.anyInt()", ""),
    ("ServletContext FilterConfig.getServletContext()", ""),
    ("String DefaultTeamImporter.getNameForUser(String,GitHub)", ""),
    ("MemberProfileBuilder MemberProfileBuilder.name(String)", ""),
    ("ObjectArrayAssert Assertions.assertThat(java.lang.Object[])", ""),
    ("Comparator Collections.reverseOrder(Comparator)", ""),
    ("GitHubConnectionFactory GitHubConfig.gitHubConnectionFactory()", ""),
    ("AbstractIterableAssert AbstractIterableAssert.anySatisfy(Consumer)", ""),
    ("ObjectArrayAssert ObjectArrayAssert.contains(java.lang.Object[])", ""),
    ("String String.format(String,java.lang.Object[])", ""),
    ("Object CachedRestClient.post(RestOperations,String,Class,String)", ""),
    ("String BlogController.listPublishedPostsForDate(int,int,int,int,Model)", ""),
    ("String Enum.name()", ""),
    ("String GuideHeader.getRepositoryName()", ""),
    ("long Matchers.anyLong()", ""),
    ("sagan.site.guides.GuideHeader[] Tutorials.findByProject(Project)", ""),
    ("String ProjectRelease.toString()", ""),
    ("String Project.getId()", ""),
    ("Stream Stream.map(Function)", ""),
    ("boolean PaginationInfo.equals(Object)", ""),
    ("byte[] FileCopyUtils.copyToByteArray(File)", ""),
    ("String ProjectRelease.getGroupId()", ""),
    ("MockHttpServletRequestBuilder MockHttpServletRequestBuilder.content(String)", ""),
    ("void Project.setStackOverflowTags(String)", ""),
    ("AbstractBooleanAssert Assertions.assertThat(boolean)", ""),
    ("void Project.setRawBootConfig(String)", ""),
    ("String Event.getSummary()", ""),
    ("void Tutorials.evictFromCache(String)", ""),
    ("void MvcConfig.addViewControllers(ViewControllerRegistry)", ""),
    ("String Topical.getTableOfContents()", ""),
    ("int MockHttpServletResponse.getStatus()", ""),
    ("List Project.getNonMostCurrentReleases()", ""),
    ("String GettingStartedGuide.getSshUrl()", ""),
    ("ResourceHandlerRegistration ResourceHandlerRegistration.addResourceLocations(java.lang.String[])", "")
])
