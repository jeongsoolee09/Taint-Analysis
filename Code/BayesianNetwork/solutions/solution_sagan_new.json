{
    "void BiConsumer.accept(Object,Object)": "non",
    "boolean ConfigurableEnvironment.acceptsProfiles(String[])": "non",
    "boolean Environment.acceptsProfiles(String[])": "non",
    "void ResourceSupport.add(Link)": "non",
    "boolean ArrayList.add(Object)": "non",
    "boolean List.add(Object)": "non",
    "boolean Set.add(Object)": "non",
    "void HttpHeaders.add(String,String)": "non",
    "void ConfigurableEnvironment.addActiveProfile(String)": "non",
    "boolean List.addAll(Collection)": "non",
    "boolean Set.addAll(Collection)": "non",
    "ExtendedModelMap ExtendedModelMap.addAttribute(String,Object)": "non",
    "Model Model.addAttribute(String,Object)": "non",
    "void AbstractCacheManager.addCache(Cache)": "non",
    "void ConnectionFactoryRegistry.addConnectionFactory(ConnectionFactory)": "non",
    "VersionResourceResolver VersionResourceResolver.addContentVersionStrategy(String[])": "non",
    "HttpSecurity HttpSecurity.addFilterAfter(Filter,Class)": "non",
    "HttpSecurity HttpSecurity.addFilterBefore(Filter,Class)": "non",
    "VersionResourceResolver VersionResourceResolver.addFixedVersionStrategy(String,String[])": "src",
    "void MockHttpServletRequest.addHeader(String,Object)": "non",
    "HeadersConfigurer HeadersConfigurer.addHeaderWriter(HeaderWriter)": "non",
    "void MockFilterConfig.addInitParameter(String,String)": "non",
    "void RegistrationBean.addInitParameter(String,String)": "non",
    "InterceptorRegistration InterceptorRegistry.addInterceptor(HandlerInterceptor)": "non",
    "void MutablePropertySources.addLast(PropertySource)": "non",
    "ModelAndView ModelAndView.addObject(String,Object)": "non",
    "ResourceChainRegistration ResourceChainRegistration.addResolver(ResourceResolver)": "non",
    "ResourceHandlerRegistration ResourceHandlerRegistry.addResourceHandler(String[])": "non",
    "ResourceHandlerRegistration ResourceHandlerRegistration.addResourceLocations(String[])": "non",
    "void ThymeleafViewResolver.addStaticVariable(String,Object)": "non",
    "void Throwable.addSuppressed(Throwable)": "non",
    "ViewControllerRegistration ViewControllerRegistry.addViewController(String)": "src",
    "RestTemplateBuilder RestTemplateBuilder.additionalInterceptors(ClientHttpRequestInterceptor[])": "non",
    "boolean Date.after(Date)": "non",
    "void RedisTemplate.afterPropertiesSet()": "non",
    "HttpSecurityBuilder ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry.and()": "non",
    "HeadersConfigurer HeadersConfigurer$CacheControlConfig.and()": "non",
    "HeadersConfigurer HeadersConfigurer$ContentTypeOptionsConfig.and()": "non",
    "HeadersConfigurer HeadersConfigurer$XXssConfig.and()": "non",
    "HttpSecurity HttpSecurity$RequestMatcherConfigurer.and()": "non",
    "SecurityBuilder SecurityConfigurerAdapter.and()": "non",
    "ResponseActions ResponseActions.andExpect(RequestMatcher)": "non",
    "ResultActions ResultActions.andExpect(ResultMatcher)": "non",
    "void ResponseActions.andRespond(ResponseCreator)": "non",
    "AnonymousConfigurer HttpSecurity.anonymous()": "non",
    "Object AbstractRequestMatcherRegistry.antMatchers(HttpMethod,String[])": "non",
    "Object AbstractRequestMatcherRegistry.antMatchers(String[])": "non",
    "Object ArgumentMatchers.any()": "non",
    "Object Matchers.any()": "non",
    "Object Matchers.any(Class)": "non",
    "int Matchers.anyInt()": "non",
    "long Matchers.anyLong()": "non",
    "boolean Stream.anyMatch(Predicate)": "non",
    "Object Matchers.anyObject()": "non",
    "Object AbstractRequestMatcherRegistry.anyRequest()": "non",
    "AbstractIterableAssert AbstractIterableAssert.anySatisfy(Consumer)": "san",
    "String Matchers.anyString()": "non",
    "StringBuilder StringBuilder.append(int)": "non",
    "StringBuilder StringBuilder.append(char)": "non",
    "StringBuilder StringBuilder.append(long)": "non",
    "StringBuilder StringBuilder.append(Object)": "non",
    "StringBuilder StringBuilder.append(String)": "non",
    "Matcher Matcher.appendReplacement(StringBuffer,String)": "non",
    "StringBuffer Matcher.appendTail(StringBuffer)": "non",
    "Object Function.apply(Object)": "non",
    "Object Matchers.argThat(Matcher)": "non",
    "String StringUtils.arrayToCommaDelimitedString(Object[])": "non",
    "String StringUtils.arrayToDelimitedString(Object[],String)": "non",
    "Link Traverson$TraversalBuilder.asLink()": "non",
    "List Arrays.asList(Object[])": "non",
    "void Assert.assertEquals(Object,Object)": "san",
    "void Assert.assertNotNull(Object)": "san",
    "AbstractBooleanAssert Assertions.assertThat(boolean)": "san",
    "Object Assertions.assertThat(AssertProvider)": "san",
    "AbstractComparableAssert Assertions.assertThat(Comparable)": "san",
    "IterableAssert Assertions.assertThat(Iterable)": "san",
    "ListAssert Assertions.assertThat(List)": "san",
    "ObjectAssert Assertions.assertThat(Object)": "san",
    "void Assert.assertThat(Object,Matcher)": "san",
    "void MatcherAssert.assertThat(Object,Matcher)": "san",
    "void MatcherAssertionErrors.assertThat(Object,Matcher)": "san",
    "AbstractCharSequenceAssert Assertions.assertThat(String)": "san",
    "AbstractStringAssert Assertions.assertThat(String)": "san",
    "void MatcherAssert.assertThat(String,Object,Matcher)": "san",
    "AbstractByteArrayAssert Assertions.assertThat(byte[])": "san",
    "AbstractObjectArrayAssert Assertions.assertThat(Object[])": "san",
    "ObjectArrayAssert Assertions.assertThat(Object[])": "san",
    "AbstractThrowableAssert Assertions.assertThatThrownBy(ThrowableAssert$ThrowingCallable)": "san",
    "void Assert.assertTrue(boolean)": "san",
    "void JsonPathExpectationsHelper.assertValue(String,Object)": "san",
    "ZonedDateTime Instant.atZone(ZoneId)": "non",
    "String Node.attr(String)": "non",
    "ResultMatcher ModelResultMatchers.attribute(String,Matcher)": "san",
    "ResultMatcher ModelResultMatchers.attribute(String,Object)": "san",
    "OptionsBuilder OptionsBuilder.attributes(Attributes)": "non",
    "ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry ExpressionUrlAuthorizationConfigurer$AuthorizedUrl.authenticated()": "non",
    "ExceptionHandlingConfigurer ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)": "non",
    "ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry HttpSecurity.authorizeRequests()": "non",
    "ResponseEntity$BodyBuilder ResponseEntity.badRequest()": "non",
    "OptionsBuilder OptionsBuilder.baseDir(File)": "non",
    "Object CloneableBean.beanClone(Object,Set)": "non",
    "boolean EqualsBean.beanEquals(Class,Object,Object)": "non",
    "int EqualsBean.beanHashCode(Object)": "san",
    "Element Document.body()": "non",
    "ResponseEntity ResponseEntity$BodyBuilder.body(Object)": "non",
    "CloseableHttpClient HttpClientBuilder.build()": "non",
    "ResponseEntity ResponseEntity$BodyBuilder.build()": "non",
    "ResponseEntity ResponseEntity$HeadersBuilder.build()": "non",
    "RestTemplate RestTemplateBuilder.build()": "non",
    "void AbstractFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)": "non",
    "HeadersConfigurer$CacheControlConfig HeadersConfigurer.cacheControl()": "non",
    "ResponseEntity$HeadersBuilder ResponseEntity$BodyBuilder.cacheControl(CacheControl)": "non",
    "Object ArgumentCaptor.capture()": "non",
    "char String.charAt(int)": "non",
    "void UrlRewriteFilter.checkConf(Conf)": "san",
    "Elements Element.children()": "non",
    "Set Element.classNames()": "non",
    "void SecurityContextHolder.clearContext()": "sin",
    "String System.clearProperty(String)": "sin",
    "Object Object.clone()": "non",
    "void FileOutputStream.close()": "non",
    "void InputStream.close()": "non",
    "void ZipFile.close()": "non",
    "Object Stream.collect(Collector)": "non",
    "Set StringUtils.commaDelimitedListToSet(String)": "non",
    "List AuthorityUtils.commaSeparatedStringToAuthorityList(String)": "non",
    "int LocalDate.compareTo(ChronoLocalDate)": "non",
    "int Long.compareTo(Long)": "non",
    "int String.compareTo(String)": "non",
    "Comparator Comparator.comparingInt(ToIntFunction)": "non",
    "Pattern Pattern.compile(String)": "non",
    "String String.concat(String)": "non",
    "void SpringApplication.configureProfiles(ConfigurableEnvironment,String[])": "non",
    "ServiceConnectionFactory AbstractCloudConfig.connectionFactory()": "non",
    "boolean String.contains(CharSequence)": "non",
    "boolean List.contains(Object)": "non",
    "boolean Set.contains(Object)": "non",
    "String Matchers.contains(String)": "non",
    "AbstractCharSequenceAssert AbstractCharSequenceAssert.contains(CharSequence[])": "san",
    "Matcher Matchers.contains(Object[])": "non",
    "ObjectArrayAssert ObjectArrayAssert.contains(Object[])": "san",
    "IterableAssert IterableAssert.containsExactly(Object[])": "san",
    "AbstractIterableAssert AbstractIterableAssert.containsExactlyInAnyOrder(Object[])": "san",
    "AbstractObjectArrayAssert AbstractObjectArrayAssert.containsExactlyInAnyOrder(Object[])": "san",
    "boolean Map.containsKey(Object)": "non",
    "AbstractIterableAssert AbstractIterableAssert.containsOnly(Object[])": "san",
    "Matcher CoreMatchers.containsString(String)": "non",
    "Matcher Matchers.containsString(String)": "non",
    "ContentResultMatchers MockMvcResultMatchers.content()": "non",
    "MockHttpServletRequestBuilder MockHttpServletRequestBuilder.content(String)": "non",
    "MockHttpServletRequestBuilder MockHttpServletRequestBuilder.contentType(MediaType)": "non",
    "HeadersConfigurer$ContentTypeOptionsConfig HeadersConfigurer.contentTypeOptions()": "non",
    "void Asciidoctor.convert(Reader,Writer,OptionsBuilder)": "non",
    "String Asciidoctor.convert(String,OptionsBuilder)": "sin",
    "int StreamUtils.copy(InputStream,OutputStream)": "non",
    "byte[] FileCopyUtils.copyToByteArray(File)": "non",
    "byte[] StreamUtils.copyToByteArray(InputStream)": "non",
    "String StreamUtils.copyToString(InputStream,Charset)": "non",
    "String FileCopyUtils.copyToString(Reader)": "non",
    "Asciidoctor Asciidoctor$Factory.create()": "non",
    "HttpClientBuilder HttpClientBuilder.create()": "non",
    "URI URI.create(String)": "non",
    "ConnectionRepository InMemoryUsersConnectionRepository.createConnectionRepository(String)": "src",
    "Font Font.createFont(int,InputStream)": "non",
    "File File.createTempFile(String,String)": "sin",
    "CsrfConfigurer HttpSecurity.csrf()": "non",
    "RequestAttributes RequestContextHolder.currentRequestAttributes()": "non",
    "long System.currentTimeMillis()": "non",
    "byte[] Base64$Decoder.decode(String)": "non",
    "void PostRepository.delete(Object)": "sin",
    "void ProjectMetadataRepository.delete(Serializable)": "sin",
    "void SpringToolsPlatformRepository.delete(Serializable)": "sin",
    "void File.deleteOnExit()": "sin",
    "boolean FileSystemUtils.deleteRecursively(File)": "sin",
    "Font Font.deriveFont(int,float)": "non",
    "HttpSecurityBuilder AbstractHttpConfigurer.disable()": "non",
    "void Graphics.dispose()": "non",
    "void FilterChain.doFilter(ServletRequest,ServletResponse)": "non",
    "byte[] Mac.doFinal(byte[])": "non",
    "ResultMatcher JsonPathResultMatchers.doesNotExist()": "non",
    "ResponseEntity$HeadersBuilder ResponseEntity$BodyBuilder.eTag(String)": "non",
    "Matcher Matchers.empty()": "non",
    "Optional Optional.empty()": "non",
    "List Collections.emptyList()": "non",
    "Set Collections.emptySet()": "non",
    "String MessageDigestPasswordEncoder.encodePassword(String,Object)": "san",
    "String Base64$Encoder.encodeToString(byte[])": "non",
    "boolean String.endsWith(String)": "non",
    "Enumeration ZipFile.entries()": "src",
    "long Matchers.eq(long)": "non",
    "Object Matchers.eq(Object)": "non",
    "Matcher CoreMatchers.equalTo(Object)": "non",
    "Matcher IsEqual.equalTo(Object)": "non",
    "Matcher Matchers.equalTo(Object)": "non",
    "boolean Enum.equals(Object)": "non",
    "boolean LocalDate.equals(Object)": "non",
    "boolean Long.equals(Object)": "non",
    "boolean Object.equals(Object)": "non",
    "boolean String.equals(Object)": "non",
    "boolean Objects.equals(Object,Object)": "non",
    "boolean String.equalsIgnoreCase(String)": "non",
    "void Log.error(Object)": "sin",
    "void Log.error(Object,Throwable)": "non",
    "void Logger.error(String,Throwable)": "san",
    "ExceptionHandlingConfigurer HttpSecurity.exceptionHandling()": "non",
    "ClientHttpResponse ClientHttpRequestExecution.execute(HttpRequest,byte[])": "sin",
    "boolean File.exists()": "src",
    "boolean Resource.exists()": "non",
    "void ExpectedException.expect(Class)": "san",
    "ResponseActions MockRestServiceServer.expect(RequestMatcher)": "san",
    "AbstractListAssert AbstractIterableAssert.extracting(String)": "san",
    "ObjectArrayAssert AbstractObjectArrayAssert.extracting(String)": "san",
    "AbstractListAssert AbstractObjectAssert.extracting(String[])": "san",
    "Stream Stream.filter(Predicate)": "non",
    "boolean Matcher.find()": "non",
    "List PostRepository.findAll()": "src",
    "List ProjectGroupRepository.findAll()": "src",
    "List SpringToolsPlatformRepository.findAll()": "src",
    "Page PostRepository.findAll(Pageable)": "src",
    "List ProjectMetadataRepository.findAll(Sort)": "src",
    "Optional Stream.findFirst()": "non",
    "Object PostRepository.findOne(Serializable)": "src",
    "Object ProjectMetadataRepository.findOne(Serializable)": "src",
    "Object SpringToolsPlatformRepository.findOne(Serializable)": "src",
    "Connection ConnectionRepository.findPrimaryConnection(Class)": "src",
    "ICalendar ChainingTextStringParser.first()": "non",
    "Object Alternatives.firstNotNull(Object[])": "non",
    "Optional Optional.flatMap(Function)": "non",
    "float Float.floatValue()": "non",
    "Traverson$TraversalBuilder Traverson$TraversalBuilder.follow(Hop)": "non",
    "Traverson$TraversalBuilder Traverson.follow(String[])": "non",
    "Traverson$TraversalBuilder Traverson$TraversalBuilder.follow(String[])": "non",
    "ArgumentCaptor ArgumentCaptor.forClass(Class)": "non",
    "void Map.forEach(BiConsumer)": "non",
    "void ArrayList.forEach(Consumer)": "non",
    "void Iterable.forEach(Consumer)": "non",
    "void Stream.forEach(Consumer)": "non",
    "Charset Charset.forName(String)": "non",
    "String DateFormat.format(Date)": "non",
    "String String.format(Locale,String,Object[])": "non",
    "String String.format(String,Object[])": "non",
    "HeadersConfigurer$FrameOptionsConfig HeadersConfigurer.frameOptions()": "non",
    "UriComponentsBuilder UriComponentsBuilder.fromHttpUrl(String)": "non",
    "Object Optional.get()": "non",
    "Object ArrayList.get(int)": "non",
    "Object List.get(int)": "non",
    "List HttpHeaders.get(Object)": "non",
    "Object LinkedHashMap.get(Object)": "non",
    "Object Map.get(Object)": "non",
    "MockHttpServletRequestBuilder MockMvcRequestBuilders.get(String,Object[])": "sin",
    "String File.getAbsolutePath()": "src",
    "List Feed.getAlternateLinks()": "src",
    "Annotation Class.getAnnotation(Class)": "non",
    "Object Connection.getApi()": "src",
    "Object[] InvocationOnMock.getArguments()": "non",
    "Authentication SecurityContext.getAuthentication()": "src",
    "String GitHubUser.getAvatarUrl()": "src",
    "Object HandlerMethod.getBean()": "non",
    "Object HttpEntity.getBody()": "non",
    "byte[] String.getBytes()": "non",
    "byte[] String.getBytes(Charset)": "non",
    "Cache AbstractCacheManager.getCache(String)": "src",
    "String HttpHeaders.getCacheControl()": "non",
    "Collection AbstractCacheManager.getCacheNames()": "non",
    "Class Object.getClass()": "non",
    "ClassLoader Class.getClassLoader()": "non",
    "Cloud CloudFactory.getCloud()": "non",
    "List Page.getContent()": "non",
    "Collection Resources.getContent()": "non",
    "String MockHttpServletResponse.getContentAsString()": "non",
    "SecurityContext SecurityContextHolder.getContext()": "non",
    "DateEnd VEvent.getDateEnd()": "non",
    "DateStart VEvent.getDateStart()": "non",
    "Base64$Decoder Base64.getDecoder()": "non",
    "Locale Locale.getDefault()": "non",
    "List Traverson.getDefaultMessageConverters(MediaType[])": "non",
    "Description VEvent.getDescription()": "non",
    "String Connection.getDisplayName()": "non",
    "String HttpHeaders.getETag()": "non",
    "Base64$Encoder Base64.getEncoder()": "non",
    "List ICalendar.getEvents()": "src",
    "FontMetrics Graphics.getFontMetrics()": "non",
    "ResponseEntity RestOperations.getForEntity(String,Class,Object[])": "src",
    "ResponseEntity RestTemplate.getForEntity(String,Class,Object[])": "src",
    "Object RestOperations.getForObject(String,Class,Object[])": "src",
    "Object RestTemplate.getForObject(String,Class,Object[])": "src",
    "Graphics BufferedImage.getGraphics()": "non",
    "HttpHeaders HttpEntity.getHeaders()": "non",
    "HttpHeaders HttpRequest.getHeaders()": "non",
    "String URI.getHost()": "non",
    "String Link.getHref()": "sin",
    "String Entry.getId()": "non",
    "String Feed.getId()": "src",
    "Long GitHubUser.getId()": "src",
    "long GitHubUserProfile.getId()": "non",
    "String FilterConfig.getInitParameter(String)": "non",
    "InputStream ClassPathResource.getInputStream()": "src",
    "InputStream ZipFile.getInputStream(ZipEntry)": "src",
    "Mac Mac.getInstance(String)": "non",
    "Calendar Calendar.getInstance(TimeZone)": "non",
    "ConnectionKey Connection.getKey()": "non",
    "int HeaderNode.getLevel()": "non",
    "Location VEvent.getLocation()": "non",
    "Log LogFactory.getLog(Class)": "non",
    "Logger LoggerFactory.getLogger(Class)": "non",
    "String GitHubUser.getLogin()": "src",
    "String Throwable.getMessage()": "non",
    "String Authentication.getName()": "non",
    "String File.getName()": "src",
    "String GitHubUser.getName()": "non",
    "String GitHubUserProfile.getName()": "src",
    "String Principal.getName()": "non",
    "String ZipEntry.getName()": "src",
    "int Page.getNumber()": "non",
    "List Feed.getOtherLinks()": "src",
    "String File.getParent()": "src",
    "String URI.getPath()": "non",
    "String URL.getPath()": "src",
    "String UrlPathHelper.getPathWithinApplication(HttpServletRequest)": "src",
    "Object Authentication.getPrincipal()": "non",
    "String GitHubUserProfile.getProfileImageUrl()": "src",
    "String Properties.getProperty(String)": "non",
    "String System.getProperty(String)": "src",
    "MutablePropertySources ConfigurableEnvironment.getPropertySources()": "src",
    "String ConnectionKey.getProviderUserId()": "non",
    "String MockHttpServletResponse.getRedirectedUrl()": "src",
    "HttpServletRequest ServletRequestAttributes.getRequest()": "non",
    "String HttpServletRequest.getRequestURI()": "non",
    "StringBuffer HttpServletRequest.getRequestURL()": "src",
    "URL Class.getResource(String)": "non",
    "URL ClassLoader.getResource(String)": "non",
    "Resource ResourcePatternResolver.getResource(String)": "non",
    "InputStream ClassLoader.getResourceAsStream(String)": "non",
    "Resource[] ResourcePatternResolver.getResources(String)": "non",
    "MockHttpServletResponse MvcResult.getResponse()": "src",
    "String HttpServletRequest.getServerName()": "src",
    "Object Cloud.getServiceConnector(String,Class,ServiceConnectorConfig)": "non",
    "ServletContext FilterConfig.getServletContext()": "non",
    "int Page.getSize()": "non",
    "Sort Page.getSort()": "non",
    "int MockHttpServletResponse.getStatus()": "non",
    "HttpStatus ResponseEntity.getStatusCode()": "non",
    "Summary VEvent.getSummary()": "non",
    "String TextNode.getText()": "non",
    "Date Calendar.getTime()": "non",
    "TimeZone TimeZone.getTimeZone(String)": "non",
    "String Feed.getTitle()": "non",
    "long Page.getTotalElements()": "non",
    "int Page.getTotalPages()": "non",
    "String VerbatimNode.getType()": "non",
    "URL Resource.getURL()": "sin",
    "Date Feed.getUpdated()": "src",
    "String AbstractUrlBasedView.getUrl()": "non",
    "GitHubUserProfile UserOperations.getUserProfile()": "src",
    "String GitHubUserProfile.getUsername()": "src",
    "Object ArgumentCaptor.getValue()": "non",
    "Object ValuedProperty.getValue()": "non",
    "BDDMockito$BDDMyOngoingStubbing BDDMockito.given(Object)": "non",
    "String Matcher.group()": "non",
    "String Matcher.group(int)": "non",
    "Collector Collectors.groupingBy(Function)": "non",
    "boolean BindingResult.hasErrors()": "non",
    "Matcher Matchers.hasItems(Object[])": "non",
    "AbstractThrowableAssert AbstractThrowableAssert.hasMessage(String)": "san",
    "boolean Enumeration.hasMoreElements()": "non",
    "boolean Iterator.hasNext()": "non",
    "AbstractIterableAssert AbstractIterableAssert.hasSize(int)": "san",
    "boolean StringUtils.hasText(String)": "non",
    "void Assert.hasText(String,String)": "san",
    "int Objects.hash(Object[])": "san",
    "int Long.hashCode()": "san",
    "int Object.hashCode()": "san",
    "int String.hashCode()": "san",
    "RequestMatcher MockRestRequestMatchers.header(String,String[])": "san",
    "OptionsBuilder OptionsBuilder.headerFooter(boolean)": "non",
    "HeadersConfigurer HttpSecurity.headers()": "non",
    "DefaultResponseCreator DefaultResponseCreator.headers(HttpHeaders)": "non",
    "String Elements.html()": "non",
    "int String.indexOf(String)": "non",
    "void Log.info(Object)": "sin",
    "void Logger.info(String)": "sin",
    "void Logger.info(String,Object)": "sin",
    "void UrlRewriteFilter.init(FilterConfig)": "non",
    "void Mac.init(Key)": "non",
    "void MockitoAnnotations.initMocks(Object)": "non",
    "ProjectionIO XBProjector.io()": "non",
    "Matcher CoreMatchers.is(Matcher)": "non",
    "Matcher Matchers.is(Matcher)": "non",
    "Matcher CoreMatchers.is(Object)": "san",
    "Matcher Is.is(Object)": "non",
    "Matcher Matchers.is(Object)": "non",
    "boolean LocalDate.isAfter(ChronoLocalDate)": "non",
    "boolean Authentication.isAuthenticated()": "non",
    "boolean LocalDate.isBefore(ChronoLocalDate)": "non",
    "boolean MediaType.isCompatibleWith(MediaType)": "non",
    "boolean File.isDirectory()": "sin",
    "boolean ZipEntry.isDirectory()": "src",
    "void AbstractCharSequenceAssert.isEmpty()": "san",
    "void AbstractIterableAssert.isEmpty()": "san",
    "void AbstractObjectArrayAssert.isEmpty()": "san",
    "ResultMatcher JsonPathResultMatchers.isEmpty()": "non",
    "boolean List.isEmpty()": "non",
    "boolean String.isEmpty()": "non",
    "boolean StringUtils.isEmpty(Object)": "non",
    "boolean StringUtils.isEmpty(String)": "non",
    "AbstractAssert AbstractAssert.isEqualTo(Object)": "san",
    "JsonContentAssert JsonContentAssert.isEqualToJson(String,Class)": "non",
    "AbstractBooleanAssert AbstractBooleanAssert.isFalse()": "san",
    "boolean File.isFile()": "src",
    "boolean Page.isFirst()": "non",
    "AbstractAssert AbstractAssert.isInstanceOf(Class)": "san",
    "ResultMatcher StatusResultMatchers.isNotFound()": "san",
    "AbstractIterableAssert AbstractIterableAssert.isNotNull()": "san",
    "ResultMatcher StatusResultMatchers.isOk()": "san",
    "boolean Optional.isPresent()": "non",
    "AbstractBooleanAssert AbstractBooleanAssert.isTrue()": "san",
    "void Assert.isTrue(boolean,String)": "san",
    "ResultMatcher StatusResultMatchers.isUnsupportedMediaType()": "san",
    "Iterator ArrayList.iterator()": "non",
    "Iterator List.iterator()": "non",
    "Iterator Page.iterator()": "non",
    "String String.join(CharSequence,Iterable)": "non",
    "JsonPathResultMatchers MockMvcResultMatchers.jsonPath(String,Object[])": "non",
    "int String.lastIndexOf(String)": "non",
    "int String.length()": "non",
    "ControllerLinkBuilder ControllerLinkBuilder.linkTo(Object)": "non",
    "File[] File.listFiles()": "src",
    "Object Yaml.load(String)": "src",
    "Properties PropertiesLoaderUtils.loadProperties(Resource)": "non",
    "LogoutConfigurer HttpSecurity.logout()": "non",
    "LogoutConfigurer LogoutConfigurer.logoutRequestMatcher(RequestMatcher)": "non",
    "LogoutConfigurer LogoutConfigurer.logoutSuccessUrl(String)": "non",
    "long Long.longValue()": "non",
    "Optional Optional.map(Function)": "non",
    "Stream Stream.map(Function)": "non",
    "IntStream Stream.mapToInt(ToIntFunction)": "non",
    "Matcher Pattern.matcher(CharSequence)": "non",
    "boolean Matcher.matches()": "non",
    "boolean String.matches(String)": "non",
    "OptionalInt IntStream.max()": "non",
    "long Math.max(long,long)": "non",
    "CacheControl CacheControl.maxAge(long,TimeUnit)": "non",
    "RestTemplateBuilder RestTemplateBuilder.messageConverters(Collection)": "non",
    "RequestMatcher MockRestRequestMatchers.method(HttpMethod)": "san",
    "Object ControllerLinkBuilder.methodOn(Class,Object[])": "non",
    "int Math.min(int,int)": "non",
    "long Math.min(long,long)": "non",
    "Instant Instant.minus(TemporalAmount)": "non",
    "boolean File.mkdir()": "sin",
    "Object Mockito.mock(Class)": "non",
    "ModelResultMatchers MockMvcResultMatchers.model()": "non",
    "String Enum.name()": "non",
    "VerificationMode Mockito.never()": "san",
    "Object Iterator.next()": "non",
    "Object Enumeration.nextElement()": "non",
    "ExpectedException ExpectedException.none()": "non",
    "ResponseEntity$HeadersBuilder ResponseEntity.notFound()": "non",
    "void Assert.notNull(Object,String)": "san",
    "Matcher Matchers.notNullValue()": "non",
    "LocalDate LocalDate.now()": "src",
    "Matcher CoreMatchers.nullValue()": "non",
    "Matcher Matchers.nullValue()": "non",
    "Optional Optional.of(Object)": "non",
    "Duration Duration.ofMinutes(long)": "non",
    "ResponseEntity$BodyBuilder ResponseEntity.ok()": "non",
    "ResponseEntity ResponseEntity.ok(Object)": "non",
    "InputStream URL.openStream()": "src",
    "OptionsBuilder OptionsBuilder.options()": "non",
    "int OptionalInt.orElse(int)": "non",
    "Object Optional.orElse(Object)": "non",
    "int Enum.ordinal()": "non",
    "String Node.outerHtml()": "non",
    "Element Element.parent()": "non",
    "LocalDate LocalDate.parse(CharSequence)": "san",
    "ChainingTextStringParser Biweekly.parse(String)": "san",
    "Date DateFormat.parse(String)": "san",
    "Document Jsoup.parse(String)": "san",
    "RootNode PegDownProcessor.parseMarkdown(char[])": "san",
    "MediaType MediaType.parseMediaType(String)": "san",
    "ResultActions MockMvc.perform(RequestBuilder)": "src",
    "ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry ExpressionUrlAuthorizationConfigurer$AuthorizedUrl.permitAll()": "non",
    "LocalDate LocalDate.plusDays(long)": "non",
    "MockHttpServletRequestBuilder MockMvcRequestBuilders.post(String,Object[])": "non",
    "Object RestOperations.postForObject(String,Object,Class,Object[])": "sin",
    "Object RestTemplate.postForObject(String,Object,Class,Object[])": "sin",
    "byte[] RedisCachePrefix.prefix(String)": "non",
    "Printer Printer.print(char)": "sin",
    "Printer Printer.print(String)": "sin",
    "String ToHtmlSerializer.printChildrenToString(SuperNode)": "sin",
    "Printer Printer.printEncoded(String)": "non",
    "String DatatypeConverter.printHexBinary(byte[])": "sin",
    "void ToHtmlSerializer.printLink(LinkRenderer$Rendering)": "sin",
    "Printer Printer.println()": "sin",
    "Object Map.put(Object,Object)": "non",
    "UriComponentsBuilder UriComponentsBuilder.queryParam(String,Object[])": "non",
    "String Pattern.quote(String)": "non",
    "Object XBUrlIO.read(Class)": "src",
    "Object AbstractJsonMarshalTester.readObject(String)": "src",
    "Object ObjectMapper.readValue(String,Class)": "san",
    "RedisConnectionFactory ServiceConnectionFactory.redisConnectionFactory()": "non",
    "void BindingResult.rejectValue(String,String,String)": "non",
    "Hop Hop.rel(String)": "non",
    "void Iterator.remove()": "non",
    "void Node.remove()": "non",
    "Object List.remove(int)": "non",
    "boolean List.removeAll(Collection)": "non",
    "String String.replace(char,char)": "non",
    "String String.replace(CharSequence,CharSequence)": "non",
    "String String.replaceAll(String,String)": "non",
    "String String.replaceFirst(String,String)": "non",
    "HttpSecurity$RequestMatcherConfigurer HttpSecurity.requestMatchers()": "non",
    "RequestMatcher MockRestRequestMatchers.requestTo(String)": "san",
    "ChannelSecurityConfigurer$ChannelRequestMatcherRegistry HttpSecurity.requiresChannel()": "non",
    "ChannelSecurityConfigurer$ChannelRequestMatcherRegistry ChannelSecurityConfigurer$RequiresChannelUrl.requiresSecure()": "non",
    "ResourceChainRegistration ResourceHandlerRegistration.resourceChain(boolean)": "non",
    "RestOperations GitHub.restOperations()": "non",
    "Comparator Collections.reverseOrder(Comparator)": "non",
    "RestTemplateBuilder RestTemplateBuilder.rootUri(String)": "non",
    "ConfigurableApplicationContext SpringApplication.run(Class,String[])": "non",
    "ConfigurableApplicationContext SpringApplication.run(String[])": "non",
    "OptionsBuilder OptionsBuilder.safe(SafeMode)": "non",
    "Object PostRepository.save(Object)": "sin",
    "Object ProjectMetadataRepository.save(Object)": "sin",
    "Object SpringToolsPlatformRepository.save(Object)": "sin",
    "Object TeamRepository.save(Object)": "sin",
    "Elements Element.select(String)": "non",
    "Elements Elements.select(String)": "non",
    "void Calendar.set(int,int,int)": "non",
    "Object List.set(int,Object)": "non",
    "void HttpHeaders.set(String,String)": "non",
    "void HttpHeaders.setAccept(List)": "non",
    "void Attributes.setAllowUriRead(boolean)": "sin",
    "void Entry.setAlternateLinks(List)": "non",
    "void Feed.setAlternateLinks(List)": "non",
    "void Attributes.setAnchors(boolean)": "non",
    "void Attributes.setAttribute(String,Object)": "non",
    "void SecurityContext.setAuthentication(Authentication)": "sin",
    "void AbstractAuthenticationProcessingFilter.setAuthenticationManager(AuthenticationManager)": "non",
    "void AbstractAuthenticationProcessingFilter.setAuthenticationSuccessHandler(AuthenticationSuccessHandler)": "non",
    "void Entry.setAuthors(List)": "non",
    "void SimpleCacheManager.setCaches(Collection)": "non",
    "void Entry.setCategories(List)": "non",
    "void HttpServletResponse.setCharacterEncoding(String)": "non",
    "void RedisAccessor.setConnectionFactory(RedisConnectionFactory)": "non",
    "void InMemoryUsersConnectionRepository.setConnectionSignUp(ConnectionSignUp)": "non",
    "void HttpHeaders.setContentType(MediaType)": "non",
    "void Entry.setContents(List)": "non",
    "void Locale.setDefault(Locale)": "non",
    "void AbstractAuthenticationTargetUrlRequestHandler.setDefaultTargetUrl(String)": "non",
    "void ReflectionTestUtils.setField(Object,String,Object)": "non",
    "void FilterRegistrationBean.setFilter(Filter)": "non",
    "void Graphics.setFont(Font)": "non",
    "void LoginUrlAuthenticationEntryPoint.setForceHttps(boolean)": "non",
    "void RedisTemplate.setHashKeySerializer(RedisSerializer)": "non",
    "void RedisTemplate.setHashValueSerializer(RedisSerializer)": "non",
    "void Feed.setIcon(String)": "sin",
    "void Entry.setId(String)": "sin",
    "void Feed.setId(String)": "non",
    "void RedisTemplate.setKeySerializer(RedisSerializer)": "non",
    "void Category.setLabel(String)": "non",
    "void Person.setName(String)": "non",
    "void RegistrationBean.setName(String)": "non",
    "XMLFactoriesConfig DefaultXMLFactoriesConfig.setNamespacePhilosophy(DefaultXMLFactoriesConfig$NamespacePhilosophy)": "non",
    "void Jackson2JsonRedisSerializer.setObjectMapper(ObjectMapper)": "non",
    "void Feed.setOtherLinks(List)": "non",
    "String System.setProperty(String,String)": "sin",
    "void HstsHeaderWriter.setRequestMatcher(RequestMatcher)": "non",
    "void MockHttpServletRequest.setRequestURI(String)": "non",
    "Traverson Traverson.setRestOperations(RestOperations)": "non",
    "void OAuth2ConnectionFactory.setScope(String)": "non",
    "void MockHttpServletRequest.setServletPath(String)": "non",
    "void ProviderSignInController.setSignInUrl(String)": "non",
    "void Attributes.setSkipFrontMatter(boolean)": "non",
    "void RedirectView.setStatusCode(HttpStatus)": "non",
    "void Category.setTerm(String)": "non",
    "void DateFormat.setTimeZone(TimeZone)": "non",
    "void Entry.setTitle(String)": "non",
    "void Feed.setTitle(String)": "sin",
    "void Content.setType(String)": "non",
    "void Entry.setUpdated(Date)": "non",
    "void Feed.setUpdated(Date)": "non",
    "void AbstractUrlBasedView.setUrl(String)": "non",
    "void Content.setValue(String)": "non",
    "void RedisTemplate.setValueSerializer(RedisSerializer)": "non",
    "void ViewControllerRegistration.setViewName(String)": "non",
    "Set Collections.singleton(Object)": "non",
    "List Collections.singletonList(Object)": "non",
    "Map Collections.singletonMap(Object,Object)": "non",
    "int List.size()": "non",
    "void List.sort(Comparator)": "non",
    "Stream Stream.sorted()": "non",
    "String[] String.split(String)": "non",
    "Object Mockito.spy(Object)": "non",
    "boolean String.startsWith(String)": "non",
    "StatusResultMatchers MockMvcResultMatchers.status()": "non",
    "ResponseEntity$BodyBuilder ResponseEntity.status(HttpStatus)": "non",
    "Stream Collection.stream()": "non",
    "Stream Elements.stream()": "non",
    "Stream Arrays.stream(Object[])": "non",
    "ResultMatcher ContentResultMatchers.string(String)": "non",
    "int FontMetrics.stringWidth(String)": "non",
    "List List.subList(int,int)": "non",
    "String String.substring(int)": "non",
    "String String.substring(int,int)": "non",
    "ZoneId ZoneId.systemDefault()": "src",
    "boolean Predicate.test(Object)": "non",
    "String Element.text()": "non",
    "OngoingStubbing OngoingStubbing.thenAnswer(Answer)": "non",
    "OngoingStubbing OngoingStubbing.thenReturn(Object)": "non",
    "VerificationMode Mockito.times(int)": "san",
    "Object[] Stream.toArray(IntFunction)": "non",
    "Object[] Collection.toArray(Object[])": "non",
    "Object[] List.toArray(Object[])": "non",
    "char[] String.toCharArray()": "non",
    "String ToHtmlSerializer.toHtml(RootNode)": "non",
    "Instant Date.toInstant()": "non",
    "Collector Collectors.toList()": "non",
    "LocalDate ZonedDateTime.toLocalDate()": "non",
    "String String.toLowerCase()": "non",
    "Object Traverson$TraversalBuilder.toObject(Class)": "non",
    "Object Traverson$TraversalBuilder.toObject(ParameterizedTypeReference)": "non",
    "List ResourceAssemblerSupport.toResources(Iterable)": "non",
    "String Elements.toString()": "non",
    "String Enum.toString()": "non",
    "String LocalDate.toString()": "non",
    "String Long.toString()": "non",
    "String MimeType.toString()": "non",
    "String Object.toString()": "non",
    "String StringBuffer.toString()": "non",
    "String StringBuilder.toString()": "non",
    "String StringWriter.toString()": "non",
    "String URI.toString()": "non",
    "String URL.toString()": "non",
    "String ToStringBean.toString(Class,Object)": "non",
    "String LocalDate.toString(String)": "non",
    "String YearMonth.toString(String)": "non",
    "String UriComponentsBuilder.toUriString()": "non",
    "String[] StringUtils.tokenizeToStringArray(String,String)": "non",
    "String String.trim()": "non",
    "List Collections.unmodifiableList(List)": "non",
    "XBUrlIO ProjectionIO.url(String)": "non",
    "UserOperations GitHub.userOperations()": "non",
    "UserOperations GitHubTemplate.userOperations()": "non",
    "int HttpStatus.value()": "non",
    "ResultMatcher JsonPathResultMatchers.value(Matcher)": "non",
    "ResultMatcher JsonPathResultMatchers.value(Object)": "san",
    "Boolean Boolean.valueOf(boolean)": "non",
    "Integer Integer.valueOf(int)": "non",
    "Long Long.valueOf(long)": "non",
    "Float Float.valueOf(float)": "non",
    "Enum Enum.valueOf(Class,String)": "non",
    "Float Float.valueOf(String)": "non",
    "Long Long.valueOf(String)": "non",
    "Object Mockito.verify(Object)": "san",
    "Object Mockito.verify(Object,VerificationMode)": "san",
    "void ToHtmlSerializer.visitChildren(SuperNode)": "non",
    "void Log.warn(Object)": "sin",
    "void Logger.warn(String)": "sin",
    "OngoingStubbing Mockito.when(Object)": "non",
    "BDDMockito$BDDMyOngoingStubbing BDDMockito$BDDMyOngoingStubbing.will(Answer)": "non",
    "BDDMockito$BDDMyOngoingStubbing BDDMockito$BDDMyOngoingStubbing.willReturn(Object)": "non",
    "BDDMockito$BDDMyOngoingStubbing BDDMockito$BDDMyOngoingStubbing.willThrow(Class[])": "non",
    "BDDMockito$BDDMyOngoingStubbing BDDMockito$BDDMyOngoingStubbing.willThrow(Throwable[])": "non",
    "LinkRenderer$Rendering LinkRenderer$Rendering.withAttribute(String,String)": "non",
    "Hop Hop.withParameter(String,Object)": "non",
    "Link LinkBuilderSupport.withRel(String)": "non",
    "Link LinkBuilderSupport.withSelfRel()": "non",
    "DefaultResponseCreator MockRestResponseCreators.withStatus(HttpStatus)": "non",
    "DefaultResponseCreator MockRestResponseCreators.withSuccess(Resource,MediaType)": "non",
    "DefaultResponseCreator MockRestResponseCreators.withSuccess(String,MediaType)": "non",
    "JsonContent AbstractJsonMarshalTester.write(Object)": "non",
    "void FileOutputStream.write(byte[])": "sin",
    "HeadersConfigurer$XXssConfig HeadersConfigurer.xssProtection()": "non"
}
