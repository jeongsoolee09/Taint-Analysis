<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: java.lang.String lambda$getServerPort$3(java.lang.String)> ->_CWE079_
<org.springframework.r2dbc.connection.SingleConnectionFactory: io.r2dbc.spi.Connection getCloseSuppressingConnectionProxy(io.r2dbc.spi.Connection)> ->_CWE079_
<org.springframework.test.context.support.AbstractTestContextBootstrapper: java.lang.String lambda$buildMergedContextConfiguration$0(org.springframework.test.context.ContextLoader,java.util.List)> ->_CWE079_
<org.springframework.format.datetime.standard.YearMonthFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.expression.spel.CodeFlow: java.lang.String createSignatureDescriptor(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.transaction.interceptor.RollbackRuleAttribute: int getDepth(java.lang.Class,int)> ->_CWE079_
<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.String getAttributeDescription(java.beans.PropertyDescriptor,java.lang.String)> ->_CWE079_
<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: java.lang.String getClassName(java.lang.Object,java.lang.String)> ->_CWE079_
<org.springframework.cache.config.CacheAdviceParser: java.lang.String access$000(org.w3c.dom.Element,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.PatternsRequestCondition: org.springframework.web.servlet.mvc.condition.PatternsRequestCondition combine(org.springframework.web.servlet.mvc.condition.PatternsRequestCondition)> ->_CWE079_
<org.springframework.ejb.config.RemoteStatelessSessionBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.core.convert.support.StringToPropertiesConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver: java.lang.String lambda$resolveArgument$1(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.core.convert.support.ConversionUtils: java.lang.String lambda$getEnumType$0(java.lang.Class)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String resolveAndCacheLookupPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodePath(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.format.support.FormattingConversionService: java.lang.String lambda$getFieldType$0(java.lang.Class,java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockMultipartHttpServletRequest: java.lang.String getMultipartContentType(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: java.lang.String lambda$logRequest$2(javax.servlet.http.HttpServletRequest,java.lang.Boolean)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver: java.lang.String getPartName(org.springframework.core.MethodParameter,org.springframework.web.bind.'annotation'.RequestPart)> ->_CWE079_
<org.springframework.web.method.annotation.ModelFactory: java.lang.String getNameForReturnValue(java.lang.Object,org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.asm.Type: java.lang.String getInternalName(java.lang.Class)> ->_CWE079_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.http.client.InterceptingClientHttpRequestFactory: org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.client.ClientHttpRequestFactory)> ->_CWE079_
<org.springframework.util.FileCopyUtils: java.lang.String copyToString(java.io.Reader)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: java.lang.String getResourceLocation(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.resource.AbstractFileNameVersionStrategy: java.lang.String extractVersion(java.lang.String)> ->_CWE079_
<org.springframework.jms.remoting.JmsInvokerClientInterceptor: javax.jms.Message doExecuteRequest(javax.jms.Session,javax.jms.Queue,javax.jms.Message)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder POST(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.cglib.core.AbstractClassGenerator: java.lang.String generateClassName(org.springframework.cglib.core.Predicate)> ->_CWE079_
<org.springframework.test.web.client.SimpleRequestExpectationManager: org.springframework.test.web.client.RequestExpectation matchRequest(org.springframework.http.client.ClientHttpRequest)> ->_CWE079_
<org.springframework.test.context.BootstrapUtils: java.lang.Class resolveDefaultTestContextBootstrapper(java.lang.Class)> ->_CWE079_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlEscapeHex(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.socket.sockjs.frame.DefaultSockJsFrameFormat: java.lang.String preProcessContent(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getHandlerExecutionChain(java.lang.Object,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.web.reactive.server.CookieAssertions: java.lang.String getMessage(java.lang.String)> ->_CWE079_
<org.springframework.format.datetime.standard.MonthFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String parameterNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.socket.server.support.AbstractHandshakeHandler: java.lang.String selectProtocol(java.util.List,org.springframework.web.socket.WebSocketHandler)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getThemeMessage(org.springframework.context.MessageSourceResolvable)> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: double getDoubleParameter(javax.servlet.ServletRequest,java.lang.String,double)> ->_CWE079_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_CWE079_
<org.springframework.scheduling.config.SchedulerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder add(org.springframework.web.servlet.function.RouterFunction)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.StreamConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)> ->_CWE079_
<org.springframework.core.convert.support.EnumToStringConverter: java.lang.String convert(java.lang.Enum)> ->_CWE079_
<org.springframework.web.method.support.InvocableHandlerMethod: java.lang.Object invokeForRequest(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.method.support.ModelAndViewContainer,java.lang.Object[])> ->_CWE079_
<org.gradle.wrapper.PathAssembler: java.lang.String getHash(java.lang.String)> ->_CWE079_
<org.springframework.http.client.support.AsyncHttpAccessor: org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,boolean)> ->_CWE079_
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder filter(org.springframework.web.servlet.function.HandlerFilterFunction)> ->_CWE079_
<org.springframework.mock.web.MockAsyncContext: javax.servlet.ServletRequest getRequest()> ->_CWE079_
<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest getServletRequest()> ->_CWE079_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message doSendAndReceive(javax.jms.Destination,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: java.lang.String lambda$parse$0(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.HttpEntityMethodArgumentResolver: java.lang.Object createEntity(java.lang.Object,java.lang.Class,org.springframework.http.server.reactive.ServerHttpRequest)> ->_CWE079_
<org.springframework.web.bind.UnsatisfiedServletRequestParameterException: java.lang.String requestParameterMapToString(java.util.Map)> ->_CWE079_
<org.springframework.test.web.servlet.result.MockMvcResultMatchers: org.springframework.test.web.servlet.result.RequestResultMatchers request()> ->_CWE079_
<org.springframework.web.servlet.tags.RequestContextAwareTag: org.springframework.web.servlet.support.RequestContext getRequestContext()> ->_CWE079_
<org.springframework.util.Assert: java.lang.String messageWithTypeName(java.lang.String,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver: org.springframework.web.servlet.mvc.method.'annotation'.RequestResponseBodyAdviceChain getAdvice()> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getThemeMessage(java.lang.String,java.util.List,java.lang.String)> ->_CWE079_
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doGetResource(java.lang.Object)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: java.lang.String lambda$encodeCookies$4(javax.servlet.http.Cookie)> ->_CWE079_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec interceptors(org.springframework.web.servlet.HandlerInterceptor[])> ->_CWE079_
<org.springframework.asm.Handler: org.springframework.asm.Handler removeRange(org.springframework.asm.Handler,org.springframework.asm.Label,org.springframework.asm.Label)> ->_CWE079_
<org.springframework.core.convert.support.IdToEntityConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate all()> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver: java.lang.Object handleNullValue(java.lang.String,java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String identityToString(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.client.MockMvcClientHttpRequestFactory: org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.format.datetime.joda.ReadablePartialPrinter: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition access$1300(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.jdbc.datasource.WebSphereDataSourceAdapter: java.lang.Object invokeJdbcMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.view.AbstractCachingViewResolver: java.lang.String formatKey(java.lang.Object)> ->_CWE079_
<org.springframework.context.support.StaticMessageSource: java.lang.String resolveCodeWithoutArguments(java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String lambda$transferTo$0(java.io.File,java.lang.Boolean)> ->_CWE079_
<org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator: java.lang.String buildMessage(java.lang.String,java.lang.String,java.sql.SQLException)> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceTransformerSupport: org.springframework.web.servlet.resource.ResourceUrlProvider findResourceUrlProvider(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.core.env.PropertyResolverExtensionsKt: java.lang.String get(org.springframework.core.env.PropertyResolver,java.lang.String)> ->_CWE079_
<org.springframework.orm.jpa.ExtendedEntityManagerCreator: javax.persistence.EntityManager createProxy(javax.persistence.EntityManager,org.springframework.orm.jpa.EntityManagerFactoryInfo,boolean,boolean)> ->_CWE079_
<org.springframework.http.codec.multipart.MultipartParser: reactor.core.publisher.Flux parse(reactor.core.publisher.Flux,byte[],int)> ->_CWE079_
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object get(java.lang.Object)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getDescriptiveType(java.lang.Object)> ->_CWE079_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: java.lang.String lowerCase(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate headers(java.util.function.Predicate)> ->_CWE079_
<org.springframework.web.method.HandlerMethod: java.lang.Object findProvidedArgument(org.springframework.core.MethodParameter,java.lang.Object[])> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketConnector(org.springframework.messaging.rsocket.RSocketConnectorConfigurer)> ->_CWE079_
<org.springframework.core.SpringProperties: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String removeSemicolonContentInternal(java.lang.String)> ->_CWE079_
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder cookie(javax.servlet.http.Cookie[])> ->_CWE079_
<org.springframework.web.servlet.resource.EncodedResourceResolver: java.lang.String getExtension(java.lang.String)> ->_CWE079_
<org.springframework.cglib.core.TypeUtils: java.lang.String emulateClassGetName(org.springframework.asm.Type)> ->_CWE079_
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String determineHighestPriorityCandidate(java.util.Map,java.lang.Class)> ->_CWE079_
<org.springframework.test.web.servlet.TestDispatcherServlet: java.lang.String lambda$service$0(java.lang.String,org.springframework.mock.web.MockHttpServletRequest)> ->_CWE079_
<org.springframework.test.web.reactive.server.WiretapConnector: java.lang.String lambda$getExchangeResult$3(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.WebJarsResourceResolver: java.lang.String findWebJarResourcePath(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processClassHierarchy(java.lang.Object,int[],java.lang.Class,org.springframework.core.'annotation'.AnnotationsProcessor,boolean,boolean)> ->_CWE079_
<org.springframework.web.servlet.view.tiles3.TilesView: org.apache.tiles.request.Request createTilesRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.util.pattern.InternalPathPatternParser: int findRegexStart(char[],int)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockPart: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.messaging.simp.stomp.DefaultStompSession: java.lang.String checkOrAddReceipt(org.springframework.messaging.simp.stomp.StompHeaders)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: org.springframework.web.servlet.support.RequestDataValueProcessor getRequestDataValueProcessor()> ->_CWE079_
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder method(org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.web.reactive.result.method.RequestMappingInfo: org.springframework.web.reactive.result.method.RequestMappingInfo combine(org.springframework.web.reactive.result.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: org.apache.http.client.config.RequestConfig createRequestConfig(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration)> ->_CWE079_
<org.springframework.jdbc.object.SqlUpdate: int update(int)> ->_CWE079_
<org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.view.RedirectView: java.lang.String urlEncode(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.asm.Type: java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMessageNotReadable(org.springframework.http.converter.HttpMessageNotReadableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition access$100()> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder post(java.net.URI)> ->_CWE079_
<org.springframework.web.servlet.resource.EncodedResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale)> ->_CWE079_
<org.springframework.jdbc.core.simple.AbstractJdbcCall: java.util.Map doExecute(java.util.Map)> ->_CWE079_
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.lang.String determineField(javax.validation.ConstraintViolation)> ->_CWE079_
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object getResource(java.lang.Object)> ->_CWE079_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: java.lang.String getDestination(org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.core.GenericTypeResolver: java.lang.String lambda$getSingleGeneric$0(org.springframework.core.ResolvableType)> ->_CWE079_
<org.springframework.core.convert.support.ZoneIdToTimeZoneConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.view.freemarker.FreeMarkerView: javax.servlet.ServletContext access$200(org.springframework.web.servlet.view.freemarker.FreeMarkerView)> ->_CWE079_
<org.springframework.scheduling.concurrent.ReschedulingRunnable: boolean cancel(boolean)> ->_CWE079_
<org.springframework.format.datetime.joda.MonthDayFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.mock.web.MockMultipartHttpServletRequest: java.lang.String getMultipartContentType(java.lang.String)> ->_CWE079_
<org.springframework.http.codec.FormHttpMessageWriter: org.springframework.http.MediaType getMediaType(org.springframework.http.MediaType)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo getMatchingMapping(org.springframework.web.servlet.mvc.method.RequestMappingInfo,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver: java.lang.String lambda$resolveNamedValue$1(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getServletPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.socket.config.WebSocketMessageBrokerStats: java.lang.String getExecutorStatsInfo(java.util.concurrent.Executor)> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: boolean getBooleanParameter(javax.servlet.ServletRequest,java.lang.String,boolean)> ->_CWE079_
<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String getStringOrNull(java.util.ResourceBundle,java.lang.String)> ->_CWE079_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributePrefix(int)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver: java.lang.String lambda$readWithMessageConverters$0(java.lang.Object,org.springframework.http.MediaType,java.lang.Boolean)> ->_CWE079_
<org.springframework.core.env.ProfilesParser: java.lang.String lambda$parseExpression$0(java.lang.String)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String getDefaultMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale)> ->_CWE079_
<org.springframework.http.client.reactive.ReactorClientHttpResponse: java.lang.String getSameSite(io.netty.handler.codec.http.cookie.Cookie)> ->_CWE079_
<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping: java.lang.Object getMatchingMapping(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String procedureNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String catalogNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder fileUpload(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ParamsRequestCondition access$1400(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceUrlProvider: java.lang.String getForLookupPath(java.lang.String)> ->_CWE079_
<org.springframework.aop.framework.AopProxyUtils: java.lang.Object getSingletonTarget(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.view.script.ScriptTemplateView: java.lang.String getTemplate(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.method.ResolvableMethod: java.lang.String formatParameter(java.lang.reflect.Parameter)> ->_CWE079_
<org.springframework.web.util.ServletContextPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String,javax.servlet.ServletContext)> ->_CWE079_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: java.lang.String formatRequest(org.springframework.http.server.reactive.ServerHttpRequest)> ->_CWE079_
<org.springframework.web.servlet.resource.VersionResourceResolver: org.springframework.web.servlet.resource.VersionStrategy getStrategyForPath(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.String getString(java.lang.String)> ->_CWE079_
<org.springframework.web.multipart.support.MultipartResolutionDelegate: org.springframework.web.multipart.MultipartHttpServletRequest asMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.filter.ShallowEtagHeaderFilter: java.lang.String generateETagHeaderValue(java.io.InputStream,boolean)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder 'with'(org.springframework.test.web.servlet.request.RequestPostProcessor)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: java.lang.String lambda$extractMatchDetails$1(org.springframework.web.util.pattern.PathPattern,org.springframework.http.server.PathContainer)> ->_CWE079_
<org.springframework.web.servlet.theme.CookieThemeResolver: java.lang.String resolveThemeName(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.handler.AbstractHandlerMapping: java.lang.Object lambda$getHandler$1(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_CWE079_
<org.springframework.web.util.ServletRequestPathUtils: org.springframework.http.server.RequestPath getParsedRequestPath(javax.servlet.ServletRequest)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: org.springframework.web.servlet.ModelAndView processHandlerException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_CWE079_
<org.springframework.aop.interceptor.DebugInterceptor: java.lang.String getInvocationDescription(org.aopalliance.intercept.MethodInvocation)> ->_CWE079_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StubWebApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.function.support.HandlerFunctionAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator: org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node,org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext: org.springframework.web.bind.support.WebExchangeDataBinder initDataBinder(org.springframework.web.bind.support.WebExchangeDataBinder,org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: java.lang.Object handleEmptyBody(java.lang.Object,org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView doResolveException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_CWE079_
<org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider: java.lang.String parameterNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView resolveException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_CWE079_
<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.server.ServerHttpAsyncRequestControl getAsyncRequestControl(org.springframework.http.server.ServerHttpResponse)> ->_CWE079_
<org.springframework.http.converter.BufferedImageHttpMessageConverter: org.springframework.http.MediaType getContentType(org.springframework.http.MediaType)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.ParamsRequestCondition: org.springframework.web.servlet.mvc.condition.ParamsRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.reactive.resource.WebJarsResourceResolver: java.lang.String findWebJarResourcePath(java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.ConversionUtils: java.lang.Class getEnumType(java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,boolean)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.util.Map,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver: java.lang.String lambda$getErrors$0(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder put(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: java.lang.String getAttributeName(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributeLocalName(int)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder patch(java.net.URI)> ->_CWE079_
<org.springframework.core.io.buffer.DefaultDataBuffer: int indexOf(java.util.function.IntPredicate,int)> ->_CWE079_
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection getTargetConnection(java.sql.Connection)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String determineEncoding(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.http.ContentDisposition: java.lang.String decodeFilename(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.test.context.junit.jupiter.SpringExtension: java.lang.String lambda$validateAutowiredConfig$1(java.lang.Class)> ->_CWE079_
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.String print(org.joda.time.Period,java.util.Locale)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder delete(java.net.URI)> ->_CWE079_
<org.springframework.messaging.handler.invocation.MethodArgumentResolutionException: java.lang.String getMethodParameterMessage(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodePathSegment(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String lambda$transformedBeanName$0(java.lang.String)> ->_CWE079_
<org.springframework.core.env.PropertySourcesPropertyResolver: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: javax.servlet.http.Part getPart(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.metadata.HsqlTableMetaDataProvider: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getRelatedIfResolvable(org.springframework.core.convert.TypeDescriptor,org.springframework.core.ResolvableType)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getOriginatingQueryString(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder attribute(java.lang.String,java.lang.Object)> ->_CWE079_
<org.springframework.aop.scope.ScopedProxyUtils: java.lang.String getTargetBeanName(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnTypeName(int)> ->_CWE079_
<org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition: org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.http.client.BufferingClientHttpRequestFactory: org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.client.ClientHttpRequestFactory)> ->_CWE079_
<org.springframework.test.web.servlet.result.ModelResultMatchers: org.springframework.web.servlet.ModelAndView getModelAndView(org.springframework.test.web.servlet.MvcResult)> ->_CWE079_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.resource.ContentVersionStrategy: java.lang.String lambda$getResourceVersion$0(org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompDecoder: java.lang.String readCommand(java.nio.ByteBuffer)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)> ->_CWE079_
<org.springframework.core.convert.support.StringToUUIDConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester transports(org.reactivestreams.Publisher,io.rsocket.loadbalance.LoadbalanceStrategy)> ->_CWE079_
<org.springframework.web.util.pattern.PathPatternRouteMatcher: java.lang.String combine(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: javax.servlet.Servlet getServlet(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: java.lang.String lambda$formatMappings$5(java.util.function.Function,java.util.Map$Entry)> ->_CWE079_
<org.gradle.wrapper.PathAssembler: java.lang.String getDistName(java.net.URI)> ->_CWE079_
<org.springframework.web.cors.DefaultCorsProcessor: boolean handleInternal(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.cors.CorsConfiguration,boolean)> ->_CWE079_
<org.springframework.core.io.buffer.NettyDataBuffer: int indexOf(java.util.function.IntPredicate,int)> ->_CWE079_
<org.springframework.web.reactive.resource.ResourceUrlProvider: java.lang.String lambda$null$6(org.springframework.http.server.PathContainer,java.lang.String)> ->_CWE079_
<org.springframework.cglib.core.TypeUtils: java.lang.String getPackageName(org.springframework.asm.Type)> ->_CWE079_
<org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition: org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition matchRequestMethod(org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.test.context.junit.jupiter.AbstractExpressionEvaluatingCondition: java.lang.String lambda$evaluateExpression$2(java.lang.Class,java.lang.String,java.lang.reflect.AnnotatedElement,java.lang.Object)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeHost(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.cors.reactive.DefaultCorsProcessor: boolean handleInternal(org.springframework.web.server.ServerWebExchange,org.springframework.web.cors.CorsConfiguration,boolean)> ->_CWE079_
<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.String getAttributeNameInSession(org.springframework.web.context.request.WebRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getContextUrl(java.lang.String,java.util.Map)> ->_CWE079_
<org.springframework.web.client.RestClientResponseException: java.lang.String getResponseBodyAsString(java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler: java.lang.String lambda$handleValue$0(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.PatternsRequestCondition access$200()> ->_CWE079_
<org.springframework.core.env.AbstractPropertyResolver: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl put$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.expression.spel.ast.Projection: java.lang.Class determineCommonType(java.lang.Class,java.lang.Class)> ->_CWE079_
<org.springframework.test.web.servlet.DefaultMvcResult: org.springframework.mock.web.MockHttpServletRequest getRequest()> ->_CWE079_
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String access$502(org.springframework.beans.factory.support.DefaultListableBeanFactory,java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl get$default(org.springframework.test.web.servlet.MockMvc,java.net.URI,kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getRemainingPath(java.lang.String,java.lang.String,boolean)> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompHeaderAccessor: java.lang.String getDetailedLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.web.servlet.FlashMapManager getFlashMapManager(org.springframework.mock.web.MockHttpServletRequest)> ->_CWE079_
<org.springframework.cglib.core.TypeUtils: org.springframework.asm.Type getBoxedType(org.springframework.asm.Type)> ->_CWE079_
<org.springframework.mock.web.MockFilterChain: javax.servlet.ServletRequest getRequest()> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate PUT(java.lang.String)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.Class determineCommonAncestor(java.lang.Class,java.lang.Class)> ->_CWE079_
<org.springframework.http.server.reactive.ServletServerHttpRequest: org.springframework.util.MultiValueMap initHeaders(org.springframework.util.MultiValueMap,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.aop.interceptor.AsyncExecutionInterceptor: java.lang.String getExecutorQualifier(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.aop.support.AopUtils: boolean canApply(org.springframework.aop.Pointcut,java.lang.Class,boolean)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: java.lang.String getRealPath(java.lang.String)> ->_CWE079_
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.lang.String determineErrorCode(javax.validation.metadata.ConstraintDescriptor)> ->_CWE079_
<org.springframework.web.reactive.result.view.ViewResolutionResultHandler: java.lang.String getDefaultViewName(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.RequestConditionHolder: org.springframework.web.servlet.mvc.condition.RequestConditionHolder getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getParameter(java.lang.String)> ->_CWE079_
<org.springframework.test.context.support.AbstractDelegatingSmartContextLoader: java.lang.String name(org.springframework.test.context.SmartContextLoader)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.resource.FixedVersionStrategy: java.lang.String getResourceVersion(org.springframework.core.io.Resource)> ->_CWE079_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: java.lang.String resolveSessionId(org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.web.servlet.resource.AbstractResourceResolver: java.lang.String resolveUrlPath(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_CWE079_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlUnescape(java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.EnumToIntegerConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMethodArgumentNotValidException(org.springframework.web.bind.MethodArgumentNotValidException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.socket.messaging.StompSubProtocolErrorHandler: org.springframework.messaging.Message handleClientMessageProcessingError(org.springframework.messaging.Message,java.lang.Throwable)> ->_CWE079_
<org.springframework.core.Conventions: java.lang.String getVariableNameForReturnType(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.method.HandlerMethod: java.lang.String formatInvokeError(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.mvc.ParameterizableViewController: org.springframework.web.servlet.ModelAndView handleRequestInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.String)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester websocket(java.net.URI)> ->_CWE079_
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String convertKey(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor: java.lang.String lambda$writeWithMessageConverters$0(java.lang.Object,java.lang.Boolean)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder principal(java.security.Principal)> ->_CWE079_
<org.springframework.jdbc.support.lob.PassThroughClob: java.lang.String getSubString(long,int)> ->_CWE079_
<org.springframework.core.convert.support.StringToCurrencyConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.ProducesRequestCondition: org.springframework.web.servlet.mvc.condition.ProducesRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.context.junit.jupiter.SpringExtension: java.lang.String lambda$supportsParameter$2(org.junit.jupiter.api.extension.ExtensionContext,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getSchemaName(int)> ->_CWE079_
<org.springframework.web.servlet.tags.form.AbstractFormTag: java.lang.String getDisplayString(java.lang.Object)> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler: java.lang.String access$5700(org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: java.util.Map processHeadersToSend(java.util.Map)> ->_CWE079_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder header(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer: java.lang.String maybeExtractVariableName(java.lang.String)> ->_CWE079_
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encode$2(java.nio.charset.Charset,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_CWE079_
<org.springframework.beans.TypeConverterDelegate: java.lang.String buildIndexedPropertyName(java.lang.String,int)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String encodeCookies(javax.servlet.http.Cookie[])> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.PatternsRequestCondition getPatternsCondition()> ->_CWE079_
<org.springframework.core.convert.support.StringToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition access$1100(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.core.annotation.MergedAnnotationsCollection: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class,java.util.function.Predicate,org.springframework.core.'annotation'.MergedAnnotationSelector)> ->_CWE079_
<org.springframework.expression.spel.CodeFlow: java.lang.String toJvmDescriptor(java.lang.Class)> ->_CWE079_
<org.springframework.messaging.support.NativeMessageHeaderAccessor: java.lang.String getFirstNativeHeader(java.lang.String)> ->_CWE079_
<org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver: java.lang.Object handleNullValue(java.lang.String,java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.web.util.UriComponentsBuilder: java.lang.String getQueryParamValue(java.lang.Object)> ->_CWE079_
<org.springframework.core.io.buffer.DataBufferUtils: org.springframework.core.io.buffer.DataBuffer retain(org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.web.servlet.support.BindStatus: java.lang.String getErrorMessagesAsString(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.http.server.reactive.MockServerHttpRequest: org.springframework.web.testfixture.http.server.reactive.MockServerHttpRequest$BaseBuilder get(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.config.FreeMarkerConfigurerBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.test.web.servlet.result.MockMvcResultHandlers: org.springframework.test.web.servlet.ResultHandler print(java.io.OutputStream)> ->_CWE079_
<org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider: java.lang.String metaDataCatalogNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.function.server.DefaultServerRequest: org.springframework.http.server.reactive.ServerHttpRequest access$200(org.springframework.web.reactive.function.server.DefaultServerRequest)> ->_CWE079_
<org.springframework.web.reactive.resource.CachingResourceResolver: java.lang.String computeKey(org.springframework.web.server.ServerWebExchange,java.lang.String)> ->_CWE079_
<org.springframework.context.support.AbstractApplicationContext: java.lang.String lambda$finishBeanFactoryInitialization$0(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletResponse: java.lang.String getCookieHeader(javax.servlet.http.Cookie)> ->_CWE079_
<org.springframework.jdbc.datasource.init.ScriptUtils: java.lang.String readScript(java.io.LineNumberReader,java.lang.String[],java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.SimpleServletHandlerAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo createRequestMappingInfo(java.lang.reflect.AnnotatedElement)> ->_CWE079_
<org.springframework.objenesis.instantiator.SerializationInstantiatorHelper: java.lang.Class getNonSerializableSuperClass(java.lang.Class)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockCookie: java.lang.String extractAttributeValue(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.support.ServletUriComponentsBuilder: org.springframework.web.servlet.support.ServletUriComponentsBuilder fromContextPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String inferDestroyMethodIfNecessary(java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)> ->_CWE079_
<org.springframework.web.method.support.InvocableHandlerMethod: java.lang.Object[] getMethodArgumentValues(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.method.support.ModelAndViewContainer,java.lang.Object[])> ->_CWE079_
<org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect: java.lang.String getExecutorQualifier(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerStompHandler(org.w3c.dom.Element,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: java.lang.String lambda$formatMappings$5(java.util.function.Function,java.util.Map$Entry)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultAsyncServerResponse: org.springframework.web.servlet.function.AsyncServerResponse create(java.lang.Object,java.time.Duration)> ->_CWE079_
<org.springframework.messaging.handler.HandlerMethod: java.lang.Object findProvidedArgument(org.springframework.core.MethodParameter,java.lang.Object[])> ->_CWE079_
<org.springframework.core.convert.support.ObjectToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate param(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletResponse: java.lang.String getContentAsString(java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.util.pattern.PathPattern: java.lang.String concat(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.http.converter.FormHttpMessageConverter: org.springframework.http.MediaType getFormContentType(org.springframework.http.MediaType)> ->_CWE079_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: java.lang.String getDisconnectReceipt(org.springframework.messaging.simp.SimpMessageHeaderAccessor)> ->_CWE079_
<org.springframework.test.context.jdbc.MergedSqlConfig: java.lang.String getString(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.resource.PathResourceResolver: java.lang.String lambda$resolveUrlPathInternal$0(java.lang.String,org.springframework.core.io.Resource)> ->_CWE079_
<org.springframework.format.datetime.standard.MonthFormatter: java.lang.String print(java.time.Month,java.util.Locale)> ->_CWE079_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlEscapeDecimal(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: java.lang.String formatMappings(java.lang.Class,java.util.Map)> ->_CWE079_
<org.springframework.web.context.request.async.WebAsyncUtils: org.springframework.web.context.request.async.AsyncWebRequest createAsyncWebRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getPackageName(java.lang.String)> ->_CWE079_
<org.springframework.http.client.Netty4ClientHttpRequestFactory: org.springframework.http.client.Netty4ClientHttpRequest createRequestInternal(java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.servlet.ModelAndView handleInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.method.HandlerMethod)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder get(java.net.URI)> ->_CWE079_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: void lambda$handle$2(org.springframework.web.server.ServerWebExchange,java.lang.Void)> ->_CWE079_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler: org.springframework.web.servlet.mvc.method.'annotation'.ResponseBodyEmitter getEmitter(org.springframework.http.MediaType)> ->_CWE079_
<org.gradle.wrapper.Download: java.lang.String base64Encode(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriComponents: java.lang.String expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)> ->_CWE079_
<org.springframework.oxm.config.Jaxb2MarshallerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec methodInternal(org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec patternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_CWE079_
<org.springframework.http.HttpHeaders: java.lang.String encodeBasicAuth(java.lang.String,java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.test.web.client.AbstractRequestExpectationManager: org.springframework.test.web.client.RequestExpectation matchRequest(org.springframework.http.client.ClientHttpRequest)> ->_CWE079_
<org.springframework.web.servlet.view.AbstractView: java.util.Map createMergedOutputModel(java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String getScheme(reactor.netty.http.server.HttpServerRequest)> ->_CWE079_
<org.springframework.context.config.MBeanExportBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String toString(org.springframework.expression.spel.standard.Token)> ->_CWE079_
<org.springframework.aop.aspectj.AspectJWeaverMessageHandler: java.lang.String makeMessageFor(org.aspectj.bridge.IMessage)> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerUserDestHandler(org.w3c.dom.Element,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_CWE079_
<org.springframework.web.bind.EscapedErrors: org.springframework.validation.ObjectError escapeObjectError(org.springframework.validation.ObjectError)> ->_CWE079_
<org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.ViewResolutionResultHandler: java.util.List getMediaTypes(java.util.List)> ->_CWE079_
<org.springframework.web.server.ServerWebExchangeDecorator: java.lang.String transformUrl(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.DefaultResourceResolverChain: org.springframework.web.servlet.resource.DefaultResourceResolverChain initChain(java.util.ArrayList)> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompEncoder: java.lang.String escape(java.lang.String)> ->_CWE079_
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)> ->_CWE079_
<org.springframework.asm.Type: java.lang.String getDescriptor(java.lang.Class)> ->_CWE079_
<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String getMessagePayload(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.jdbc.support.lob.PassThroughBlob: int setBytes(long,byte[],int,int)> ->_CWE079_
<org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String resolveScriptSource(org.w3c.dom.Element,org.springframework.beans.factory.xml.XmlReaderContext)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate OPTIONS(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.tags.form.ValueFormatter: java.lang.String getDisplayString(java.lang.Object,java.beans.PropertyEditor,boolean)> ->_CWE079_
<org.springframework.web.testfixture.http.server.reactive.MockServerHttpResponse: java.lang.String lambda$getBodyAsString$4(java.nio.charset.Charset,org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class,java.util.function.Predicate,org.springframework.core.'annotation'.MergedAnnotationSelector)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder HEAD(org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.web.reactive.result.condition.ParamsRequestCondition: org.springframework.web.reactive.result.condition.ParamsRequestCondition combine(org.springframework.web.reactive.result.condition.ParamsRequestCondition)> ->_CWE079_
<org.springframework.web.servlet.config.GroovyMarkupConfigurerBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String determinePrimaryCandidate(java.util.Map,java.lang.Class)> ->_CWE079_
<org.springframework.web.reactive.handler.AbstractUrlHandlerMapping: java.lang.String getHandlerDescription(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder DELETE(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: java.lang.String lambda$null$1(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.ServletUriComponentsBuilder: org.springframework.web.servlet.support.ServletUriComponentsBuilder fromRequestUri(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler: java.lang.Object lambda$adaptCompletionStage$0(org.springframework.web.context.request.async.DeferredResult,java.lang.Object,java.lang.Throwable)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher headerDoesNotExist(java.lang.String)> ->_CWE079_
<org.gradle.wrapper.PathAssembler: java.lang.String rootDirName(java.lang.String,org.gradle.wrapper.WrapperConfiguration)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(int[])> ->_CWE079_
<org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator: java.lang.String getInterceptorNameSuffix(org.springframework.beans.factory.config.BeanDefinition)> ->_CWE079_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec asyncRequestTimeout(long)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: java.util.List getAdviceByType(java.util.List,java.lang.Class)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.mock.web.MockHttpServletRequest postProcessRequest(org.springframework.mock.web.MockHttpServletRequest)> ->_CWE079_
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.factory.InjectionPoint setCurrentInjectionPoint(org.springframework.beans.factory.InjectionPoint)> ->_CWE079_
<org.springframework.web.reactive.socket.WebSocketMessage: java.lang.String getPayloadAsText(java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.PatternsRequestCondition: java.lang.String getMatchingPattern(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition access$300()> ->_CWE079_
<org.springframework.web.servlet.support.AbstractFlashMapManager: org.springframework.web.servlet.FlashMap retrieveAndUpdate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.format.number.money.MonetaryAmountFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.messaging.handler.invocation.reactive.AbstractEncoderMethodReturnValueHandler: org.reactivestreams.Publisher lambda$handleReturnValue$0(org.springframework.core.MethodParameter,org.springframework.messaging.Message,org.reactivestreams.Publisher)> ->_CWE079_
<org.springframework.web.servlet.view.InternalResourceView: javax.servlet.RequestDispatcher getRequestDispatcher(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: java.lang.String getForwardedPrefix(org.springframework.http.server.reactive.ServerHttpRequest)> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: java.lang.String getStringParameter(javax.servlet.ServletRequest,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.'annotation'.RequestMappingHandlerAdapter createRequestMappingHandlerAdapter()> ->_CWE079_
<org.springframework.web.reactive.resource.VersionResourceResolver: java.lang.String lambda$null$4(org.springframework.web.reactive.resource.VersionStrategy,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.function.client.DefaultWebClient: org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec methodInternal(org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.core.style.DefaultValueStyler: java.lang.String getCollectionTypeString(java.util.Collection)> ->_CWE079_
<org.springframework.web.socket.sockjs.client.SockJsClient: org.springframework.web.socket.sockjs.client.DefaultTransportRequest createRequest(org.springframework.web.socket.sockjs.client.SockJsUrlInfo,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.SockJsClient$ServerInfo)> ->_CWE079_
<org.springframework.web.servlet.handler.HandlerExceptionResolverComposite: org.springframework.web.servlet.ModelAndView resolveException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_CWE079_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.util.xml.AbstractStaxXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder fromMethodName(org.springframework.web.util.UriComponentsBuilder,java.lang.Class,java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.http.converter.FormHttpMessageConverter: java.lang.String getFilename(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl multipart$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeUserInfo(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder GET(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.aop.aspectj.annotation.AspectMetadata: java.lang.String findPerClause(java.lang.Class)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder headers(org.springframework.http.HttpHeaders)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo getMappingForMethod(java.lang.reflect.Method,java.lang.Class)> ->_CWE079_
<org.springframework.format.number.money.CurrencyUnitFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.RequestConditionHolder: org.springframework.web.servlet.mvc.condition.RequestCondition getCondition()> ->_CWE079_
<org.springframework.core.convert.support.GenericConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: java.lang.String getLookupDestination(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleTypeMismatch(org.springframework.beans.TypeMismatchException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor: java.lang.String buildExceptionMessage(java.util.List,java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder head(java.net.URI)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.PatternsRequestCondition access$1200(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.web.servlet.resource.DefaultResourceResolverChain: java.lang.String resolveUrlPath(java.lang.String,java.util.List)> ->_CWE079_
<org.springframework.web.servlet.mvc.UrlFilenameViewController: java.lang.String getViewNameForRequest(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.reactive.result.condition.PatternsRequestCondition: org.springframework.web.reactive.result.condition.PatternsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver: java.lang.String getParameterName(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder withAttributes(java.util.function.Consumer)> ->_CWE079_
<org.springframework.web.testfixture.method.ResolvableMethod: java.lang.String access$1000(org.springframework.web.testfixture.method.ResolvableMethod)> ->_CWE079_
<org.springframework.asm.ClassReader: java.lang.String readUTF8(int,char[])> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: org.springframework.web.reactive.result.condition.RequestCondition getCustomMethodCondition(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.context.index.processor.TypeHelper: javax.lang.model.element.Element getSuperClass(javax.lang.model.element.Element)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)> ->_CWE079_
<org.springframework.web.reactive.function.server.RequestPredicates: org.springframework.web.reactive.function.server.RequestPredicate path(java.lang.String)> ->_CWE079_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String,java.util.List)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.method.RequestMappingInfo$Builder paths(java.lang.String[])> ->_CWE079_
<org.springframework.web.testfixture.http.client.reactive.MockClientHttpRequest: java.lang.String lambda$getBodyAsString$5(java.nio.charset.Charset,org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.messaging.simp.SimpMessageHeaderAccessor: java.lang.String getShortLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate method(org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder: org.springframework.web.reactive.accept.RequestedContentTypeResolver lambda$parameterResolver$0(org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer)> ->_CWE079_
<org.springframework.web.util.WebUtils: java.lang.String findParameterValue(java.util.Map,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter: java.lang.Object handleEmptyBody(java.lang.Object,org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getThemeMessage(java.lang.String,java.lang.Object[],java.lang.String)> ->_CWE079_
<org.springframework.test.context.support.TestPropertySourceAttributes: java.lang.String lambda$mergeWith$0(org.springframework.test.context.support.TestPropertySourceAttributes)> ->_CWE079_
<org.springframework.test.context.BootstrapUtils: java.lang.Class resolveExplicitTestContextBootstrapper(java.lang.Class)> ->_CWE079_
<org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer: java.lang.String resolvePlaceholder(java.lang.String,java.lang.String,java.util.prefs.Preferences)> ->_CWE079_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: java.lang.String formatHeaders(org.springframework.http.HttpHeaders)> ->_CWE079_
<org.springframework.web.reactive.function.server.RouterFunctions: org.springframework.web.reactive.function.server.RouterFunction changeParser(org.springframework.web.reactive.function.server.RouterFunction,org.springframework.web.util.pattern.PathPatternParser)> ->_CWE079_
<org.springframework.test.util.AopTestUtils: java.lang.Object getTargetObject(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getThemeMessage(java.lang.String,java.util.List)> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceUrlProvider: java.lang.String getForRequestUrl(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.HeadersRequestCondition: org.springframework.web.servlet.mvc.condition.HeadersRequestCondition combine(org.springframework.web.servlet.mvc.condition.HeadersRequestCondition)> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: float getFloatParameter(javax.servlet.ServletRequest,java.lang.String,float)> ->_CWE079_
<org.springframework.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: java.lang.String lambda$getRequestDispatcher$0(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder queryParam(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.test.web.servlet.client.MockMvcHttpConnector: org.springframework.test.web.servlet.RequestBuilder adaptRequest(org.springframework.http.HttpMethod,java.net.URI,java.util.function.Function)> ->_CWE079_
<org.springframework.web.servlet.config.TilesConfigurerBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.aop.scope.ScopedProxyUtils: java.lang.String lambda$getOriginalBeanName$0(java.lang.String)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(short[])> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMissingPathVariable(org.springframework.web.bind.MissingPathVariableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.server.adapter.DefaultServerWebExchange: java.lang.String lambda$new$0(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: java.lang.String formatMappings(java.lang.Class,java.util.Map)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: java.lang.String getMimeType(java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.DefaultSslInfo: java.lang.String initSessionId(javax.net.ssl.SSLSession)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.RequestConditionHolder access$1800(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinition parseCustomElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_CWE079_
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()> ->_CWE079_
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher header(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int getInt(int)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeAuthority(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: java.lang.String getPathPrefix(java.lang.Class)> ->_CWE079_
<org.springframework.context.config.LoadTimeWeaverBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.web.cors.CorsConfiguration: java.lang.String checkOrigin(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeFunction(java.lang.Class,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: java.lang.String getHandlerDescription(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setHandlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver[])> ->_CWE079_
<org.springframework.test.context.support.ContextLoaderUtils: java.lang.String lambda$resolveContextConfigurationAttributes$1(java.lang.Class,java.lang.Class)> ->_CWE079_
<org.springframework.r2dbc.connection.init.ScriptUtils: java.lang.String readScript(java.io.LineNumberReader,java.lang.String[],java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver: org.springframework.http.server.ServletServerHttpRequest createInputMessage(org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession: java.lang.String initLogPrefix(org.springframework.web.reactive.socket.HandshakeInfo,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.datasource.init.ScriptUtils: java.lang.String readScript(org.springframework.core.io.support.EncodedResource,java.lang.String[],java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.ServletHttpHandlerAdapter: java.lang.String getServletPath(javax.servlet.ServletConfig)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder accept(java.lang.String[])> ->_CWE079_
<org.springframework.web.socket.sockjs.client.SockJsClient: org.springframework.http.HttpHeaders getHttpRequestHeaders(org.springframework.http.HttpHeaders)> ->_CWE079_
<org.springframework.web.reactive.function.server.ServerRequestExtensionsKt: java.lang.String queryParamOrNull(org.springframework.web.reactive.function.server.ServerRequest,java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: org.springframework.mock.web.MockHttpServletRequest buildRequest(javax.servlet.ServletContext)> ->_CWE079_
<org.springframework.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodField(org.springframework.cglib.core.Signature)> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String uriDecode(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: java.lang.Object lambda$static$0(java.lang.Object)> ->_CWE079_
<org.springframework.cache.jcache.interceptor.CacheResultInterceptor: java.lang.Throwable cloneException(java.lang.Throwable)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeHost(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.jdbc.core.BeanPropertyRowMapper: java.lang.String underscoreName(java.lang.String)> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompHeaderAccessor: java.lang.String getPasscode(java.util.Map)> ->_CWE079_
<org.springframework.expression.spel.ast.Indexer: java.lang.String access$202(org.springframework.expression.spel.ast.Indexer,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ProducesRequestCondition access$1700(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.core.log.LogFormatUtils: java.lang.String formatValue(java.lang.Object,boolean)> ->_CWE079_
<org.springframework.transaction.interceptor.TransactionAspectSupport: java.lang.String methodIdentification(java.lang.reflect.Method,java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate DELETE(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getCatalogName(int)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String,java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.resource.VersionResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_CWE079_
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder body(org.springframework.web.reactive.function.BodyInserter)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getString(int)> ->_CWE079_
<org.springframework.web.servlet.tags.ThemeTag: java.lang.String getNoSuchMessageExceptionDescription(org.springframework.context.NoSuchMessageException)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultEntityResponseBuilder: org.springframework.web.servlet.function.EntityResponse$Builder fromObject(java.lang.Object,org.springframework.core.ParameterizedTypeReference)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,boolean)> ->_CWE079_
<org.springframework.jms.support.SimpleJmsHeaderMapper: java.lang.String fromHeaderName(java.lang.String)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester transport(io.rsocket.transport.ClientTransport)> ->_CWE079_
<org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser: java.lang.String getAsyncTimeout(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.r2dbc.core.ColumnMapRowMapper: java.lang.String getColumnKey(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder onError(java.lang.Class,java.util.function.BiFunction)> ->_CWE079_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlEscape(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.datasource.init.ScriptUtils: java.lang.String readScript(org.springframework.core.io.support.EncodedResource)> ->_CWE079_
<org.springframework.web.context.request.ServletWebRequest: java.lang.String padEtagIfNecessary(java.lang.String)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String convertResourcePathToClassName(java.lang.String)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(double[])> ->_CWE079_
<org.springframework.web.reactive.resource.ResourceWebHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)> ->_CWE079_
<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Flux handleAndReply(io.rsocket.Payload,io.rsocket.frame.FrameType,reactor.core.publisher.Flux)> ->_CWE079_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.mock.web.MockHttpServletRequest lambda$asyncDispatch$0(org.springframework.test.web.servlet.MvcResult,javax.servlet.ServletContext)> ->_CWE079_
<org.springframework.jdbc.support.lob.PassThroughClob: long position(java.sql.Clob,long)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getQualifiedMethodName(java.lang.reflect.Method,java.lang.Class)> ->_CWE079_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext,java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: java.lang.String lambda$formatMappings$3(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.theme.SessionThemeResolver: java.lang.String resolveThemeName(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder session(org.springframework.mock.web.MockHttpSession)> ->_CWE079_
<org.springframework.http.codec.multipart.MultipartWriterSupport: org.springframework.http.MediaType getMultipartMediaType(org.springframework.http.MediaType,byte[])> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: java.lang.String lambda$getRequestDispatcher$0(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.SseServerResponse: org.springframework.web.servlet.ModelAndView writeToInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder attribute(java.lang.String,java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: javax.servlet.Servlet getServlet(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder: org.springframework.web.reactive.accept.RequestedContentTypeResolver lambda$fixedResolver$1(org.springframework.http.MediaType[])> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockRequestDispatcher: org.springframework.web.testfixture.servlet.MockHttpServletResponse getMockHttpServletResponse(javax.servlet.ServletResponse)> ->_CWE079_
<org.springframework.asm.Frame: int getInitializedType(org.springframework.asm.SymbolTable,int)> ->_CWE079_
<org.springframework.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.messaging.simp.SimpMessageHeaderAccessor: java.lang.String getDetailedLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: java.lang.String getMimeType(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate PATCH(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.Object[],java.util.Map)> ->_CWE079_
<org.springframework.mock.web.MockPageContext: javax.servlet.ServletRequest getRequest()> ->_CWE079_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: java.lang.String lambda$formatMappings$2(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotatedElementUtils: java.lang.String lambda$getMetaAnnotationTypes$0(org.springframework.core.'annotation'.MergedAnnotation)> ->_CWE079_
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: org.springframework.web.socket.sockjs.client.DefaultTransportRequest access$100(org.springframework.web.socket.sockjs.client.DefaultTransportRequest)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketStrategies(java.util.function.Consumer)> ->_CWE079_
<org.springframework.web.servlet.support.ServletUriComponentsBuilder: javax.servlet.http.HttpServletRequest getCurrentRequest()> ->_CWE079_
<org.springframework.jdbc.core.SingleColumnRowMapper: java.lang.Object convertValueToRequiredType(java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.http.server.reactive.TomcatHttpHandlerAdapter: org.springframework.http.server.reactive.ServletServerHttpResponse createResponse(javax.servlet.http.HttpServletResponse,javax.servlet.AsyncContext,org.springframework.http.server.reactive.ServletServerHttpRequest)> ->_CWE079_
<org.springframework.core.SimpleAliasRegistry: java.lang.String canonicalName(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.config.WebFluxConfigurationSupport: org.springframework.web.reactive.result.method.'annotation'.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.core.ReactiveAdapterRegistry,org.springframework.http.codec.ServerCodecConfigurer,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection: java.lang.String lambda$validateContextPath$1(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection: java.lang.String lambda$validateContextPath$0(java.lang.String)> ->_CWE079_
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: org.apache.http.client.config.RequestConfig mergeRequestConfig(org.apache.http.client.config.RequestConfig)> ->_CWE079_
<org.springframework.mock.web.MockCookie: java.lang.String extractAttributeValue(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.context.annotation.ScopedProxyCreator: java.lang.String getTargetBeanName(java.lang.String)> ->_CWE079_
<org.springframework.scheduling.support.QuartzCronField: java.time.temporal.Temporal lambda$weekdayNearestTo$4(int,java.time.temporal.Temporal)> ->_CWE079_
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory,javax.resource.cci.ConnectionSpec)> ->_CWE079_
<org.springframework.mock.http.client.reactive.MockClientHttpRequest: java.lang.String lambda$getBodyAsString$5(java.nio.charset.Charset,org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.'annotation'.RequestMappingHandlerMapping createRequestMappingHandlerMapping()> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeQuery(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition matchPreFlight(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo createRequestMappingInfo(org.springframework.web.bind.'annotation'.RequestMapping,org.springframework.web.servlet.mvc.condition.RequestCondition)> ->_CWE079_
<org.springframework.jdbc.core.metadata.Db2CallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getThemeMessage(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.tags.form.OptionTag: java.lang.String getLabelValue(java.lang.Object)> ->_CWE079_
<org.springframework.aop.support.DelegatePerTargetObjectIntroductionInterceptor: java.lang.Object getIntroductionDelegateFor(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.result.MockMvcResultHandlers: org.springframework.test.web.servlet.ResultHandler print(java.io.Writer)> ->_CWE079_
<org.springframework.test.context.support.DynamicPropertiesContextCustomizer: java.lang.String lambda$assertValid$1(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.reactive.function.UnsupportedMediaTypeException: java.lang.String initReason(org.springframework.http.MediaType,org.springframework.core.ResolvableType)> ->_CWE079_
<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport: org.springframework.web.socket.WebSocketHandler decorateWebSocketHandler(org.springframework.web.socket.WebSocketHandler)> ->_CWE079_
<org.springframework.test.context.support.DynamicPropertiesContextCustomizer: java.lang.String lambda$assertValid$0(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor nested(org.springframework.core.convert.TypeDescriptor,int)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration access$1900(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: java.lang.String lambda$getAttributeName$7(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processMethod(java.lang.Object,java.lang.reflect.Method,org.springframework.core.'annotation'.MergedAnnotations$SearchStrategy,org.springframework.core.'annotation'.AnnotationsProcessor)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeScheme(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder method(org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String getDisplayString(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.condition.PatternsRequestCondition: org.springframework.web.reactive.result.condition.PatternsRequestCondition combine(org.springframework.web.reactive.result.condition.PatternsRequestCondition)> ->_CWE079_
<org.springframework.web.context.request.async.DeferredResultInterceptorChain: java.lang.Object applyPostProcess(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult,java.lang.Object)> ->_CWE079_
<org.springframework.mock.web.MockBodyContent: javax.servlet.jsp.JspWriter adaptJspWriter(java.io.Writer,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerResponseBuilder: org.springframework.web.servlet.function.ServerResponse$BodyBuilder cookie(javax.servlet.http.Cookie)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PATCH(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String determineAutowireCandidate(java.util.Map,org.springframework.beans.factory.config.DependencyDescriptor)> ->_CWE079_
<org.springframework.format.datetime.joda.MillisecondInstantPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> ->_CWE079_
<org.springframework.web.server.handler.ResponseStatusExceptionHandler: java.lang.String formatError(java.lang.Throwable,org.springframework.http.server.reactive.ServerHttpRequest)> ->_CWE079_
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String pathToString(int,java.util.List)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: java.lang.String getClassMapping(java.lang.Class)> ->_CWE079_
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.lang.String resolveBasePackage(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeQueryParam(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.socket.server.standard.SpringConfigurator: java.lang.String getBeanNameByType(org.springframework.web.context.WebApplicationContext,java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver: org.springframework.web.servlet.ModelAndView resolveResponseStatusException(org.springframework.web.server.ResponseStatusException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.support.ServletUriComponentsBuilder: org.springframework.web.servlet.support.ServletUriComponentsBuilder fromRequest(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.core.io.support.VfsPatternUtils: java.lang.String getPath(java.lang.Object)> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: long getLongParameter(javax.servlet.ServletRequest,java.lang.String,long)> ->_CWE079_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getAttributeType(int)> ->_CWE079_
<org.gradle.wrapper.Install: java.lang.String calculateSha256Sum(java.io.File)> ->_CWE079_
<org.springframework.scheduling.support.CronField: java.lang.String replaceOrdinals(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping beanNameHandlerMapping(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,boolean)> ->_CWE079_
<org.springframework.web.servlet.tags.HtmlEscapingAwareTag: java.lang.String htmlEscape(java.lang.String)> ->_CWE079_
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.core.ResolvableType getFactoryBeanGeneric(org.springframework.core.ResolvableType)> ->_CWE079_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl head$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method,java.lang.Class)> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompHeaderAccessor: java.lang.String appendPayload(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec customHandlerMapping(java.util.function.Supplier)> ->_CWE079_
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encodeTemplate$1(java.nio.charset.Charset,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.CachingResourceResolver: java.lang.String lambda$getContentCodingKey$0(java.lang.String)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String)> ->_CWE079_
<org.springframework.asm.Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.util.WebUtils: javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodePath(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.jms.listener.adapter.MessageListenerAdapter: java.lang.String getListenerMethodName(javax.jms.Message,java.lang.Object)> ->_CWE079_
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: java.lang.String getContentType(java.io.File)> ->_CWE079_
<org.springframework.test.util.ReflectionTestUtils: java.lang.String safeToString(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.condition.CompositeRequestCondition: org.springframework.web.reactive.result.condition.CompositeRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.multipart.support.MultipartResolutionDelegate: org.springframework.web.multipart.MultipartRequest resolveMultipartRequest(org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.test.web.client.MockMvcClientHttpRequestFactory: org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.mock.web.MockRequestDispatcher: org.springframework.mock.web.MockHttpServletResponse getMockHttpServletResponse(javax.servlet.ServletResponse)> ->_CWE079_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: java.lang.String lambda$formatMappings$4(java.util.function.Function,java.util.Map$Entry)> ->_CWE079_
<org.springframework.jdbc.datasource.init.ScriptUtils: java.lang.String readScript(java.io.LineNumberReader,java.lang.String,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.CachingResourceResolver: java.lang.String computeKey(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockCookie: java.lang.String lambda$parse$0(java.lang.String)> ->_CWE079_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: org.apache.http.client.config.RequestConfig mergeRequestConfig(org.apache.http.client.config.RequestConfig)> ->_CWE079_
<org.springframework.web.multipart.commons.CommonsMultipartResolver: java.lang.String determineEncoding(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctions: org.springframework.web.servlet.function.RouterFunction changeParser(org.springframework.web.servlet.function.RouterFunction,org.springframework.web.util.pattern.PathPatternParser)> ->_CWE079_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec handlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver[])> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompHeaders: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.context.support.DelegatingMessageSource: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: java.lang.String lambda$formatMappings$3(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.CompositeRequestCondition: org.springframework.web.servlet.mvc.condition.CompositeRequestCondition combine(org.springframework.web.servlet.mvc.condition.CompositeRequestCondition)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration: org.springframework.web.servlet.resource.ResourceHttpRequestHandler getRequestHandler()> ->_CWE079_
<org.springframework.cglib.core.TypeUtils: java.lang.String getClassName(org.springframework.asm.Type)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(byte[])> ->_CWE079_
<org.springframework.scheduling.config.ExecutorBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.gradle.wrapper.GradleWrapperMain: java.io.File rootDir(java.io.File)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: java.lang.String getPathPrefix(java.lang.Class)> ->_CWE079_
<org.springframework.test.web.servlet.client.MockMvcHttpConnector: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder initRequestBuilder(org.springframework.http.HttpMethod,java.net.URI,org.springframework.mock.http.client.reactive.MockClientHttpRequest,byte[])> ->_CWE079_
<org.springframework.web.servlet.function.AbstractServerResponse: org.springframework.web.servlet.ModelAndView writeTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder servletPath(java.lang.String)> ->_CWE079_
<org.springframework.transaction.reactive.TransactionSynchronizationUtils: java.lang.Object unwrapResourceIfNecessary(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.TestDispatcherServlet: org.springframework.web.servlet.ModelAndView processHandlerException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_CWE079_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String substituteNamedParameters(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.HandlerMapping viewControllerHandlerMapping(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultRenderingResponseBuilder: org.springframework.web.servlet.function.RenderingResponse$Builder modelAttribute(java.lang.String,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.result.MockMvcResultMatchers: org.springframework.test.web.servlet.ResultMatcher forwardedUrlPattern(java.lang.String)> ->_CWE079_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: java.lang.String lambda$formatMappings$3(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.test.context.web.WebTestContextBootstrapper: java.lang.Class getDefaultContextLoaderClass(java.lang.Class)> ->_CWE079_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.http.server.reactive.JettyHttpHandlerAdapter: org.springframework.http.server.reactive.ServletServerHttpRequest createRequest(javax.servlet.http.HttpServletRequest,javax.servlet.AsyncContext)> ->_CWE079_
<org.springframework.aop.interceptor.ExposeBeanNameAdvisors: java.lang.String getBeanName(org.aopalliance.intercept.MethodInvocation)> ->_CWE079_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: java.lang.String lambda$formatMappings$4(java.util.function.Function,java.util.Map$Entry)> ->_CWE079_
<org.springframework.format.number.AbstractNumberFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.RequestCondition getCustomCondition()> ->_CWE079_
<org.springframework.core.io.buffer.NettyDataBuffer: java.lang.String toString(java.nio.charset.Charset)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String getMessageInternal(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.function.ErrorHandlingServerResponse: org.springframework.web.servlet.ModelAndView handleError(java.lang.Throwable,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_CWE079_
<org.springframework.core.io.ResourceEditor: java.lang.String resolvePath(java.lang.String)> ->_CWE079_
<org.springframework.web.jsf.el.WebApplicationContextFacesELResolver: java.lang.Object getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler: java.lang.String getUserName(org.springframework.messaging.Message,org.springframework.messaging.MessageHeaders)> ->_CWE079_
<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.RequestCondition getActivePatternsCondition()> ->_CWE079_
<org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler: java.lang.String toString(java.lang.Object)> ->_CWE079_
<org.springframework.core.convert.support.ByteBufferConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String quote(java.lang.String,int,int)> ->_CWE079_
<org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer: org.springframework.test.web.servlet.request.RequestPostProcessor beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder,org.springframework.web.context.WebApplicationContext)> ->_CWE079_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleConversionNotSupported(org.springframework.beans.ConversionNotSupportedException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: org.springframework.web.reactive.result.method.RequestMappingInfo getMappingForMethod(java.lang.reflect.Method,java.lang.Class)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getSanitizedPath(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.function.client.WebClientUtils: reactor.core.publisher.Mono mapToEntity(org.springframework.web.reactive.function.client.ClientResponse,reactor.core.publisher.Mono)> ->_CWE079_
<org.springframework.format.datetime.standard.MonthDayFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: java.lang.String getDescription(java.lang.Object,java.lang.String)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.r2dbc.core.DefaultDatabaseClient: io.r2dbc.spi.Connection createConnectionProxy(io.r2dbc.spi.Connection)> ->_CWE079_
<org.springframework.web.socket.messaging.StompSubProtocolErrorHandler: org.springframework.messaging.Message handleErrorMessageToClient(org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.http.RequestEntity: org.springframework.http.RequestEntity$HeadersBuilder get(java.net.URI)> ->_CWE079_
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.messaging.handler.invocation.InvocableHandlerMethod: java.lang.Object[] getMethodArgumentValues(org.springframework.messaging.Message,java.lang.Object[])> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String arrayToDelimitedString(java.lang.Object[],java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotationUtils: java.lang.Object getAttributeValueForMirrorResolution(java.lang.reflect.Method,java.lang.Object)> ->_CWE079_
<org.springframework.mock.web.MockPart: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContextUtils: org.springframework.web.servlet.FlashMap getOutputFlashMap(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder part(javax.servlet.http.Part[])> ->_CWE079_
<org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.messaging.handler.HandlerMethod: java.lang.String formatInvokeError(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.core.convert.support.PropertiesToStringConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequest: org.springframework.web.servlet.function.ServerRequest$Headers headers()> ->_CWE079_
<org.springframework.core.convert.support.NumberToCharacterConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeClassName(java.lang.Object)> ->_CWE079_
<org.springframework.web.util.HtmlCharacterEntityDecoder: java.lang.String getReferenceSubstring(int)> ->_CWE079_
<org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener: java.lang.String detectDefaultScript(org.springframework.test.context.TestContext,boolean)> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: java.lang.String getStringParameter(javax.servlet.ServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.view.RedirectView: java.lang.String getContextPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.gradle.wrapper.BootstrapMainStarter: java.io.File findLauncherJar(java.io.File)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: org.springframework.web.servlet.HandlerAdapter getHandlerAdapter(java.lang.Object)> ->_CWE079_
<org.springframework.context.event.ApplicationListenerMethodAdapter: java.lang.String getDetailedErrorMessage(java.lang.Object,java.lang.String)> ->_CWE079_
<org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin: byte[] transform(java.lang.String,byte[],java.security.CodeSource,java.lang.ClassLoader)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeScheme(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.jms.listener.AbstractMessageListenerContainer: java.lang.String getDefaultSubscriptionName(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition matchRequestMethod(java.lang.String)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher requestTo(java.lang.String)> ->_CWE079_
<org.springframework.context.support.DelegatingMessageSource: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleNoHandlerFoundException(org.springframework.web.servlet.NoHandlerFoundException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: java.util.Map matchInParameterValuesWithCallParameters(java.util.Map)> ->_CWE079_
<org.springframework.web.servlet.resource.CachingResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_CWE079_
<org.springframework.r2dbc.connection.init.ScriptUtils: java.lang.String readScript(java.io.LineNumberReader,java.lang.String,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.AbstractView: org.springframework.web.reactive.result.view.RequestContext createRequestContext(org.springframework.web.server.ServerWebExchange,java.util.Map)> ->_CWE079_
<org.springframework.web.servlet.handler.HandlerMappingIntrospector: org.springframework.web.servlet.HandlerMapping lambda$initPathPatternMatchableHandlerMappings$3(org.springframework.web.servlet.handler.MatchableHandlerMapping)> ->_CWE079_
<org.springframework.web.servlet.tags.form.AbstractFormTag: java.lang.String getDisplayString(java.lang.Object,java.beans.PropertyEditor)> ->_CWE079_
<org.springframework.core.env.AbstractPropertyResolver: java.lang.String getProperty(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.context.annotation.FullyQualifiedAnnotationBeanNameGenerator: java.lang.String buildDefaultBeanName(org.springframework.beans.factory.config.BeanDefinition)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder characterEncoding(java.lang.String)> ->_CWE079_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: java.lang.String lambda$formatMappings$2(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.AbstractDispatcherServletInitializer: javax.servlet.FilterRegistration$Dynamic registerServletFilter(javax.servlet.ServletContext,javax.servlet.Filter)> ->_CWE079_
<org.springframework.core.convert.support.StringToCharsetConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.view.RedirectView: java.lang.String createTargetUrl(java.util.Map,org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.HeadersRequestCondition access$1500(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.jdbc.support.lob.PassThroughBlob: long position(byte[],long)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor: org.springframework.http.MediaType getMostSpecificMediaType(org.springframework.http.MediaType,org.springframework.http.MediaType)> ->_CWE079_
<org.springframework.web.servlet.theme.FixedThemeResolver: java.lang.String resolveThemeName(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder content(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.PathPatternMatchableHandlerMapping: org.springframework.web.servlet.handler.RequestMatchResult match(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.AppCacheManifestTransformer: org.springframework.web.servlet.resource.AppCacheManifestTransformer$LineOutput processLine(org.springframework.web.servlet.resource.AppCacheManifestTransformer$LineInfo,javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource,org.springframework.web.servlet.resource.ResourceTransformerChain)> ->_CWE079_
<org.springframework.web.servlet.handler.PathPatternMatchableHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder cookie(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.'annotation'.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_CWE079_
<org.springframework.aop.interceptor.SimpleTraceInterceptor: java.lang.String getInvocationDescription(org.aopalliance.intercept.MethodInvocation)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder remoteAddress(java.net.InetSocketAddress)> ->_CWE079_
<org.springframework.beans.ExtendedBeanInfo: java.lang.String propertyNameFor(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.core.convert.support.EnumToStringConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.core.annotation.AttributeMethods: java.lang.String describe(java.lang.Class,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate and(org.springframework.web.servlet.function.RequestPredicate,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter: org.springframework.web.reactive.socket.WebSocketMessage toMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type,java.lang.Object)> ->_CWE079_
<org.springframework.scheduling.support.QuartzCronField: java.time.temporal.Temporal nextOrSame(java.time.temporal.Temporal)> ->_CWE079_
<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest build()> ->_CWE079_
<org.springframework.web.method.annotation.ModelFactory: java.lang.String getNameForParameter(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder body(byte[])> ->_CWE079_
<org.springframework.expression.spel.ast.OpPlus: java.lang.String convertTypedValueToString(org.springframework.expression.TypedValue,org.springframework.expression.spel.ExpressionState)> ->_CWE079_
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec defaultRequest(org.springframework.test.web.servlet.RequestBuilder)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletResponse: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)> ->_CWE079_
<org.springframework.context.support.AbstractRefreshableConfigApplicationContext: java.lang.String resolvePath(java.lang.String)> ->_CWE079_
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.SseServerResponse: org.springframework.web.servlet.function.ServerResponse create(java.util.function.Consumer,java.time.Duration)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder pathInfo(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder POST(org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.EncodedResourceResolver: java.lang.String getAcceptEncoding(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContextUtils: org.springframework.web.servlet.FlashMapManager getFlashMapManager(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.format.datetime.DateFormatter: int getStylePatternForChar(int)> ->_CWE079_
<org.springframework.core.io.support.ResourceArrayPropertyEditor: java.lang.String resolvePath(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder uri(java.net.URI)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketStrategies(org.springframework.messaging.rsocket.RSocketStrategies)> ->_CWE079_
<org.springframework.web.servlet.view.AbstractView: org.springframework.web.servlet.support.RequestContext createRequestContext(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Map)> ->_CWE079_
<org.springframework.http.client.Netty4ClientHttpRequest: io.netty.handler.codec.http.FullHttpRequest createFullHttpRequest(org.springframework.http.HttpHeaders)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate methods(org.springframework.http.HttpMethod[])> ->_CWE079_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: java.lang.String getXmlAsString(java.sql.ResultSet,int)> ->_CWE079_
<org.springframework.core.annotation.MergedAnnotationsCollection: boolean isPresent(java.lang.Object,boolean)> ->_CWE079_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: java.lang.String getXmlAsString(java.sql.ResultSet,java.lang.String)> ->_CWE079_
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.lang.String extractStereotype(org.springframework.core.type.filter.TypeFilter)> ->_CWE079_
<org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler: java.lang.String getSockJsPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.messaging.support.MessageHeaderAccessor: java.lang.String getDetailedLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.core.convert.support.StringToTimeZoneConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeAuthority(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String catalogNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.method.ResolvableMethod: java.lang.String formatAnnotation(java.lang.'annotation'.Annotation)> ->_CWE079_
<org.springframework.web.servlet.handler.SimpleMappingExceptionResolver: org.springframework.web.servlet.ModelAndView doResolveException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceTransformerSupport: java.lang.String resolveUrlPath(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource,org.springframework.web.servlet.resource.ResourceTransformerChain)> ->_CWE079_
<org.springframework.web.socket.WebSocketHttpHeaders: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerMessagingTemplate(org.w3c.dom.Element,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_CWE079_
<org.springframework.util.concurrent.DelegatingCompletableFuture: boolean cancel(boolean)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate path(java.lang.String)> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerUserDestResolver(org.w3c.dom.Element,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_CWE079_
<org.gradle.wrapper.Download: java.lang.String calculateUserInfo(java.net.URI)> ->_CWE079_
<org.springframework.scheduling.support.CronExpression: java.lang.String resolveMacros(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setAsyncRequestTimeout(long)> ->_CWE079_
<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)> ->_CWE079_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.String get(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.config.WebFluxConfigurationSupport: org.springframework.web.reactive.result.method.'annotation'.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.reactive.accept.RequestedContentTypeResolver)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setCustomReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler[])> ->_CWE079_
<org.springframework.http.client.reactive.ReactorClientHttpConnector: org.springframework.http.client.reactive.ReactorClientHttpRequest adaptRequest(org.springframework.http.HttpMethod,java.net.URI,reactor.netty.http.client.HttpClientRequest,reactor.netty.NettyOutbound)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getString(java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.ObjectToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.context.support.ServletContextPropertySource: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: java.util.List initResolvers(org.springframework.web.reactive.result.method.'annotation'.ArgumentResolverConfigurer,org.springframework.core.ReactiveAdapterRegistry,org.springframework.context.ConfigurableApplicationContext,boolean,java.util.List)> ->_CWE079_
<org.springframework.cache.config.CacheNamespaceHandler: org.springframework.beans.factory.config.BeanDefinition parseKeyGenerator(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_CWE079_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeObject(java.lang.Class,java.lang.Object[])> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String getRealPath(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.CompositeRequestCondition: org.springframework.web.servlet.mvc.condition.RequestConditionHolder[] wrap(org.springframework.web.servlet.mvc.condition.RequestCondition[])> ->_CWE079_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: java.lang.String lambda$handle$1(org.springframework.web.server.ServerWebExchange,java.lang.Boolean)> ->_CWE079_
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection getSharedConnectionProxy(javax.jms.Connection)> ->_CWE079_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getNamespaceURI(int)> ->_CWE079_
<org.springframework.web.context.request.async.WebAsyncUtils: org.springframework.web.context.request.async.WebAsyncManager getAsyncManager(javax.servlet.ServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder multipart(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec customReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler[])> ->_CWE079_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String replaceUriTemplateParams(java.lang.String,java.util.List,java.util.Set)> ->_CWE079_
<org.springframework.web.servlet.view.RedirectView: java.lang.String createTargetUrl(java.util.Map,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.expression.common.CompositeStringExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.HeadersRequestCondition getHeadersCondition()> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String extractFileExtension(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)> ->_CWE079_
<org.springframework.mock.web.MockCookie: java.lang.String lambda$extractAttributeValue$1(java.lang.String[],java.lang.String)> ->_CWE079_
<org.springframework.messaging.handler.HandlerMethod: java.lang.String formatArgumentError(org.springframework.core.MethodParameter,java.lang.String)> ->_CWE079_
<org.springframework.context.support.DelegatingMessageSource: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder GET(org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.core.annotation.AnnotationAttributes: java.lang.String getString(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.ResourceHandlerFunction: org.springframework.web.servlet.function.ServerResponse handle(org.springframework.web.servlet.function.ServerRequest)> ->_CWE079_
<org.springframework.http.codec.ResourceHttpMessageWriter: org.springframework.http.MediaType getResourceMediaType(org.springframework.http.MediaType,org.springframework.core.io.Resource,java.util.Map)> ->_CWE079_
<org.gradle.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String tableNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.expression.spel.ast.AstUtils: java.util.List getPropertyAccessorsToTry(java.lang.Class,java.util.List)> ->_CWE079_
<org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler: java.lang.Object getMatchingMapping(java.lang.Object,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.web.servlet.function.support.HandlerFunctionAdapter: java.lang.String lambda$handleAsync$1(java.lang.Object,java.lang.Boolean)> ->_CWE079_
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processClassInheritedAnnotations(java.lang.Object,java.lang.Class,org.springframework.core.'annotation'.MergedAnnotations$SearchStrategy,org.springframework.core.'annotation'.AnnotationsProcessor)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: java.lang.Object processBody(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.http.MediaType,java.lang.Class,org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletResponse: java.lang.String formatDate(long)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder options(java.net.URI)> ->_CWE079_
<org.springframework.web.servlet.tags.form.ValueFormatter: java.lang.String getDisplayString(java.lang.Object,boolean)> ->_CWE079_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec dispatchOptions(boolean)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.ClassLoader overrideThreadContextClassLoader(java.lang.ClassLoader)> ->_CWE079_
<org.springframework.cglib.proxy.MixinBeanEmitter: java.lang.Class[] getInterfaces(java.lang.Class[])> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: org.springframework.web.reactive.result.method.RequestMappingInfo createRequestMappingInfo(org.springframework.web.bind.'annotation'.RequestMapping,org.springframework.web.reactive.result.condition.RequestCondition)> ->_CWE079_
<org.springframework.format.datetime.DateFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.http.HttpHeaders: java.lang.String lambda$setAcceptLanguage$0(java.text.DecimalFormat,java.util.Locale$LanguageRange)> ->_CWE079_
<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String resolveEmbeddedValue(java.lang.String)> ->_CWE079_
<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String getAfterMessage(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.scheduling.support.CompositeCronField: java.time.temporal.Temporal nextOrSame(java.time.temporal.Temporal)> ->_CWE079_
<org.springframework.test.web.servlet.result.JsonPathResultMatchers: java.lang.String getContent(org.springframework.test.web.servlet.MvcResult)> ->_CWE079_
<org.springframework.beans.factory.support.BeanDefinitionReaderUtils: java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.web.servlet.config.'annotation'.PathMatchConfigurer setPatternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: org.springframework.web.servlet.mvc.condition.RequestCondition getCustomTypeCondition(java.lang.Class)> ->_CWE079_
<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: java.lang.String resolveCorsAnnotationValue(java.lang.String)> ->_CWE079_
<org.springframework.messaging.support.MessageHeaderAccessor: java.lang.String getShortPayloadLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.messaging.support.MessageHeaderAccessor: java.lang.String getShortLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.messaging.support.MessageHeaderAccessor: java.lang.String getDetailedPayloadLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.view.RedirectView: java.lang.String lambda$expandTargetUrlTemplate$0(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.RequestBuilder asyncDispatch(org.springframework.test.web.servlet.MvcResult)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition access$1600(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder dataMimeType(org.springframework.util.MimeType)> ->_CWE079_
<org.springframework.web.servlet.config.ResourcesBeanDefinitionParser: java.lang.String registerResourceHandler(org.springframework.beans.factory.xml.ParserContext,org.w3c.dom.Element,org.springframework.beans.factory.config.RuntimeBeanReference,java.lang.Object)> ->_CWE079_
<org.springframework.context.support.MessageSourceSupport: java.lang.String formatMessage(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ServletRequestDataBinderFactory: org.springframework.web.bind.ServletRequestDataBinder createBinderInstance(java.lang.Object,java.lang.String,org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.mock.web.MockServletConfig: java.lang.String getInitParameter(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeQueryParam(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.jdbc.object.StoredProcedure: java.util.Map execute(java.util.Map)> ->_CWE079_
<org.springframework.test.web.servlet.result.MockMvcResultMatchers: org.springframework.test.web.servlet.ResultMatcher redirectedUrl(java.lang.String)> ->_CWE079_
<org.springframework.cglib.core.ClassNameReader: java.lang.String getClassName(org.springframework.asm.ClassReader)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String removeJsessionid(java.lang.String)> ->_CWE079_
<org.springframework.test.util.AopTestUtils: java.lang.Object getUltimateTargetObject(java.lang.Object)> ->_CWE079_
<org.springframework.r2dbc.core.DefaultDatabaseClient: java.lang.String getSql(java.lang.Object)> ->_CWE079_
<org.springframework.core.env.AbstractEnvironment: java.lang.String getRequiredProperty(java.lang.String)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder apply(java.util.function.Consumer)> ->_CWE079_
<org.springframework.core.io.support.ResourcePropertySource: java.lang.String getNameForResource(org.springframework.core.io.Resource)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver: java.lang.String formatUriValue(org.springframework.core.convert.ConversionService,org.springframework.core.convert.TypeDescriptor,java.lang.Object)> ->_CWE079_
<org.springframework.jdbc.config.DatabasePopulatorConfigUtils: java.lang.String getSeparator(org.w3c.dom.Element,org.w3c.dom.Element)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockFilterChain: javax.servlet.ServletRequest getRequest()> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate lambda$pathPredicates$1(org.springframework.web.util.pattern.PathPatternParser,java.lang.String)> ->_CWE079_
<org.springframework.http.ContentDisposition: java.lang.String escapeQuotationsInFilename(java.lang.String)> ->_CWE079_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getNamespaceURI(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotationUtils: java.lang.'annotation'.Annotation getAnnotation(java.lang.'annotation'.Annotation,java.lang.Class)> ->_CWE079_
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object getValueForMirrorResolution(java.lang.reflect.Method,java.lang.Object)> ->_CWE079_
<org.springframework.mock.web.MockCookie: java.lang.String lambda$parse$0(java.lang.String)> ->_CWE079_
<org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method searchInterfaces(java.lang.Class[],java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.reactive.resource.CachingResourceResolver: java.lang.String getContentCodingKey(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.reactive.result.view.ViewResolutionResultHandler: java.lang.String lambda$getNameForReturnValue$5(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.web.server.UnsupportedMediaTypeStatusException: java.lang.String initReason(org.springframework.http.MediaType,org.springframework.core.ResolvableType)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder secure(boolean)> ->_CWE079_
<org.springframework.core.Constants: java.lang.String toCode(java.lang.Object,java.lang.String)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: org.springframework.messaging.Message sendAndReceive(java.lang.Object,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.util.StreamUtils: java.lang.String copyToString(java.io.InputStream,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.context.support.AbstractApplicationContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: org.springframework.mock.web.MockHttpServletRequest postProcess(org.springframework.mock.web.MockHttpServletRequest)> ->_CWE079_
<org.springframework.web.client.DefaultResponseErrorHandler: java.lang.String getErrorMessage(int,java.lang.String,byte[],java.nio.charset.Charset)> ->_CWE079_
<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String getAttributeDescription(java.beans.PropertyDescriptor,java.lang.String)> ->_CWE079_
<org.springframework.web.jsf.el.SpringBeanFacesELResolver: java.lang.Object getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory: org.springframework.core.io.buffer.DataBuffer lambda$join$1(org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate and(java.lang.String,org.springframework.web.servlet.function.RequestPredicate)> ->_CWE079_
<org.springframework.web.reactive.result.condition.CompositeRequestCondition: org.springframework.web.reactive.result.condition.CompositeRequestCondition combine(org.springframework.web.reactive.result.condition.CompositeRequestCondition)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: java.lang.String lambda$contextPath$0(org.springframework.web.util.UriComponents)> ->_CWE079_
<org.springframework.jdbc.core.namedparam.EmptySqlParameterSource: java.lang.String getTypeName(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy: java.lang.String getName(org.springframework.web.method.HandlerMethod,org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.cache.config.CacheAdviceParser: java.util.List parseDefinitionsSources(java.util.List,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StubWebApplicationContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],boolean)> ->_CWE079_
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: java.lang.String getTargetDestination(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.format.datetime.joda.ReadableInstantPrinter: java.lang.String print(org.joda.time.ReadableInstant,java.util.Locale)> ->_CWE079_
<org.springframework.web.reactive.result.method.RequestMappingInfo: org.springframework.web.reactive.result.method.RequestMappingInfo getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.reactive.result.condition.RequestConditionHolder: org.springframework.web.reactive.result.condition.RequestConditionHolder getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.util.DigestUtils: java.lang.String digestAsHexString(java.lang.String,java.io.InputStream)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: java.lang.String header(java.lang.String)> ->_CWE079_
<org.springframework.core.io.buffer.DefaultDataBuffer: org.springframework.core.io.buffer.DefaultDataBuffer fromEmptyByteBuffer(org.springframework.core.io.buffer.DefaultDataBufferFactory,java.nio.ByteBuffer)> ->_CWE079_
<org.springframework.messaging.core.GenericMessagingTemplate: org.springframework.messaging.Message doSendAndReceive(java.lang.Object,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.web.accept.ParameterContentNegotiationStrategy: java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.core.env.PropertySourcesPropertyResolver: java.lang.String getPropertyAsRawString(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder multipart(java.net.URI)> ->_CWE079_
<org.springframework.web.socket.sockjs.frame.AbstractSockJsMessageCodec: java.lang.String escapeSockJsSpecialChars(char[])> ->_CWE079_
<org.springframework.web.servlet.view.tiles3.TilesConfigurer: javax.servlet.ServletContext access$1200(org.springframework.web.servlet.view.tiles3.TilesConfigurer)> ->_CWE079_
<org.springframework.web.servlet.tags.form.FormTag: java.lang.String processAction(java.lang.String)> ->_CWE079_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getRequestUri(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder post(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.beans.BeanUtils: java.lang.String lambda$getParameterNames$1(java.lang.String[],java.lang.reflect.Constructor)> ->_CWE079_
<org.springframework.jdbc.object.SqlFunction: java.lang.Object runGeneric(java.lang.Object[])> ->_CWE079_
<org.springframework.web.context.request.FacesWebRequest: java.lang.String getParameter(java.lang.String)> ->_CWE079_
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultEntityResponseBuilder: org.springframework.web.servlet.function.EntityResponse$Builder header(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockCookie: java.lang.String lambda$extractAttributeValue$1(java.lang.String[],java.lang.String)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String lambda$getServerName$2(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ProducesRequestCondition getProducesCondition()> ->_CWE079_
<org.springframework.mock.web.MockServletContext: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.config.GroovyMarkupConfigurerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ->_CWE079_
<org.springframework.mock.web.MockFilterConfig: java.lang.String getInitParameter(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getCorsHandlerExecutionChain(javax.servlet.http.HttpServletRequest,org.springframework.web.servlet.HandlerExecutionChain,org.springframework.web.cors.CorsConfiguration)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeQuery(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String decode(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.view.UrlBasedViewResolver: org.springframework.web.servlet.View applyLifecycleMethods(java.lang.String,org.springframework.web.servlet.view.AbstractUrlBasedView)> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String changeFirstCharacterCase(java.lang.String,boolean)> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: int getIntParameter(javax.servlet.ServletRequest,java.lang.String,int)> ->_CWE079_
<org.springframework.web.context.support.ServletConfigPropertySource: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.resource.CachingResourceResolver: java.lang.String lambda$getContentCodingKey$1(java.lang.String)> ->_CWE079_
<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.lang.String getMultipartContentType(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.CachingResourceResolver: java.lang.String getContentCodingKey(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.messaging.rsocket.MetadataEncoder: java.lang.String expand(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod: java.lang.String formatErrorForReturnValue(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate contentType(org.springframework.http.MediaType[])> ->_CWE079_
<org.springframework.cglib.transform.impl.InterceptFieldTransformer: java.lang.String callbackName(org.springframework.asm.Type)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: org.springframework.web.servlet.mvc.method.'annotation'.MvcUriComponentsBuilder$MethodArgumentBuilder fromMappingName(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl get$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StubWebApplicationContext: java.lang.Object getBean(java.lang.Class,java.lang.Object[])> ->_CWE079_
<org.springframework.util.xml.DomUtils: java.lang.String getTextValue(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.messaging.simp.SimpMessageHeaderAccessor: java.lang.String getDestination(java.util.Map)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: java.lang.String getRealPath(java.lang.String)> ->_CWE079_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.String getNamespaceURI(org.w3c.dom.Node)> ->_CWE079_
<org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptorFromObject(java.lang.Object)> ->_CWE079_
<org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor: javax.servlet.http.HttpSession getSession(org.springframework.http.server.ServerHttpRequest)> ->_CWE079_
<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)> ->_CWE079_
<org.springframework.test.context.support.TestPropertySourceUtils: java.lang.String lambda$convertInlinedPropertiesToMap$0(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate POST(java.lang.String)> ->_CWE079_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_CWE079_
<org.gradle.cli.AbstractCommandLineConverter: java.lang.Object convert(java.lang.Iterable,java.lang.Object)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getResolvedLookupPath(javax.servlet.ServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.mock.web.MockHttpServletRequest buildRequest(javax.servlet.ServletContext)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getCookieHeader(javax.servlet.http.Cookie)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMediaTypeNotSupported(org.springframework.web.HttpMediaTypeNotSupportedException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl post$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.web.util.pattern.PathPattern: org.springframework.web.util.pattern.PathPattern combine(org.springframework.web.util.pattern.PathPattern)> ->_CWE079_
<org.springframework.test.web.reactive.server.HttpHandlerConnector: org.springframework.http.server.reactive.ServerHttpRequest adaptRequest(org.springframework.mock.http.client.reactive.MockClientHttpRequest,org.reactivestreams.Publisher)> ->_CWE079_
<org.springframework.http.server.reactive.ServletHttpHandlerAdapter: org.springframework.http.server.reactive.ServletServerHttpRequest createRequest(javax.servlet.http.HttpServletRequest,javax.servlet.AsyncContext)> ->_CWE079_
<org.springframework.beans.factory.support.ConstructorResolver: java.lang.reflect.Constructor getUserDeclaredConstructor(java.lang.reflect.Constructor)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultRenderingResponseBuilder: org.springframework.web.servlet.function.RenderingResponse$Builder header(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.web.reactive.result.view.ViewResolutionResultHandler: java.lang.String getNameForReturnValue(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.jms.support.converter.SimpleMessageConverter: java.lang.String extractStringFromMessage(javax.jms.TextMessage)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder metadataMimeType(org.springframework.util.MimeType)> ->_CWE079_
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processMethodInheritedAnnotations(java.lang.Object,java.lang.reflect.Method,org.springframework.core.'annotation'.AnnotationsProcessor)> ->_CWE079_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.String put(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.test.web.reactive.server.ExchangeResult: java.lang.String formatHeaders(org.springframework.http.HttpHeaders,java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder: java.nio.charset.Charset getCharsetOrDefault(javax.servlet.http.Part,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.format.datetime.joda.DurationFormatter: java.lang.String print(org.joda.time.Duration,java.util.Locale)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder patch(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport: org.springframework.web.servlet.HandlerMapping stompWebSocketHandlerMapping(org.springframework.web.socket.WebSocketHandler,org.springframework.scheduling.TaskScheduler)> ->_CWE079_
<org.springframework.jdbc.object.SqlFunction: int run(int)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.RequestConditionHolder access$800()> ->_CWE079_
<org.springframework.r2dbc.connection.init.ScriptParseException: java.lang.String buildMessage(java.lang.String,org.springframework.core.io.support.EncodedResource)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder applyContributors(org.springframework.web.util.UriComponentsBuilder,java.lang.reflect.Method,java.lang.Object[])> ->_CWE079_
<org.springframework.asm.Type: java.lang.String getMethodDescriptor(org.springframework.asm.Type,org.springframework.asm.Type[])> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PATCH(org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.servlet.ModelAndView getModelAndView(org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.method.'annotation'.ModelFactory,org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: org.apache.http.client.config.RequestConfig createRequestConfig(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder route(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.web.util.ServletRequestPathUtils: org.springframework.http.server.RequestPath parseAndCache(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String,java.util.List,java.lang.String)> ->_CWE079_
<org.springframework.core.Conventions: java.lang.String getQualifiedAttributeName(java.lang.Class,java.lang.String)> ->_CWE079_
<org.springframework.context.index.processor.TypeHelper: java.lang.String getType(javax.lang.model.element.AnnotationMirror)> ->_CWE079_
<org.springframework.aop.support.AopUtils: boolean canApply(org.springframework.aop.Advisor,java.lang.Class,boolean)> ->_CWE079_
<org.springframework.context.index.processor.TypeHelper: java.lang.String getType(javax.lang.model.element.Element)> ->_CWE079_
<org.springframework.web.method.ControllerAdviceBean: java.lang.String lambda$new$0(org.springframework.beans.factory.BeanFactory,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.String formatValue(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder delete(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator: java.lang.String transformPath(java.lang.String)> ->_CWE079_
<org.springframework.format.datetime.joda.ReadableInstantPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor: org.springframework.http.server.ServletServerHttpResponse createOutputMessage(org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor: java.lang.String getExecutorQualifier(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.servlet.FrameworkServlet: java.lang.String getUsernameForRequest(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.asm.MethodWriter: boolean canCopyMethodAttributes(org.springframework.asm.ClassReader,boolean,boolean,int,int,int)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultAsyncServerResponse: org.springframework.web.servlet.ModelAndView writeTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_CWE079_
<org.springframework.format.datetime.standard.PeriodFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.util.ReflectionUtils: java.lang.Object getField(java.lang.reflect.Field,java.lang.Object)> ->_CWE079_
<org.springframework.core.testfixture.io.SerializationTestUtils: java.lang.Object serializeAndDeserialize(java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.format.datetime.joda.YearMonthFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletResponse: javax.servlet.http.Cookie getCookie(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processMethodAnnotations(java.lang.Object,int,java.lang.reflect.Method,org.springframework.core.'annotation'.AnnotationsProcessor)> ->_CWE079_
<org.springframework.asm.ClassReader: int getTypeAnnotationBytecodeOffset(int[],int)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher requestTo(java.net.URI)> ->_CWE079_
<org.springframework.http.converter.StringHttpMessageConverter: java.lang.String readInternal(java.lang.Class,org.springframework.http.HttpInputMessage)> ->_CWE079_
<org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.request.ServletRequestAttributes currentRequestAttributes()> ->_CWE079_
<org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter: java.lang.Object generate(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ->_CWE079_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.web.client.AsyncRequestCallback acceptHeaderRequestCallback(java.lang.Class)> ->_CWE079_
<org.springframework.beans.PropertyAccessorUtils: java.lang.String getPropertyName(java.lang.String)> ->_CWE079_
<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: javax.servlet.http.HttpServletRequest getRequest()> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getOriginatingServletPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.util.xml.SimpleNamespaceContext: java.lang.String getNamespaceURI(java.lang.String)> ->_CWE079_
<org.springframework.validation.AbstractErrors: java.lang.String fixedField(java.lang.String)> ->_CWE079_
<org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException: java.lang.String getValidationErrorMessage(org.springframework.validation.BindingResult)> ->_CWE079_
<org.springframework.aop.config.AdvisorComponentDefinition: java.lang.String buildDescription(org.springframework.beans.factory.config.BeanReference,org.springframework.beans.factory.config.BeanDefinition)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.'annotation'.InterceptorRegistration addWebRequestInterceptor(org.springframework.web.context.request.WebRequestInterceptor)> ->_CWE079_
<org.springframework.web.reactive.function.server.PathResourceLookupFunction: java.lang.String processPath(java.lang.String)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher queryParam(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.core.codec.Hints: java.lang.String getLogPrefix(java.util.Map)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_CWE079_
<org.springframework.core.convert.support.ObjectToOptionalConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.core.Conventions: java.lang.String getVariableNameForParameter(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder headers(java.util.function.Consumer)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: java.lang.String getDefaultViewName(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.util.UriComponentsBuilder: java.net.InetSocketAddress parseForwardedFor(org.springframework.http.HttpRequest,java.net.InetSocketAddress)> ->_CWE079_
<org.springframework.format.datetime.standard.PeriodFormatter: java.lang.String print(java.time.Period,java.util.Locale)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl patch$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.UrlFilenameViewController: java.lang.String getViewNameForUrlPath(java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.WriteResultPublisher: java.lang.String access$100(org.springframework.http.server.reactive.WriteResultPublisher)> ->_CWE079_
<org.springframework.jmx.support.JmxUtils: java.lang.String getAttributeName(java.beans.PropertyDescriptor,boolean)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition: org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition combine(org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition)> ->_CWE079_
<org.springframework.web.method.annotation.RequestParamMethodArgumentResolver: java.lang.String formatUriValue(org.springframework.core.convert.ConversionService,org.springframework.core.convert.TypeDescriptor,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: org.springframework.web.servlet.handler.RequestMatchResult match(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.test.web.reactive.server.WiretapConnector: java.lang.String lambda$null$1(java.lang.String)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable)> ->_CWE079_
<org.springframework.core.io.buffer.DefaultDataBuffer: org.springframework.core.io.buffer.DefaultDataBuffer fromFilledByteBuffer(org.springframework.core.io.buffer.DefaultDataBufferFactory,java.nio.ByteBuffer)> ->_CWE079_
<org.springframework.format.datetime.standard.DurationFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.FrameworkServlet: java.lang.String lambda$logResult$0(javax.servlet.http.HttpServletResponse,java.lang.String)> ->_CWE079_
<org.springframework.util.StreamUtils: java.lang.String copyToString(java.io.ByteArrayOutputStream,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String resolveCodeWithoutArguments(java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.test.web.servlet.result.HandlerResultMatchers: org.springframework.test.web.servlet.ResultMatcher handlerType(java.lang.Class)> ->_CWE079_
<org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition: org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition combine(org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.HandlerExceptionResolver handlerExceptionResolver(org.springframework.web.accept.ContentNegotiationManager)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequest: javax.servlet.http.HttpServletRequest servletRequest()> ->_CWE079_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: java.lang.String createParameterBinding(org.springframework.jdbc.core.SqlParameter)> ->_CWE079_
<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String createMessage(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.format.datetime.standard.InstantFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.r2dbc.core.ConnectionFunction: java.lang.Object apply(java.lang.Object)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.Object unwrapOptional(java.lang.Object)> ->_CWE079_
<org.springframework.test.util.ReflectionTestUtils: java.lang.String safeToString(java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder params(java.util.function.Consumer)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(long[])> ->_CWE079_
<org.springframework.web.context.request.async.WebAsyncManager: org.springframework.web.context.request.async.DeferredResultProcessingInterceptor getDeferredResultInterceptor(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder locale(java.util.Locale)> ->_CWE079_
<org.springframework.http.HttpHeaders: java.lang.String getFieldValues(java.lang.String)> ->_CWE079_
<org.springframework.messaging.rsocket.DefaultRSocketRequester: org.springframework.messaging.rsocket.RSocketRequester$RequestSpec metadata(java.lang.Object,org.springframework.util.MimeType)> ->_CWE079_
<org.springframework.http.RequestEntity: java.lang.String format(org.springframework.http.HttpMethod,java.lang.String,java.lang.Object,org.springframework.http.HttpHeaders)> ->_CWE079_
<org.springframework.web.multipart.commons.CommonsFileUploadSupport: java.lang.String lambda$cleanupFileItems$1(org.springframework.web.multipart.commons.CommonsMultipartFile,java.lang.Boolean)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.method.RequestMappingInfo combine(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_CWE079_
<org.springframework.format.datetime.joda.MillisecondInstantPrinter: java.lang.String print(java.lang.Long,java.util.Locale)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: org.springframework.web.servlet.mvc.condition.RequestCondition getCustomMethodCondition(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.servlet.resource.ContentVersionStrategy: java.lang.String getResourceVersion(org.springframework.core.io.Resource)> ->_CWE079_
<org.springframework.core.io.buffer.DefaultDataBuffer: int lastIndexOf(java.util.function.IntPredicate,int)> ->_CWE079_
<org.springframework.web.testfixture.http.client.reactive.MockClientHttpResponse: java.lang.String lambda$getBodyAsString$1(org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: java.lang.String formatMappings(java.lang.Class,java.util.Map)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeUserInfo(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String getFilename(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getContextUrl(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeFragment(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter initDelegate(org.springframework.web.context.WebApplicationContext)> ->_CWE079_
<org.springframework.web.reactive.resource.ResourceTransformerSupport: java.lang.String toAbsolutePath(java.lang.String,org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.String getPropertyMethodSuffix(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.request.ServletRequestAttributes access$400()> ->_CWE079_
<org.springframework.format.datetime.standard.TemporalAccessorPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String getMessageFromParent(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.format.datetime.joda.MonthDayFormatter: java.lang.String print(org.joda.time.MonthDay,java.util.Locale)> ->_CWE079_
<org.springframework.mock.http.server.reactive.MockServerHttpResponse: java.lang.String lambda$getBodyAsString$4(java.nio.charset.Charset,org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.web.servlet.support.AbstractFlashMapManager: org.springframework.web.servlet.FlashMap getMatchingFlashMap(java.util.List,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.context.config.LoadTimeWeaverBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService: java.lang.String selectProtocol(org.springframework.http.HttpHeaders,org.springframework.web.reactive.socket.WebSocketHandler)> ->_CWE079_
<org.springframework.web.reactive.result.view.RedirectView: java.lang.String encodeUriVariable(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.datasource.init.ScriptParseException: java.lang.String buildMessage(java.lang.String,org.springframework.core.io.support.EncodedResource)> ->_CWE079_
<org.springframework.core.io.buffer.NettyDataBuffer: int lastIndexOf(java.util.function.IntPredicate,int)> ->_CWE079_
<org.springframework.http.HttpHeaders: java.lang.String lambda$null$4(java.lang.String)> ->_CWE079_
<org.springframework.cglib.reflect.FastClass: java.lang.String getSignatureWithoutReturnType(java.lang.String,java.lang.Class[])> ->_CWE079_
<org.springframework.http.client.OkHttp3ClientHttpRequestFactory: okhttp3.Request buildRequest(org.springframework.http.HttpHeaders,byte[],java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.web.servlet.view.RedirectView: java.lang.String updateTargetUrl(java.lang.String,java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy: javax.servlet.http.HttpServletRequest getHttpServletRequest(org.springframework.http.server.ServerHttpRequest)> ->_CWE079_
<org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator: java.lang.String getViewName(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.r2dbc.connection.ConnectionFactoryUtils: java.lang.String buildMessage(java.lang.String,java.lang.String,io.r2dbc.spi.R2dbcException)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String classPackageAsResourcePath(java.lang.Class)> ->_CWE079_
<org.springframework.core.convert.support.GenericConversionService: java.lang.Object handleConverterNotFound(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processMethodHierarchy(java.lang.Object,int[],java.lang.Class,org.springframework.core.'annotation'.AnnotationsProcessor,java.lang.reflect.Method,boolean)> ->_CWE079_
<org.springframework.transaction.reactive.TransactionalOperatorImpl: reactor.core.publisher.Mono transactional(reactor.core.publisher.Mono)> ->_CWE079_
<org.springframework.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodProxyField(org.springframework.cglib.core.Signature)> ->_CWE079_
<org.springframework.web.servlet.handler.HandlerMappingIntrospector: org.springframework.web.servlet.handler.MatchableHandlerMapping getMatchableHandlerMapping(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.core.io.buffer.DefaultDataBuffer: java.lang.String toString(int,int,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: java.lang.String urlDecode(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.UrlFilenameViewController: java.lang.String extractOperableUrl(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder put(java.net.URI)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition getConsumesCondition()> ->_CWE079_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: java.lang.String lambda$formatMappings$4(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.core.io.buffer.DefaultDataBuffer: int calculateCapacity(int)> ->_CWE079_
<org.springframework.web.reactive.result.condition.HeadersRequestCondition: org.springframework.web.reactive.result.condition.HeadersRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider: java.lang.String lookupDefaultSchema(java.sql.DatabaseMetaData)> ->_CWE079_
<org.springframework.test.context.MergedContextConfiguration: java.lang.String nullSafeClassName(org.springframework.test.context.ContextLoader)> ->_CWE079_
<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping: java.lang.String lambda$handleMatch$2(org.springframework.web.util.pattern.PathPattern,org.springframework.http.server.PathContainer)> ->_CWE079_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder onError(java.util.function.Predicate,java.util.function.BiFunction)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate param(java.lang.String,java.util.function.Predicate)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder fileUpload(java.net.URI)> ->_CWE079_
<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: java.lang.String getAspectName(org.springframework.aop.Advisor)> ->_CWE079_
<org.springframework.web.reactive.resource.ResourceUrlProvider: java.lang.String prependLeadingSlash(java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method searchForMatch(java.lang.Class,java.lang.reflect.Method)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder sessionAttrs(java.util.Map)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String decode(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.core.env.AbstractEnvironment: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.servlet.HandlerInterceptor adaptInterceptor(java.lang.Object)> ->_CWE079_
<org.springframework.web.method.HandlerMethod: java.lang.String formatArgumentError(org.springframework.core.MethodParameter,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping: org.springframework.web.reactive.result.method.RequestMappingInfo getMatchingMapping(org.springframework.web.reactive.result.method.RequestMappingInfo,org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnName(int)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder flashAttr(java.lang.String,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor: java.lang.String getRequestValueForAttribute(java.lang.String,org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.format.datetime.joda.ReadablePartialPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: java.util.List parseDocument(org.springframework.core.io.Resource,org.w3c.dom.Document,java.util.List)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder options(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder request(java.lang.String,java.net.URI)> ->_CWE079_
<org.springframework.jms.connection.CachingConnectionFactory: javax.jms.Session getCachedSessionProxy(javax.jms.Session,java.util.Deque)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpRequestMethodNotSupported(org.springframework.web.HttpRequestMethodNotSupportedException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.orm.jpa.ExtendedEntityManagerCreator: javax.persistence.EntityManager createProxy(javax.persistence.EntityManager,java.lang.Class,java.lang.ClassLoader,org.springframework.dao.support.PersistenceExceptionTranslator,java.lang.Boolean,boolean,boolean)> ->_CWE079_
<org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory: org.springframework.core.io.buffer.DataBuffer createLeakAwareDataBuffer(org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: java.lang.String lambda$getAspectName$0(org.springframework.aop.Advisor)> ->_CWE079_
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String convertToReference(char,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.SQLErrorCodesFactory: java.lang.String identify(javax.sql.DataSource)> ->_CWE079_
<org.springframework.jmx.support.JmxUtils: java.lang.Class getMXBeanInterface(java.lang.Class)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getPathWithinServletMapping(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl delete$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletConfig: java.lang.String getInitParameter(java.lang.String)> ->_CWE079_
<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String resolveCodeWithoutArguments(java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder add(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec filters(javax.servlet.Filter[])> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String toLanguageTag(java.util.Locale)> ->_CWE079_
<org.springframework.mock.http.MockHttpOutputMessage: java.lang.String getBodyAsString(java.nio.charset.Charset)> ->_CWE079_
<org.springframework.expression.spel.ast.Indexer: java.lang.String access$502(org.springframework.expression.spel.ast.Indexer,java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String lambda$encodeUriVariables$1(java.lang.Object)> ->_CWE079_
<org.springframework.web.util.JavaScriptUtils: java.lang.String javaScriptEscape(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.UrlFilenameViewController: java.lang.String postProcessViewName(java.lang.String)> ->_CWE079_
<org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory: org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.test.web.servlet.result.XpathResultMatchers: java.lang.String getDefinedEncoding(org.springframework.mock.web.MockHttpServletResponse)> ->_CWE079_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder cookie(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: java.lang.String encodeCookies(javax.servlet.http.Cookie[])> ->_CWE079_
<org.springframework.context.support.LiveBeansView: java.lang.String generateJson(java.util.Set)> ->_CWE079_
<org.springframework.context.annotation.ConfigurationClassParser: org.springframework.context.'annotation'.ConfigurationClassParser$SourceClass doProcessConfigurationClass(org.springframework.context.'annotation'.ConfigurationClass,org.springframework.context.'annotation'.ConfigurationClassParser$SourceClass,java.util.function.Predicate)> ->_CWE079_
<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.Class discoverPublicDeclaringClass(java.lang.reflect.Method,java.lang.Class)> ->_CWE079_
<org.springframework.core.testfixture.io.SerializationTestUtils: java.lang.Object serializeAndDeserialize(java.lang.Object)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodePort(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.StringToBooleanConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.core.env.SystemEnvironmentPropertySource: java.lang.String checkPropertyName(java.lang.String)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: java.lang.String getRealPath(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.ServletUriComponentsBuilder: org.springframework.web.servlet.support.ServletUriComponentsBuilder fromServletMapping(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.util.Base64Utils: java.lang.String encodeToString(byte[])> ->_CWE079_
<org.springframework.jdbc.support.lob.DefaultLobHandler: java.lang.String getClobAsString(java.sql.ResultSet,int)> ->_CWE079_
<org.springframework.util.Assert: java.lang.String nullSafeGet(java.util.function.Supplier)> ->_CWE079_
<org.springframework.util.xml.SimpleNamespaceContext: java.lang.String getPrefix(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContextUtils: org.springframework.web.servlet.ThemeResolver getThemeResolver(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object convertResultValueIfNecessary(java.lang.Object,org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String getFinalPath(org.springframework.beans.AbstractNestablePropertyAccessor,java.lang.String)> ->_CWE079_
<org.springframework.web.util.WebUtils: java.lang.String getSessionId(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)> ->_CWE079_
<org.springframework.core.io.VfsUtils: java.lang.String getName(java.lang.Object)> ->_CWE079_
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String adaptInnerBeanName(java.lang.String)> ->_CWE079_
<org.springframework.objenesis.instantiator.basic.ProxyingInstantiator: java.lang.String nameForSubclass(java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate pathExtension(java.util.function.Predicate)> ->_CWE079_
<org.springframework.util.xml.AbstractXMLStreamReader: int getTextCharacters(int,char[],int,int)> ->_CWE079_
<org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter: org.springframework.web.reactive.socket.WebSocketMessage toMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type,java.lang.Object)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String classNamesToString(java.util.Collection)> ->_CWE079_
<org.springframework.web.util.OpaqueUriComponents: org.springframework.web.util.UriComponents expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.HandlerMapping resourceHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_CWE079_
<org.springframework.web.util.WebUtils: java.lang.String getRealPath(javax.servlet.ServletContext,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PUT(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.core.convert.support.StringToLocaleConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getNamespacePrefix(int)> ->_CWE079_
<org.springframework.test.web.servlet.TestDispatcherServlet: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.jms.support.SimpleJmsHeaderMapper: java.lang.String toHeaderName(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.CachingResourceTransformer: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource,org.springframework.web.servlet.resource.ResourceTransformerChain)> ->_CWE079_
<org.springframework.core.convert.support.ZonedDateTimeToCalendarConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder contentType(java.lang.String)> ->_CWE079_
<org.springframework.core.io.buffer.DataBufferWrapper: java.lang.String toString(int,int,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.messaging.support.NativeMessageHeaderAccessor: java.lang.String getFirstNativeHeader(java.lang.String,java.util.Map)> ->_CWE079_
<org.springframework.web.servlet.config.TilesConfigurerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.format.support.FormattingConversionService: java.lang.Class getFieldType(java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: java.lang.String getParentName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ->_CWE079_
<org.springframework.web.context.request.FacesWebRequest: java.lang.String getDescription(boolean)> ->_CWE079_
<org.springframework.web.servlet.tags.form.OptionWriter: java.lang.String getDisplayString(java.lang.Object)> ->_CWE079_
<org.springframework.web.util.ContentCachingRequestWrapper: java.lang.String getParameter(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getTableName(int)> ->_CWE079_
<org.springframework.web.util.WebUtils: java.lang.String findParameterValue(javax.servlet.ServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getOriginatingRequestUri(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.util.MimeType: java.lang.String getParameter(java.lang.String)> ->_CWE079_
<org.springframework.beans.TypeConverterDelegate: java.lang.String buildKeyedPropertyName(java.lang.String,java.lang.Object)> ->_CWE079_
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.aop.config.AdvisorComponentDefinition: java.lang.String buildDescription(org.springframework.beans.factory.config.BeanReference,org.springframework.beans.factory.config.BeanReference)> ->_CWE079_
<org.gradle.cli.CommandLineParser: java.lang.String join(java.util.Collection,java.lang.String)> ->_CWE079_
<org.springframework.core.env.CommandLinePropertySource: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String lambda$getServerPort$3(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.PathResourceResolver: java.lang.String encodeIfNecessary(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)> ->_CWE079_
<org.springframework.web.reactive.resource.ResourceWebHandler: java.lang.String cleanLeadingSlash(java.lang.String)> ->_CWE079_
<org.springframework.cache.support.NoOpCache: java.lang.Object get(java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: javax.servlet.http.Part getPart(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processElement(java.lang.Object,java.lang.reflect.AnnotatedElement,org.springframework.core.'annotation'.AnnotationsProcessor)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getCloseSuppressingConnectionProxy(java.sql.Connection)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleBindException(org.springframework.validation.BindException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.support.HandlerFunctionAdapter: org.springframework.web.context.request.async.WebAsyncManager getWebAsyncManager(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: java.lang.String lambda$formatMappings$4(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate GET(java.lang.String)> ->_CWE079_
<org.springframework.core.ExceptionDepthComparator: int getDepth(java.lang.Class,java.lang.Class,int)> ->_CWE079_
<org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter: org.springframework.test.web.servlet.request.RequestPostProcessor beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder,org.springframework.web.context.WebApplicationContext)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getPackageName(java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getThemeMessage(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.ViewResolverRegistry: org.springframework.web.servlet.view.ContentNegotiatingViewResolver initContentNegotiatingViewResolver(org.springframework.web.servlet.View[])> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerUserRegistryMessageHandler(org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.config.RuntimeBeanReference,java.lang.String,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_CWE079_
<org.springframework.core.codec.StringDecoder: java.lang.String lambda$decode$4(java.lang.String,java.util.Map,java.lang.Boolean)> ->_CWE079_
<org.springframework.web.util.UriComponents: java.lang.String getVariableName(java.lang.String)> ->_CWE079_
<org.springframework.scheduling.commonj.TimerManagerTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher queryParam(java.lang.String,org.hamcrest.Matcher[])> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getQualifiedMethodName(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler: org.springframework.core.ResolvableType getElementType(org.springframework.core.ReactiveAdapter,org.springframework.core.ResolvableType)> ->_CWE079_
<org.springframework.web.reactive.accept.ParameterContentTypeResolver: java.lang.String formatKey(java.lang.String)> ->_CWE079_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String replacePlaceholders(java.lang.String,java.util.Properties)> ->_CWE079_
<org.springframework.web.servlet.config.ScriptTemplateConfigurerBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.r2dbc.core.DefaultDatabaseClient: java.lang.String lambda$sql$0(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnLabel(int)> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerRequestHandler(org.w3c.dom.Element,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.TestDispatcherServlet: org.springframework.test.web.servlet.DefaultMvcResult getMvcResult(javax.servlet.ServletRequest)> ->_CWE079_
<org.springframework.messaging.simp.SimpMessageHeaderAccessor: java.lang.String getSessionId(java.util.Map)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getPrecision(int)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StubWebApplicationContext: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.view.freemarker.FreeMarkerView: freemarker.ext.servlet.HttpSessionHashModel buildSessionModel(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.context.index.processor.TypeHelper: java.lang.String getType(javax.lang.model.type.TypeMirror)> ->_CWE079_
<org.springframework.core.io.buffer.DataBufferUtils: org.springframework.core.io.buffer.DataBuffer touch(org.springframework.core.io.buffer.DataBuffer,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.reactive.server.HeaderAssertions: java.lang.String getRequiredValue(java.lang.String)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)> ->_CWE079_
<org.springframework.messaging.simp.stomp.StompHeaderAccessor: java.lang.String getShortLogMessage(java.lang.Object)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String formatDate(long)> ->_CWE079_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)> ->_CWE079_
<org.springframework.jdbc.support.JdbcUtils: java.lang.String lookupColumnName(java.sql.ResultSetMetaData,int)> ->_CWE079_
<org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider: java.lang.String parameterNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctions: org.springframework.web.servlet.function.RouterFunction resources(java.lang.String,org.springframework.core.io.Resource)> ->_CWE079_
<org.springframework.test.context.support.TestPropertySourceAttributes: java.lang.String detectDefaultPropertiesFile(java.lang.Class)> ->_CWE079_
<org.springframework.core.io.buffer.NettyDataBuffer: java.lang.String toString(int,int,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: java.lang.String lambda$logResponse$4(org.springframework.web.server.ServerWebExchange,java.lang.Boolean)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.method.RequestMappingInfo addCustomCondition(org.springframework.web.servlet.mvc.condition.RequestCondition)> ->_CWE079_
<org.springframework.util.StringUtils: java.lang.String getFilenameExtension(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder flashAttrs(java.util.Map)> ->_CWE079_
<org.springframework.web.method.HandlerMethod: java.lang.String lambda$formatInvokeError$0(java.lang.Object[],int)> ->_CWE079_
<org.springframework.http.HttpHeaders: java.lang.String formatDate(long)> ->_CWE079_
<org.springframework.jca.work.SimpleTaskWorkManager: long executeWork(org.springframework.core.task.TaskExecutor,javax.resource.spi.work.Work,long,boolean,javax.resource.spi.work.ExecutionContext,javax.resource.spi.work.WorkListener)> ->_CWE079_
<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.lang.String getParameter(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: javax.servlet.http.HttpServletRequest getRequest()> ->_CWE079_
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)> ->_CWE079_
<org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource: java.lang.String getTypeName(java.lang.String)> ->_CWE079_
<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor array(org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String parseSqlStatementIntoString(java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.aop.interceptor.AbstractMonitoringInterceptor: java.lang.String createInvocationTraceName(org.aopalliance.intercept.MethodInvocation)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String getClassFileName(java.lang.Class)> ->_CWE079_
<org.springframework.test.web.servlet.result.MockMvcResultMatchers: org.springframework.test.web.servlet.ResultMatcher redirectedUrlPattern(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_CWE079_
<org.springframework.http.server.reactive.AbstractServerHttpRequest: java.lang.String decodeQueryParam(java.lang.String)> ->_CWE079_
<org.springframework.web.jsf.DelegatingNavigationHandlerProxy: java.lang.String getTargetBeanName(javax.faces.context.FacesContext)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl options$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition: org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.format.datetime.standard.YearMonthFormatter: java.lang.String print(java.time.YearMonth,java.util.Locale)> ->_CWE079_
<org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter: org.springframework.web.reactive.socket.WebSocketMessage toMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate or(org.springframework.web.servlet.function.RequestPredicate,java.lang.String)> ->_CWE079_
<org.springframework.messaging.converter.JsonbMessageConverter: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver: java.lang.String lambda$resolveNamedValue$0(java.lang.String,org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.context.event.ApplicationListenerMethodAdapter: java.lang.String getInvocationErrorMessage(java.lang.Object,java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder: org.springframework.mock.web.MockHttpServletRequest createServletRequest(javax.servlet.ServletContext)> ->_CWE079_
<org.springframework.web.servlet.resource.PathResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_CWE079_
<org.springframework.core.convert.support.ArrayToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder file(java.lang.String,byte[])> ->_CWE079_
<org.springframework.web.cors.CorsUtils: int getPort(java.lang.String,int)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder contextPath(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.condition.ParamsRequestCondition: org.springframework.web.reactive.result.condition.ParamsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.reflect.Method getInterfaceMethodIfPossible(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.jca.cci.object.SimpleRecordOperation: javax.resource.cci.Record execute(javax.resource.cci.Record)> ->_CWE079_
<org.springframework.core.convert.support.StringToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.jdbc.object.SqlUpdate: int update(int,int)> ->_CWE079_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: java.lang.Object getMatchingMapping(java.lang.Object,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.String remove(java.lang.Object)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodeFragment(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.jdbc.core.ColumnMapRowMapper: java.lang.String getColumnKey(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.condition.RequestConditionHolder: org.springframework.web.reactive.result.condition.RequestConditionHolder combine(org.springframework.web.reactive.result.condition.RequestConditionHolder)> ->_CWE079_
<org.springframework.jms.connection.ConnectionFactoryUtils: javax.jms.Session getTargetSession(javax.jms.Session)> ->_CWE079_
<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockBodyContent: javax.servlet.jsp.JspWriter adaptJspWriter(java.io.Writer,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.aop.scope.ScopedProxyUtils: java.lang.String getOriginalBeanName(java.lang.String)> ->_CWE079_
<org.springframework.test.context.web.ServletTestExecutionListener: java.lang.String lambda$setUpRequestContextIfNecessary$0(org.springframework.test.context.TestContext)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder OPTIONS(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: org.springframework.messaging.simp.SimpMessageMappingInfo getMatchingMapping(org.springframework.messaging.simp.SimpMessageMappingInfo,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy: java.lang.String getName(org.springframework.web.method.HandlerMethod,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.CorsRegistration: org.springframework.web.servlet.config.'annotation'.CorsRegistration combine(org.springframework.web.cors.CorsConfiguration)> ->_CWE079_
<org.springframework.orm.jpa.EntityManagerFactoryUtils: javax.persistence.EntityManager doGetTransactionalEntityManager(javax.persistence.EntityManagerFactory,java.util.Map,boolean)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object[])> ->_CWE079_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.web.reactive.result.view.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView doResolveHandlerMethodException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.method.HandlerMethod,java.lang.Exception)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StubWebApplicationContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.util.Locale)> ->_CWE079_
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)> ->_CWE079_
<org.springframework.test.web.servlet.result.PrintingResultHandler: java.lang.String lambda$getSessionAttributes$1(java.lang.String)> ->_CWE079_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlEscapeHex(java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.ArrayToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver: org.springframework.web.servlet.View getBestView(java.util.List,java.util.List,org.springframework.web.context.request.RequestAttributes)> ->_CWE079_
<org.springframework.context.annotation.AnnotationBeanNameGenerator: java.lang.String buildDefaultBeanName(org.springframework.beans.factory.config.BeanDefinition)> ->_CWE079_
<org.springframework.context.annotation.BeanAnnotationHelper: java.lang.String determineBeanNameFor(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method searchCandidates(java.util.List,java.lang.reflect.Method)> ->_CWE079_
<org.springframework.expression.spel.CodeFlow: java.lang.String toBoxedDescriptor(java.lang.String)> ->_CWE079_
<org.gradle.wrapper.GradleWrapperMain: java.io.File wrapperProperties(java.io.File)> ->_CWE079_
<org.springframework.web.servlet.view.script.ScriptTemplateView: java.lang.String lambda$renderMergedOutputModel$0(java.lang.String)> ->_CWE079_
<org.springframework.web.cors.reactive.CorsUtils: int getPort(java.lang.String,int)> ->_CWE079_
<org.springframework.core.convert.support.StringToCharacterConverter: java.lang.Object convert(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: java.lang.String lambda$cookies$1(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.config.ScriptTemplateConfigurerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.'annotation'.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)> ->_CWE079_
<org.springframework.test.web.reactive.server.ExchangeResult: java.lang.String lambda$formatHeaders$0(java.util.Map$Entry)> ->_CWE079_
<org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getNString(int)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder param(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.context.config.MBeanServerBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getCloseSuppressingConnectionProxy(javax.resource.cci.Connection)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getPathWithinServletMapping(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder request(org.springframework.http.HttpMethod,java.net.URI)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getContextPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer: java.lang.String resolvePlaceholder(java.lang.String,java.util.Properties)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContextUtils: org.springframework.web.servlet.LocaleResolver getLocaleResolver(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.config.FreeMarkerConfigurerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.util.AntPathMatcher: java.lang.String combine(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.view.AbstractView: javax.servlet.http.HttpServletRequest getRequestToExpose(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: org.springframework.web.reactive.result.condition.RequestCondition getCustomTypeCondition(java.lang.Class)> ->_CWE079_
<org.springframework.jca.cci.object.MappingRecordOperation: java.lang.Object execute(java.lang.Object)> ->_CWE079_
<org.springframework.util.xml.XmlValidationModeDetector: java.lang.String consumeCommentTokens(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.http.client.reactive.JettyClientHttpResponse: java.lang.String parseSameSite(java.lang.String)> ->_CWE079_
<org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.PatternsRequestCondition: org.springframework.web.servlet.mvc.condition.PatternsRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.core.annotation.MergedAnnotationPredicates: java.lang.String lambda$null$2(java.lang.Object)> ->_CWE079_
<org.springframework.web.context.request.async.CallableInterceptorChain: java.lang.Object applyPostProcess(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PUT(org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.http.server.reactive.JettyHttpHandlerAdapter: org.springframework.http.server.reactive.ServletServerHttpResponse createResponse(javax.servlet.http.HttpServletResponse,javax.servlet.AsyncContext,org.springframework.http.server.reactive.ServletServerHttpRequest)> ->_CWE079_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getContextUrl(java.lang.String,java.util.Map)> ->_CWE079_
<org.springframework.context.event.ApplicationListenerMethodAdapter: java.lang.Object doInvoke(java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMessageNotWritable(org.springframework.http.converter.HttpMessageNotWritableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockAsyncContext: javax.servlet.ServletRequest getRequest()> ->_CWE079_
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.multipart.commons.CommonsMultipartResolver: org.springframework.web.multipart.MultipartHttpServletRequest resolveMultipart(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.util.Assert: java.lang.String lambda$doesNotContain$0(java.lang.String)> ->_CWE079_
<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String access$000(org.springframework.util.xml.StaxStreamXMLReader)> ->_CWE079_
<org.springframework.util.xml.StaxEventXMLReader: java.lang.String access$100(org.springframework.util.xml.StaxEventXMLReader)> ->_CWE079_
<org.springframework.mock.http.client.reactive.MockClientHttpResponse: java.lang.String lambda$getBodyAsString$1(org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.lang.String createInsertString(java.lang.String[])> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getContextUrl(java.lang.String)> ->_CWE079_
<org.springframework.context.support.LiveBeansView: java.lang.String getEscapedResourceDescription(org.springframework.beans.factory.config.BeanDefinition)> ->_CWE079_
<org.springframework.messaging.MessageHeaders: java.lang.Object get(java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter: java.lang.String createMessagingErrorMessage(java.lang.String)> ->_CWE079_
<org.springframework.messaging.simp.SimpMessageHeaderAccessor: java.util.Map getSessionAttributes(java.util.Map)> ->_CWE079_
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: org.apache.http.client.methods.HttpUriRequest createHttpUriRequest(org.springframework.http.HttpMethod,java.net.URI)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getNString(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.resource.GzipResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_CWE079_
<org.springframework.cglib.core.TypeUtils: java.lang.String getPackageName(java.lang.String)> ->_CWE079_
<org.springframework.context.annotation.Jsr330ScopeMetadataResolver: java.lang.String resolveScopeName(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String substituteNamedParameters(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ParamsRequestCondition access$400()> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMediaTypeNotAcceptable(org.springframework.web.HttpMediaTypeNotAcceptableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvc: org.springframework.mock.web.MockHttpServletResponse unwrapResponseIfNecessary(javax.servlet.ServletResponse)> ->_CWE079_
<org.springframework.web.servlet.mvc.ServletForwardingController: org.springframework.web.servlet.ModelAndView handleRequestInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.servlet.mvc.UrlFilenameViewController: java.lang.String extractViewNameFromUrlPath(java.lang.String)> ->_CWE079_
<org.springframework.context.index.processor.TypeHelper: java.lang.String getQualifiedName(javax.lang.model.element.Element)> ->_CWE079_
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotationAttributes: java.lang.String valueToString(java.lang.Object)> ->_CWE079_
<org.springframework.util.SystemPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String,boolean)> ->_CWE079_
<org.springframework.context.support.AbstractApplicationContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.function.PathResourceLookupFunction: java.lang.String processPath(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: javax.servlet.ServletContext getContext(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: java.lang.String getNameForParameter(org.springframework.core.MethodParameter)> ->_CWE079_
<org.springframework.beans.factory.config.PropertyPlaceholderConfigurer: java.lang.String resolveSystemProperty(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy: org.glassfish.tyrus.core.RequestContext createRequestContext(javax.servlet.http.HttpServletRequest,java.lang.String,org.springframework.http.HttpHeaders)> ->_CWE079_
<org.springframework.cglib.core.TypeUtils: java.lang.String map(java.lang.String)> ->_CWE079_
<org.springframework.format.datetime.joda.DurationFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.ForwardRequestPostProcessor: org.springframework.mock.web.MockHttpServletRequest postProcessRequest(org.springframework.mock.web.MockHttpServletRequest)> ->_CWE079_
<org.springframework.web.reactive.resource.ResourceWebHandler: java.lang.String processPath(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: java.lang.String resolveCorsAnnotationValue(java.lang.String)> ->_CWE079_
<org.springframework.web.context.request.async.WebAsyncManager: org.springframework.web.context.request.async.CallableProcessingInterceptor getCallableInterceptor(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder cookies(java.util.function.Consumer)> ->_CWE079_
<org.springframework.web.util.WebUtils: int getPort(java.lang.String,int)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String decodeAndCleanUriString(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: java.util.List requestMappingResolvers(org.springframework.web.reactive.result.method.'annotation'.ArgumentResolverConfigurer,org.springframework.core.ReactiveAdapterRegistry,org.springframework.context.ConfigurableApplicationContext,java.util.List)> ->_CWE079_
<org.springframework.web.servlet.support.ServletUriComponentsBuilder: org.springframework.web.servlet.support.ServletUriComponentsBuilder initFromRequest(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.socket.client.WebSocketConnectionManager: org.springframework.web.socket.WebSocketHandler decorateWebSocketHandler(org.springframework.web.socket.WebSocketHandler)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder sessionAttr(java.lang.String,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder getBaseUrlToUse(org.springframework.web.util.UriComponentsBuilder)> ->_CWE079_
<org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter: java.lang.String determineTargetDatabaseName(org.springframework.orm.jpa.vendor.Database)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition combine(org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition)> ->_CWE079_
<org.springframework.web.servlet.handler.HandlerMappingIntrospector: org.springframework.web.servlet.handler.MatchableHandlerMapping lambda$initPathPatternMatchableHandlerMappings$1(org.springframework.web.servlet.HandlerMapping)> ->_CWE079_
<org.springframework.web.reactive.resource.EncodedResourceResolver: java.lang.String getAcceptEncoding(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver: org.springframework.web.servlet.ModelAndView doResolveException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler: org.springframework.web.servlet.mvc.method.'annotation'.ResponseBodyEmitter handleValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.context.annotation.AnnotationConfigApplicationContext: java.lang.String lambda$scan$1(java.lang.String[])> ->_CWE079_
<org.springframework.web.bind.ServletRequestUtils: java.lang.String getRequiredStringParameter(javax.servlet.ServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.lang.String getClobAsString(java.sql.ResultSet,java.lang.String)> ->_CWE079_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message doSendAndReceive(java.lang.Object,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder param(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.util.Map,java.lang.Class)> ->_CWE079_
<org.springframework.test.web.reactive.server.ExchangeResult: java.lang.String lambda$formatBody$1(org.springframework.http.MediaType,byte[])> ->_CWE079_
<org.springframework.web.servlet.handler.SimpleMappingExceptionResolver: java.lang.String findMatchingViewName(java.util.Properties,java.lang.Exception)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.servlet.ModelAndView invokeHandlerMethod(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.method.HandlerMethod)> ->_CWE079_
<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String getBeforeMessage(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMissingServletRequestParameter(org.springframework.web.bind.MissingServletRequestParameterException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.filter.reactive.HiddenHttpMethodFilter: java.lang.String lambda$mapExchange$1(java.lang.String)> ->_CWE079_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: java.lang.String resolveSessionId(org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.core.AttributeAccessorSupport: java.lang.String lambda$computeAttribute$0(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate or(java.lang.String,org.springframework.web.servlet.function.RequestPredicate)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition getMethodsCondition()> ->_CWE079_
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection getTransactionAwareConnectionProxy(javax.jms.Connection)> ->_CWE079_
<org.springframework.web.servlet.support.AbstractFlashMapManager: java.lang.String decodeAndNormalizePath(java.lang.String,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: java.lang.String registerBeanDef(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_CWE079_
<org.springframework.format.datetime.standard.YearFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_CWE079_
<org.springframework.expression.spel.CodeFlow: java.lang.String createSignatureDescriptor(java.lang.reflect.Constructor)> ->_CWE079_
<org.springframework.test.context.support.ContextLoaderUtils: java.lang.String lambda$resolveContextHierarchyAttributes$0(java.lang.Class,java.lang.Class,java.lang.Class)> ->_CWE079_
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String resolveRequestUri(reactor.netty.http.server.HttpServerRequest)> ->_CWE079_
<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleAsyncRequestTimeoutException(org.springframework.web.context.request.async.AsyncRequestTimeoutException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.util.xml.DomUtils: java.lang.String getChildElementValueByTagName(org.w3c.dom.Element,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: java.lang.String initLookupPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(boolean[])> ->_CWE079_
<org.springframework.web.servlet.support.JstlUtils: org.springframework.context.MessageSource getJstlAwareMessageSource(javax.servlet.ServletContext,org.springframework.context.MessageSource)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodePort(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String replacePlaceholders(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver)> ->_CWE079_
<org.springframework.http.server.reactive.TomcatHttpHandlerAdapter: org.springframework.http.server.reactive.ServletServerHttpRequest createRequest(javax.servlet.http.HttpServletRequest,javax.servlet.AsyncContext)> ->_CWE079_
<org.springframework.http.client.support.HttpAccessor: org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.cglib.core.TypeUtils: org.springframework.asm.Type getComponentType(org.springframework.asm.Type)> ->_CWE079_
<org.gradle.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerResponseBuilder: org.springframework.web.servlet.ModelAndView lambda$build$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: org.springframework.web.reactive.result.method.RequestMappingInfo createRequestMappingInfo(java.lang.reflect.AnnotatedElement)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder nest(org.springframework.web.servlet.function.RequestPredicate,java.util.function.Consumer)> ->_CWE079_
<org.springframework.web.servlet.tags.form.TagIdGenerator: java.lang.String nextId(java.lang.String,javax.servlet.jsp.PageContext)> ->_CWE079_
<org.springframework.transaction.config.JtaTransactionManagerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object adapt(java.lang.reflect.Method,java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: java.lang.String lambda$getServerName$2(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.String getSql(java.lang.Object)> ->_CWE079_
<org.springframework.core.convert.support.IdToEntityConverter: java.lang.String getEntityName(java.lang.Class)> ->_CWE079_
<org.springframework.jdbc.core.metadata.DerbyCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.ui.freemarker.FreeMarkerTemplateUtils: java.lang.String processTemplateIntoString(freemarker.template.Template,java.lang.Object)> ->_CWE079_
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveBean(org.springframework.core.ResolvableType,java.lang.Object[],boolean)> ->_CWE079_
<org.springframework.jdbc.support.JdbcUtils: java.lang.String resolveTypeName(int)> ->_CWE079_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String,java.util.List,java.lang.String)> ->_CWE079_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder file(org.springframework.mock.web.MockMultipartFile)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.method.RequestMappingInfo getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.tags.form.OptionWriter: java.lang.String processOptionValue(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.metadata.PostgresTableMetaDataProvider: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.HeadersRequestCondition access$500()> ->_CWE079_
<org.springframework.util.xml.XMLEventStreamWriter: java.lang.String getPrefix(java.lang.String)> ->_CWE079_
<org.springframework.transaction.HeuristicCompletionException: java.lang.String getStateString(int)> ->_CWE079_
<org.springframework.context.annotation.AnnotationBeanNameGenerator: java.lang.String determineBeanNameFromAnnotation(org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate pathExtension(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String decodeInternal(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder request(org.springframework.http.HttpMethod,java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.test.context.support.DefaultTestContext: java.lang.String lambda$computeAttribute$1(java.lang.String)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.String convertClassNameToResourcePath(java.lang.String)> ->_CWE079_
<org.springframework.beans.support.PropertyComparator: java.lang.Object getPropertyValue(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder params(org.springframework.util.MultiValueMap)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class)> ->_CWE079_
<org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy: javax.servlet.http.HttpServletResponse getHttpServletResponse(org.springframework.http.server.ServerHttpResponse)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String resolveCodeWithoutArguments(java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: java.lang.String formatMappings(java.lang.Class,java.util.Map)> ->_CWE079_
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: java.lang.String getContentType(java.lang.String)> ->_CWE079_
<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.String getDescription(java.lang.Object,java.lang.String)> ->_CWE079_
<org.springframework.oxm.config.JibxMarshallerBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy: javax.resource.cci.Connection getTransactionAwareConnectionProxy(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> ->_CWE079_
<org.springframework.test.context.support.DefaultTestContextBootstrapper: java.lang.Class getDefaultContextLoaderClass(java.lang.Class)> ->_CWE079_
<org.springframework.web.context.request.FacesWebRequest: java.lang.String getHeader(java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder headers(java.util.function.Consumer)> ->_CWE079_
<org.springframework.web.context.request.async.WebAsyncUtils: org.springframework.web.context.request.async.WebAsyncManager getAsyncManager(org.springframework.web.context.request.WebRequest)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_CWE079_
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)> ->_CWE079_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.lang.String getSimulationQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.cache.config.CacheAdviceParser: java.lang.String getAttributeValue(org.w3c.dom.Element,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver: org.springframework.http.MediaType getMostSpecificMediaType(org.springframework.http.MediaType,org.springframework.http.MediaType)> ->_CWE079_
<org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener: java.lang.String lambda$executeSqlScripts$3(org.springframework.test.context.TestContext,org.springframework.transaction.PlatformTransactionManager,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMissingServletRequestPartException(org.springframework.web.multipart.support.MissingServletRequestPartException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.servlet.mvc.method.'annotation'.ServletInvocableHandlerMethod createInvocableHandlerMethod(org.springframework.web.method.HandlerMethod)> ->_CWE079_
<org.springframework.web.servlet.resource.WebJarsResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_CWE079_
<org.springframework.beans.PropertyAccessorUtils: java.lang.String canonicalPropertyName(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.resource.EncodedResourceResolver: java.lang.String getExtension(java.lang.String)> ->_CWE079_
<org.springframework.web.multipart.commons.CommonsFileUploadSupport: java.lang.String determineEncoding(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.Object[])> ->_CWE079_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlEscapeDecimal(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.transaction.config.TxNamespaceHandler: java.lang.String getTransactionManagerName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)> ->_CWE079_
<org.springframework.format.datetime.joda.YearMonthFormatter: java.lang.String print(org.joda.time.YearMonth,java.util.Locale)> ->_CWE079_
<org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler: org.springframework.messaging.handler.CompositeMessageCondition getMatchingMapping(org.springframework.messaging.handler.CompositeMessageCondition,org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder contentType(org.springframework.http.MediaType)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.test.web.reactive.server.HeaderAssertions: java.lang.String getMessage(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.util.Map execute(java.util.Map)> ->_CWE079_
<org.springframework.web.servlet.function.support.HandlerFunctionAdapter: org.springframework.web.servlet.function.ServerRequest getServerRequest(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: java.lang.String lambda$ensureSpringRulesAreNotPresent$1(java.lang.Class)> ->_CWE079_
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: java.lang.String lambda$ensureSpringRulesAreNotPresent$0(java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.HeadersRequestCondition: org.springframework.web.servlet.mvc.condition.HeadersRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.cglib.core.EmitUtils: java.lang.Class remapComponentType(java.lang.Class)> ->_CWE079_
<org.springframework.core.Conventions: java.lang.String getVariableNameForReturnType(java.lang.reflect.Method,java.lang.Class,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: org.springframework.web.servlet.resource.DefaultResourceTransformerChain initTransformerChain(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.ArrayList)> ->_CWE079_
<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String access$100(org.springframework.util.xml.StaxStreamXMLReader)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String metaDataCatalogNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.core.annotation.AnnotationUtils: java.lang.Class findAnnotationDeclaringClass(java.lang.Class,java.lang.Class)> ->_CWE079_
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(char[])> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String getIdentityHexString(java.lang.Object)> ->_CWE079_
<org.springframework.web.reactive.result.view.BindStatus: java.lang.String getErrorMessagesAsString(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriComponents: java.lang.String sanitizeSource(java.lang.String)> ->_CWE079_
<org.springframework.test.context.support.TestPropertySourceAttributes: java.lang.String lambda$assertSameBooleanAttribute$1(org.springframework.test.context.support.TestPropertySourceAttributes,java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.ServletServerHttpResponse: org.springframework.http.server.reactive.ServletServerHttpRequest access$500(org.springframework.http.server.reactive.ServletServerHttpResponse)> ->_CWE079_
<org.springframework.cglib.core.DefaultNamingPolicy: java.lang.String getClassName(java.lang.String,java.lang.String,java.lang.Object,org.springframework.cglib.core.Predicate)> ->_CWE079_
<org.springframework.cglib.util.ParallelSorterEmitter: java.lang.String getFieldName(int)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher header(java.lang.String,org.hamcrest.Matcher[])> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String lambda$encodeCookies$4(javax.servlet.http.Cookie)> ->_CWE079_
<org.springframework.oxm.support.SaxResourceUtils: java.lang.String getSystemId(org.springframework.core.io.Resource)> ->_CWE079_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder uri(java.net.URI)> ->_CWE079_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getAttributeValue(int)> ->_CWE079_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String parseStringValue(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver,java.util.Set)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String,java.util.List)> ->_CWE079_
<org.springframework.web.reactive.resource.CssLinkResourceTransformer: java.io.StringWriter lambda$transformContent$3(java.io.StringWriter,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.ServletWrappingController: org.springframework.web.servlet.ModelAndView handleRequestInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition: org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter: java.lang.String calculateEndpointAddress(javax.xml.ws.Endpoint,java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: java.lang.String getParameter(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String,java.lang.Object[],boolean)> ->_CWE079_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: java.lang.String getLookupDestination(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.script.ScriptTemplateView: java.lang.String getTemplate(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.AbstractUrlViewController: org.springframework.web.servlet.ModelAndView handleRequestInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Class)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable)> ->_CWE079_
<org.springframework.beans.factory.config.PropertyPlaceholderConfigurer: java.lang.String resolvePlaceholder(java.lang.String,java.util.Properties)> ->_CWE079_
<org.springframework.messaging.handler.HandlerMethod: java.lang.String lambda$formatInvokeError$0(java.lang.Object[],int)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder attributes(java.util.function.Consumer)> ->_CWE079_
<org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag: java.lang.String convertToDisplayString(java.lang.Object)> ->_CWE079_
<org.springframework.core.env.AbstractPropertyResolver: java.lang.String getRequiredProperty(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.tags.MessageTag: java.lang.String getNoSuchMessageExceptionDescription(org.springframework.context.NoSuchMessageException)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockPageContext: javax.servlet.ServletRequest getRequest()> ->_CWE079_
<org.springframework.expression.common.CompositeStringExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext,java.lang.Object)> ->_CWE079_
<org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver: java.lang.String getDefaultBeanName(java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.view.InternalResourceView: java.lang.String prepareForRendering(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.core.NestedExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)> ->_CWE079_
<org.springframework.http.server.reactive.ServletHttpHandlerAdapter: org.springframework.http.server.reactive.ServletServerHttpResponse createResponse(javax.servlet.http.HttpServletResponse,javax.servlet.AsyncContext,org.springframework.http.server.reactive.ServletServerHttpRequest)> ->_CWE079_
<org.springframework.web.util.UriComponents: java.lang.String expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables)> ->_CWE079_
<org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext: org.apache.tiles.request.ApplicationResource getResource(org.apache.tiles.request.ApplicationResource,java.util.Locale)> ->_CWE079_
<org.springframework.web.multipart.support.StandardMultipartHttpServletRequest: java.lang.String getMultipartContentType(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: javax.servlet.http.HttpServletRequest checkMultipart(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.socket.WebSocketHttpHeaders: java.lang.String getFirst(java.lang.String)> ->_CWE079_
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)> ->_CWE079_
<org.springframework.format.datetime.standard.DurationFormatter: java.lang.String print(java.time.Duration,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder nest(org.springframework.web.servlet.function.RequestPredicate,java.util.function.Supplier)> ->_CWE079_
<org.springframework.web.socket.sockjs.client.AbstractXhrTransport: java.lang.String executeInfoRequest(java.net.URI,org.springframework.http.HttpHeaders)> ->_CWE079_
<org.springframework.context.annotation.ConfigurationMethod: java.lang.String getShortMethodName(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.ParamsRequestCondition: org.springframework.web.servlet.mvc.condition.ParamsRequestCondition combine(org.springframework.web.servlet.mvc.condition.ParamsRequestCondition)> ->_CWE079_
<org.springframework.web.reactive.result.condition.ConsumesRequestCondition: org.springframework.web.reactive.result.condition.ConsumesRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.web.cors.DefaultCorsProcessor: java.lang.String checkOrigin(org.springframework.web.cors.CorsConfiguration,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: java.lang.String lambda$invokeHandlerMethod$3(java.lang.Object,java.lang.Boolean)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder header(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.servlet.handler.SimpleMappingExceptionResolver: java.lang.String determineViewName(java.lang.Exception,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.socket.sockjs.client.SockJsUrlInfo: java.lang.String getScheme(org.springframework.web.socket.sockjs.transport.TransportType)> ->_CWE079_
<org.springframework.objenesis.instantiator.util.ClassUtils: java.lang.String classNameToInternalClassName(java.lang.String)> ->_CWE079_
<org.springframework.core.Conventions: java.lang.String getVariableNameForReturnType(java.lang.reflect.Method,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.view.BeanNameViewResolver: org.springframework.web.servlet.View resolveViewName(java.lang.String,java.util.Locale)> ->_CWE079_
<org.springframework.cache.jcache.interceptor.AnnotationJCacheOperationSource: java.lang.String generateDefaultCacheName(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)> ->_CWE079_
<org.springframework.web.servlet.mvc.ServletWrappingController: javax.servlet.ServletContext access$200(org.springframework.web.servlet.mvc.ServletWrappingController)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder header(java.lang.String,java.lang.String[])> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition access$600()> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder DELETE(org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer: java.lang.String getDeleteStatement(long[])> ->_CWE079_
<org.springframework.web.server.adapter.DefaultServerWebExchange: java.lang.String padEtagIfNecessary(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.RequestConditionHolder: org.springframework.web.servlet.mvc.condition.RequestConditionHolder combine(org.springframework.web.servlet.mvc.condition.RequestConditionHolder)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockFilterConfig: java.lang.String getInitParameter(java.lang.String)> ->_CWE079_
<org.springframework.web.socket.sockjs.frame.DefaultSockJsFrameFormat: java.lang.String format(org.springframework.web.socket.sockjs.frame.SockJsFrame)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: javax.servlet.ServletContext getContext(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.view.script.ScriptTemplateView: java.lang.String lambda$null$0(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder get(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection: org.springframework.mock.web.MockHttpServletResponse getResponse(org.springframework.test.web.servlet.RequestBuilder)> ->_CWE079_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletResponse: javax.servlet.http.Cookie getCookie(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder HEAD(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor: java.lang.String getEndpointId(org.springframework.jms.'annotation'.JmsListener)> ->_CWE079_
<org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler: java.lang.String getCallbackParam(org.springframework.http.server.ServerHttpRequest)> ->_CWE079_
<org.springframework.web.reactive.result.condition.HeadersRequestCondition: org.springframework.web.reactive.result.condition.HeadersRequestCondition combine(org.springframework.web.reactive.result.condition.HeadersRequestCondition)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.'annotation'.InterceptorRegistration addInterceptor(org.springframework.web.servlet.HandlerInterceptor)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl request$default(org.springframework.test.web.servlet.MockMvc,org.springframework.http.HttpMethod,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_CWE079_
<org.gradle.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String,java.lang.String,boolean)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String schemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.core.Constants: java.lang.String toCodeForSuffix(java.lang.Object,java.lang.String)> ->_CWE079_
<org.springframework.web.accept.PathExtensionContentNegotiationStrategy: java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest)> ->_CWE079_
<org.springframework.web.reactive.handler.AbstractUrlHandlerMapping: java.lang.String prependLeadingSlash(java.lang.String)> ->_CWE079_
<org.springframework.test.context.junit.jupiter.AbstractExpressionEvaluatingCondition: java.lang.String lambda$evaluateAnnotation$1(java.lang.reflect.AnnotatedElement,java.lang.String,java.lang.Class,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnClassName(int)> ->_CWE079_
<org.springframework.web.servlet.FrameworkServlet: org.springframework.web.context.request.ServletRequestAttributes buildRequestAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.context.request.RequestAttributes)> ->_CWE079_
<org.springframework.core.io.buffer.DataBufferUtils: org.springframework.core.io.buffer.DataBuffer lambda$null$15(java.util.concurrent.atomic.AtomicLong,org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.core.io.buffer.DataBufferUtils: org.springframework.core.io.buffer.DataBuffer lambda$null$11(java.util.concurrent.atomic.AtomicLong,org.springframework.core.io.buffer.DataBuffer)> ->_CWE079_
<org.springframework.web.cors.reactive.DefaultCorsProcessor: java.lang.String checkOrigin(org.springframework.web.cors.CorsConfiguration,java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: java.lang.String getResourceLocation(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec dispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)> ->_CWE079_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlEscape(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.transaction.config.JtaTransactionManagerBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ParamsRequestCondition getParamsCondition()> ->_CWE079_
<org.springframework.messaging.support.ChannelInterceptorAdapter: org.springframework.messaging.Message preSend(org.springframework.messaging.Message,org.springframework.messaging.MessageChannel)> ->_CWE079_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl get(org.springframework.test.web.servlet.MockMvc,java.net.URI,kotlin.jvm.functions.Function1)> ->_CWE079_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter httpRequestHandlerAdapter()> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_CWE079_
<org.springframework.jdbc.support.SQLStateSQLExceptionTranslator: java.lang.String getSqlState(java.sql.SQLException)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: org.springframework.web.servlet.mvc.method.'annotation'.ServletInvocableHandlerMethod getExceptionHandlerMethod(org.springframework.web.method.HandlerMethod,java.lang.Exception)> ->_CWE079_
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(float[])> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder locale(java.util.Locale[])> ->_CWE079_
<org.springframework.web.servlet.i18n.SessionLocaleResolver: java.lang.String access$100(org.springframework.web.servlet.i18n.SessionLocaleResolver)> ->_CWE079_
<org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder: java.lang.String statusMessage(int)> ->_CWE079_
<org.springframework.test.web.client.AbstractRequestExpectationManager: java.lang.String lambda$verifyInternal$0(java.util.Map$Entry)> ->_CWE079_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder remoteAddress(java.net.InetSocketAddress)> ->_CWE079_
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)> ->_CWE079_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder sslInfo(org.springframework.http.server.reactive.SslInfo)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockMvcRequestBuilders: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder head(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.web.reactive.resource.ResourceUrlProvider: java.lang.String lambda$getForUriString$3(org.springframework.http.server.reactive.ServerHttpRequest,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.i18n.SessionLocaleResolver: java.lang.String access$000(org.springframework.web.servlet.i18n.SessionLocaleResolver)> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getMessage(java.lang.String)> ->_CWE079_
<org.springframework.context.support.AbstractMessageSource: java.lang.String getDefaultMessage(java.lang.String)> ->_CWE079_
<org.springframework.test.web.servlet.result.MockMvcResultMatchers: org.springframework.test.web.servlet.ResultMatcher forwardedUrl(java.lang.String)> ->_CWE079_
<org.springframework.core.env.AbstractPropertyResolver: java.lang.String doResolvePlaceholders(java.lang.String,org.springframework.util.PropertyPlaceholderHelper)> ->_CWE079_
<org.springframework.web.util.ServletRequestPathUtils: java.lang.String getCachedPathValue(javax.servlet.ServletRequest)> ->_CWE079_
<org.springframework.jms.support.JmsUtils: java.lang.String buildExceptionMessage(javax.jms.JMSException)> ->_CWE079_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_CWE079_
<org.springframework.messaging.simp.SimpMessageHeaderAccessor: java.lang.String getSubscriptionId(java.util.Map)> ->_CWE079_
<org.springframework.web.multipart.commons.CommonsFileUploadSupport: java.lang.String lambda$parseFileItems$0(org.springframework.web.multipart.commons.CommonsMultipartFile,java.lang.Boolean)> ->_CWE079_
<org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder: org.springframework.web.reactive.accept.RequestedContentTypeResolver lambda$resolver$2(org.springframework.web.reactive.accept.RequestedContentTypeResolver)> ->_CWE079_
<org.springframework.test.context.web.AbstractGenericWebContextLoader: java.lang.String lambda$loadContext$0(org.springframework.test.context.MergedContextConfiguration)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String getParameter(java.lang.String)> ->_CWE079_
<org.springframework.transaction.interceptor.TransactionAspectSupport: java.lang.String methodIdentification(java.lang.reflect.Method,java.lang.Class,org.springframework.transaction.interceptor.TransactionAttribute)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver: java.lang.String buildLogMessage(java.lang.Exception,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.core.annotation.AttributeMethods: java.lang.String describe(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.messaging.converter.GsonMessageConverter: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)> ->_CWE079_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder addInterceptors(org.springframework.web.servlet.HandlerInterceptor[])> ->_CWE079_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getThemeMessage(java.lang.String,java.lang.Object[])> ->_CWE079_
<org.springframework.ejb.config.LocalStatelessSessionBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getScale(int)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder accept(org.springframework.http.MediaType[])> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.AbstractController: org.springframework.web.servlet.ModelAndView handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: org.springframework.web.servlet.handler.RequestMatchResult match(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder OPTIONS(org.springframework.web.servlet.function.HandlerFunction)> ->_CWE079_
<org.springframework.core.env.AbstractEnvironment: java.lang.String getProperty(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.http.server.reactive.ServletServerHttpRequest: org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher access$100(org.springframework.http.server.reactive.ServletServerHttpRequest)> ->_CWE079_
<org.springframework.core.io.VfsUtils: java.lang.String doGetPath(java.lang.Object)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getColumnType(int)> ->_CWE079_
<org.springframework.context.support.AbstractApplicationContext: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.condition.CompositeRequestCondition: org.springframework.web.servlet.mvc.condition.CompositeRequestCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.format.datetime.standard.MonthDayFormatter: java.lang.String print(java.time.MonthDay,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleServletRequestBindingException(org.springframework.web.bind.ServletRequestBindingException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.function.support.HandlerFunctionAdapter: org.springframework.web.servlet.function.ServerResponse handleAsync(org.springframework.web.context.request.async.WebAsyncManager)> ->_CWE079_
<org.springframework.mock.web.MockServletContext: java.lang.String getInitParameter(java.lang.String)> ->_CWE079_
<org.springframework.expression.common.CompositeStringExpression: java.lang.String getValue(java.lang.Object)> ->_CWE079_
<org.springframework.test.web.reactive.server.ExchangeResult: java.lang.String formatBody(org.springframework.http.MediaType,reactor.core.publisher.Mono)> ->_CWE079_
<org.springframework.context.support.MessageSourceAccessor: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String)> ->_CWE079_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.test.web.reactive.server.WebTestClient mutateWith(org.springframework.test.web.reactive.server.WebTestClientConfigurer)> ->_CWE079_
<org.springframework.web.servlet.mvc.ServletWrappingController: java.lang.String access$100(org.springframework.web.servlet.mvc.ServletWrappingController)> ->_CWE079_
<org.springframework.http.ContentDisposition: java.lang.String encodeFilename(java.lang.String,java.nio.charset.Charset)> ->_CWE079_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.String getLocalName(org.w3c.dom.Node)> ->_CWE079_
<org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer: org.springframework.mock.web.MockHttpServletRequest lambda$beforeMockMvcCreated$1(org.springframework.mock.web.MockHttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceTransformerSupport: java.lang.String toAbsolutePath(java.lang.String,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag: java.lang.String processFieldValue(java.lang.String,java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String replacePlaceholders(java.lang.String,org.aopalliance.intercept.MethodInvocation,java.lang.Object,java.lang.Throwable,long)> ->_CWE079_
<org.springframework.web.reactive.function.client.WebClientResponseException: java.lang.String initMessage(int,java.lang.String,org.springframework.http.HttpRequest)> ->_CWE079_
<org.springframework.format.datetime.standard.YearFormatter: java.lang.String print(java.time.Year,java.util.Locale)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver: java.lang.String getPartName(org.springframework.core.MethodParameter,org.springframework.web.bind.'annotation'.RequestPart)> ->_CWE079_
<org.springframework.aop.framework.CglibAopProxy: java.lang.Object processReturnType(java.lang.Object,java.lang.Object,java.lang.reflect.Method,java.lang.Object)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: java.lang.String getMethodMapping(java.lang.reflect.Method)> ->_CWE079_
<org.springframework.web.servlet.support.AbstractDispatcherServletInitializer: org.springframework.web.servlet.FrameworkServlet createDispatcherServlet(org.springframework.web.context.WebApplicationContext)> ->_CWE079_
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI,org.springframework.http.HttpMethod)> ->_CWE079_
<org.springframework.web.util.UrlPathHelper: java.lang.String getOriginatingContextPath(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.util.xml.StaxEventXMLReader: java.lang.String access$000(org.springframework.util.xml.StaxEventXMLReader)> ->_CWE079_
<org.springframework.core.codec.StringDecoder: java.lang.String decode(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String metaDataCatalogNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: java.lang.Object getMatchingMapping(java.lang.Object,javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: javax.servlet.ServletRegistration getServletRegistration(java.lang.String)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)> ->_CWE079_
<org.springframework.context.annotation.ConfigurationClassEnhancer: java.lang.Class enhance(java.lang.Class,java.lang.ClassLoader)> ->_CWE079_
<org.springframework.cache.config.CacheNamespaceHandler: java.lang.String extractCacheManager(org.w3c.dom.Element)> ->_CWE079_
<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate HEAD(java.lang.String)> ->_CWE079_
<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)> ->_CWE079_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder body(java.lang.String)> ->_CWE079_
<org.springframework.jdbc.support.lob.PassThroughBlob: long position(java.sql.Blob,long)> ->_CWE079_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate accept(org.springframework.http.MediaType[])> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: java.lang.String lambda$null$0(java.util.Map$Entry)> ->_CWE079_
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getContentAsString(java.nio.charset.Charset)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder content(byte[])> ->_CWE079_
<org.springframework.mock.web.MockServletContext: javax.servlet.ServletRegistration getServletRegistration(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.condition.ProducesRequestCondition: org.springframework.web.reactive.result.condition.ProducesRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_CWE079_
<org.springframework.util.DigestUtils: java.lang.String digestAsHexString(java.lang.String,byte[])> ->_CWE079_
<org.springframework.jmx.support.JmxUtils: java.lang.Class getMBeanInterface(java.lang.Class)> ->_CWE079_
<org.springframework.test.web.client.match.MockRestRequestMatchers: org.springframework.test.web.client.RequestMatcher requestTo(org.hamcrest.Matcher)> ->_CWE079_
<org.springframework.messaging.core.AbstractMessagingTemplate: org.springframework.messaging.Message sendAndReceive(org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.web.servlet.DispatcherServlet: java.lang.String getRequestUri(javax.servlet.http.HttpServletRequest)> ->_CWE079_
<org.springframework.web.client.HttpStatusCodeException: java.lang.String getMessage(org.springframework.http.HttpStatus,java.lang.String)> ->_CWE079_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String schemaNameToUse(java.lang.String)> ->_CWE079_
<org.springframework.validation.DefaultMessageCodesResolver: java.lang.String postProcessMessageCode(java.lang.String)> ->_CWE079_
<org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition: org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition matchPreFlight(org.springframework.http.server.reactive.ServerHttpRequest)> ->_CWE079_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: java.lang.String lambda$formatMappings$3(java.lang.String)> ->_CWE079_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributeNamespace(int)> ->_CWE079_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message sendAndReceive(org.springframework.messaging.Message)> ->_CWE079_
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.String determineRootDir(java.lang.String)> ->_CWE079_
<org.springframework.web.util.UriUtils: java.lang.String encodePathSegment(java.lang.String,java.lang.String)> ->_CWE079_
<org.springframework.mail.javamail.MimeMessageHelper: java.lang.String getDefaultEncoding(javax.mail.internet.MimeMessage)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.ProducesRequestCondition access$700()> ->_CWE079_
<org.springframework.web.util.ServletContextPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String,javax.servlet.ServletContext,boolean)> ->_CWE079_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getColumnDisplaySize(int)> ->_CWE079_
<org.springframework.core.convert.support.ArrayToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Class getAdaptType(java.lang.reflect.Method,java.lang.Class)> ->_CWE079_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.mock.web.MockHttpServletRequest createServletRequest(javax.servlet.ServletContext)> ->_CWE079_
<org.springframework.core.convert.support.ArrayToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_CWE079_
<org.springframework.web.testfixture.servlet.MockServletContext: java.lang.String getInitParameter(java.lang.String)> ->_CWE079_
<org.springframework.core.io.buffer.DataBufferWrapper: java.lang.String toString(java.nio.charset.Charset)> ->_CWE079_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition getPathPatternsCondition()> ->_CWE079_
