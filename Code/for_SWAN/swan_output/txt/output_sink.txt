<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeFunction(java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: byte[] getBytes(long,int)> ->_SINK_
<org.springframework.asm.RecordComponentWriter: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.config.DatabasePopulatorConfigUtils: void setDatabasePopulator(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Mono handle(io.rsocket.Payload,io.rsocket.frame.FrameType)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeStartDocument(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: long[] getLongArray(java.lang.String)> ->_SINK_
<org.springframework.format.datetime.standard.TemporalAccessorParser: java.time.temporal.TemporalAccessor doParse(java.lang.String,java.util.Locale,java.time.format.DateTimeFormatter)> ->_SINK_
<org.springframework.mock.http.server.reactive.MockServerHttpResponse: void setWriteHandler(java.util.function.Function)> ->_SINK_
<org.springframework.core.convert.support.MapToMapConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ViewMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void lambda$printFlashMap$2(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.server.handler.FilteringWebHandler: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,int)> ->_SINK_
<org.springframework.web.reactive.function.server.ToStringVisitor: void 'unknown'(org.springframework.web.reactive.function.server.RouterFunction)> ->_SINK_
<org.springframework.core.log.CompositeLog: void debug(java.lang.Object,java.lang.Throwable)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter: void lambda$handle$3(org.springframework.web.reactive.result.method.'annotation'.InitBinderBindingContext,org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(org.springframework.format.'annotation'.NumberFormat,java.lang.Class)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object getForObject(java.lang.String,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitJumpInsn(int,org.springframework.asm.Label)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.format.datetime.standard.TemporalAccessorParser: java.time.temporal.TemporalAccessor parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec nodeCount(java.util.function.Consumer)> ->_SINK_
<org.springframework.beans.factory.support.FactoryBeanRegistrySupport: java.lang.Object doGetObjectFromFactoryBean(org.springframework.beans.factory.FactoryBean,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession: void lambda$send$2(org.springframework.web.reactive.socket.WebSocketMessage)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.PrincipalMethodArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.cache.annotation.SpringCacheAnnotationParser: java.util.Collection parseCacheAnnotations(java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,java.lang.Object[],int[])> ->_SINK_
<org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(org.springframework.format.'annotation'.DateTimeFormat,java.lang.Class)> ->_SINK_
<org.springframework.messaging.simp.stomp.DefaultStompSession: org.springframework.messaging.simp.stomp.StompSession$Receiptable send(org.springframework.messaging.simp.stomp.StompHeaders,java.lang.Object)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void doSend(java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.ParamsRequestCondition: int compareTo(org.springframework.web.servlet.mvc.condition.ParamsRequestCondition,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.mail.javamail.JavaMailSenderImpl: void send(org.springframework.mail.SimpleMailMessage)> ->_SINK_
<org.springframework.web.reactive.config.WebFluxConfigurerComposite: void lambda$addResourceHandlers$3(org.springframework.web.reactive.config.ResourceHandlerRegistry,org.springframework.web.reactive.config.WebFluxConfigurer)> ->_SINK_
<org.springframework.web.context.support.WebApplicationContextUtils: void initServletPropertySources(org.springframework.core.env.MutablePropertySources,javax.servlet.ServletContext,javax.servlet.ServletConfig)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String parameterNameToUse(java.lang.String)> ->_SINK_
<org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails: void <init>(java.lang.reflect.Method,java.lang.'annotation'.Annotation,java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.ContextPathCompositeHandler: reactor.core.publisher.Mono handle(org.springframework.http.server.reactive.ServerHttpRequest,org.springframework.http.server.reactive.ServerHttpResponse)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void convertAndSend(java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder filter(org.springframework.web.servlet.function.HandlerFilterFunction)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctions: org.springframework.web.server.WebHandler toWebHandler(org.springframework.web.reactive.function.server.RouterFunction,org.springframework.web.reactive.function.server.HandlerStrategies)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: boolean isDirectlyPresent(java.lang.Class)> ->_SINK_
<org.springframework.r2dbc.core.MapBindParameterSource: java.lang.Object getValue(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: boolean containsValue(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],java.lang.Class)> ->_SINK_
<org.springframework.messaging.handler.annotation.support.AbstractNamedValueMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(float)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder route(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AttributeMethods: java.lang.reflect.Method get(java.lang.String)> ->_SINK_
<org.springframework.core.type.classreading.SimpleAnnotationMetadata: java.util.Set getAnnotatedMethods(java.lang.String)> ->_SINK_
<org.springframework.asm.MethodWriter: org.springframework.asm.AnnotationVisitor visitInsnAnnotation(int,org.springframework.asm.TypePath,java.lang.String,boolean)> ->_SINK_
<org.springframework.test.web.ModelAndViewAssert: void assertSortAndCompareListModelAttribute(org.springframework.web.servlet.ModelAndView,java.lang.String,java.util.List,java.util.Comparator)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void publish(javax.jms.Topic,javax.jms.Message)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: void postProcess(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.handler.WebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.web.servlet.tags.EscapeBodyTag: void writeBodyContent(java.lang.String)> ->_SINK_
<org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getRealLiteral(java.lang.String,int,int,boolean)> ->_SINK_
<org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter: void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)> ->_SINK_
<org.springframework.web.reactive.resource.DefaultResourceResolverChain: reactor.core.publisher.Mono resolveResource(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List)> ->_SINK_
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(int)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctions: org.springframework.http.server.reactive.HttpHandler toHttpHandler(org.springframework.web.reactive.function.server.RouterFunction,org.springframework.web.reactive.function.server.HandlerStrategies)> ->_SINK_
<org.springframework.web.servlet.resource.EncodedResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(double)> ->_SINK_
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void handleMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter: void configureHandlerExceptionResolvers(java.util.List)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcCall: java.util.Map doExecute(java.util.Map)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: double[] getRequiredDoubleParameters(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.aop.config.ConfigBeanDefinitionParser: void parseAspect(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.core.SortedProperties: void store(java.io.Writer,java.lang.String)> ->_SINK_
<org.springframework.context.annotation.AspectJAutoProxyRegistrar: void registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata,org.springframework.beans.factory.support.BeanDefinitionRegistry)> ->_SINK_
<org.springframework.http.server.reactive.ContextPathCompositeHandler: reactor.core.publisher.Mono lambda$handle$1(org.springframework.http.server.reactive.ServerHttpRequest,org.springframework.http.server.reactive.ServerHttpResponse,java.util.Map$Entry)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: void setReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.web.client.RestTemplate: void handleResponse(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.client.ClientHttpResponse)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String procedureNameToUse(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.stream.Stream queryForStream(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.beans.factory.support.ConstructorResolver: java.lang.Object resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter,boolean)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping: void handleMatch(org.springframework.web.reactive.result.method.RequestMappingInfo,org.springframework.web.method.HandlerMethod,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClassParser: void addPropertySource(org.springframework.core.env.PropertySource)> ->_SINK_
<org.springframework.test.jdbc.JdbcTestUtils: void dropTables(org.springframework.jdbc.core.JdbcTemplate,java.lang.String[])> ->_SINK_
<org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser: org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(javax.ejb.TransactionAttribute)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: java.io.InputStream getBinaryStream(long,long)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession: void handleMessageFrame(org.springframework.web.socket.sockjs.frame.SockJsFrame)> ->_SINK_
<org.springframework.test.web.servlet.result.HandlerResultMatchers: void lambda$methodName$3(java.lang.String,org.springframework.test.web.servlet.MvcResult)> ->_SINK_
<org.springframework.context.event.ApplicationListenerMethodAdapter: void handleAsyncError(java.lang.Throwable)> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: java.lang.Object postForObject$default(org.springframework.web.client.RestOperations,java.lang.String,java.lang.Object,java.lang.Object[],int,java.lang.Object)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture postForLocation(java.lang.String,org.springframework.http.HttpEntity,java.lang.Object[])> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributeLocalName(int)> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: void require(int,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.log.CompositeLog: void warn(java.lang.Object,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: void truncate(long)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void access$100(org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter,javax.websocket.Session,java.nio.ByteBuffer,boolean)> ->_SINK_
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.String print(org.joda.time.Period,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder: org.springframework.web.reactive.function.server.RenderingResponse$Builder header(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.core.env.ProfilesParser: org.springframework.core.env.Profiles parseExpression(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.ChangePathPatternParserVisitor: void route(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.r2dbc.connection.init.ScriptUtils: org.reactivestreams.Publisher lambda$executeSqlScript$3(java.util.concurrent.atomic.AtomicInteger,io.r2dbc.spi.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.springframework.asm.Handle,java.lang.Object[])> ->_SINK_
<org.springframework.test.util.XmlExpectationsHelper: void assertSource(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.messaging.simp.SimpMessagingTemplate: void convertAndSendToUser(java.lang.String,java.lang.String,java.lang.Object,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void access$000(org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter,javax.websocket.Session,java.lang.String,boolean)> ->_SINK_
<org.springframework.web.servlet.function.ToStringVisitor: void endNested(org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.web.client.RestTemplate: void delete(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.BindingContext: org.springframework.web.bind.support.WebExchangeDataBinder createDataBinder(org.springframework.web.server.ServerWebExchange,java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.DefaultMvcResult: void setModelAndView(org.springframework.web.servlet.ModelAndView)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.PreparedStatementCallback)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture postForLocation(java.lang.String,org.springframework.http.HttpEntity,java.util.Map)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: void <init>(org.springframework.http.client.reactive.ClientHttpConnector,java.util.function.Function,org.springframework.web.util.UriBuilderFactory,org.springframework.http.HttpHeaders,org.springframework.util.MultiValueMap,java.util.function.Consumer,java.time.Duration,org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Mono fireAndForget(io.rsocket.Payload)> ->_SINK_
<org.springframework.scheduling.concurrent.ReschedulingRunnable: int compareTo(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.support.incrementer.SybaseMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.reactive.resource.CssLinkResourceTransformer: void lambda$parseContent$5(java.lang.String,java.util.SortedSet,org.springframework.web.reactive.resource.CssLinkResourceTransformer$LinkParser)> ->_SINK_
<org.springframework.web.method.annotation.MapMethodProcessor: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.http.server.reactive.WriteResultPublisher: void <init>(java.lang.String,java.lang.Runnable)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleProcessingInstruction(javax.xml.stream.events.ProcessingInstruction)> ->_SINK_
<org.springframework.test.web.reactive.server.FluxExchangeResult: void consumeWith(java.util.function.Consumer)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: void verifyUriComponent(java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_SINK_
<org.springframework.util.unit.DataSize: org.springframework.util.unit.DataSize parse(java.lang.CharSequence,org.springframework.util.unit.DataUnit)> ->_SINK_
<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(long)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitParameter(java.lang.String,int)> ->_SINK_
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addResourceHandlers(org.springframework.web.servlet.config.'annotation'.ResourceHandlerRegistry)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinition parseCustomElement(org.w3c.dom.Element)> ->_SINK_
<org.springframework.web.socket.sockjs.client.SockJsUrlInfo: java.net.URI getTransportUrl(org.springframework.web.socket.sockjs.transport.TransportType)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.ClassFileTransformerAdapter: byte[] transform(java.lang.ClassLoader,java.lang.String,java.lang.Class,java.security.ProtectionDomain,byte[])> ->_SINK_
<org.springframework.r2dbc.core.ParsedSql: void addNamedParameter(java.lang.String,int,int)> ->_SINK_
<org.springframework.test.web.reactive.server.StatusAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec reasonEquals(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer: void addReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester websocket(java.net.URI)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)> ->_SINK_
<org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource: void registerCorsConfiguration(java.lang.String,org.springframework.web.cors.CorsConfiguration)> ->_SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,java.lang.String,org.springframework.jdbc.core.SqlReturnType)> ->_SINK_
<org.springframework.web.method.annotation.SessionAttributesHandler: java.util.Map retrieveAttributes(org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitInsn(int)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: java.lang.Object handleError(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Throwable)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void writeFrameInternal(org.springframework.web.socket.sockjs.frame.SockJsFrame)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: java.lang.Object lookupHandler(java.lang.String,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: org.springframework.jdbc.core.PreparedStatementCreator getPreparedStatementCreator(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,java.util.function.Consumer)> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerResponseBuilder: void <init>(org.springframework.web.servlet.function.ServerResponse)> ->_SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory: org.springframework.jdbc.core.PreparedStatementSetter newPreparedStatementSetter(java.util.List)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.core.convert.support.StringToLocaleConverter: java.util.Locale convert(java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.Class[] getClassArray(java.lang.String)> ->_SINK_
<org.springframework.mail.javamail.JavaMailSenderImpl: void send(org.springframework.mail.javamail.MimeMessagePreparator[])> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleHttpMediaTypeNotSupported(org.springframework.web.HttpMediaTypeNotSupportedException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map queryForMap(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: void registerHandler(java.lang.String[],java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver: java.lang.Object resolveNamedValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(char)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void printAsyncResult(org.springframework.test.web.servlet.MvcResult)> ->_SINK_
<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite: boolean supportsReturnType(org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ->_SINK_
<org.springframework.web.servlet.resource.AbstractResourceResolver: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor: java.lang.Object invokeInContext(org.aopalliance.intercept.MethodInvocation)> ->_SINK_
<org.springframework.cache.interceptor.CacheOperationSourcePointcut: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void startDTD(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: boolean containsValue(java.lang.Object)> ->_SINK_
<org.springframework.transaction.support.WithoutTransactionOperations: void executeWithoutResult(java.util.function.Consumer)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void send(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerResponseBuilder: reactor.core.publisher.Mono render(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.format.datetime.standard.DurationFormatter: java.time.Duration parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.method.annotation.AbstractWebArgumentResolverAdapter: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder DELETE(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.core.annotation.IntrospectionFailureLogger: void log(java.lang.String,java.lang.Object,java.lang.Exception)> ->_SINK_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.mock.web.MockHttpServletRequest postProcessRequest(org.springframework.mock.web.MockHttpServletRequest)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: int bulkUpdate(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder: void <init>(java.lang.Object,org.springframework.web.reactive.function.BodyInserter)> ->_SINK_
<org.springframework.core.SortedProperties: void store(java.io.OutputStream,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.condition.HeadersRequestCondition: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.util.pattern.WildcardTheRestPathElement: boolean matches(int,org.springframework.web.util.pattern.PathPattern$MatchingContext)> ->_SINK_
<org.springframework.core.annotation.PackagesAnnotationFilter: boolean matches(java.lang.String)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: void saveOrUpdate(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: int[] executeBatch(java.util.Map[])> ->_SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.io.Reader getClobAsCharacterStream(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec maxAge(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder GET(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession: void handleMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type,org.springframework.web.reactive.socket.WebSocketMessage)> ->_SINK_
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: org.springframework.messaging.simp.user.UserDestinationResult resolveDestination(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.http.server.DefaultRequestPath: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession: void handleTransportError(java.lang.Throwable)> ->_SINK_
<org.springframework.cglib.core.ClassEmitter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map queryForMap(java.lang.String,java.lang.Object[],int[])> ->_SINK_
<org.springframework.aop.aspectj.RuntimeTestWalker: boolean testTargetInstanceOfResidue(java.lang.Class)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession: void handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.sockjs.frame.SockJsFrameFormat)> ->_SINK_
<org.springframework.test.web.servlet.result.ContentResultMatchers: org.springframework.test.web.servlet.ResultMatcher contentTypeCompatibleWith(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.view.UrlBasedViewResolver: org.springframework.web.reactive.result.view.View applyLifecycleMethods(java.lang.String,org.springframework.web.reactive.result.view.AbstractUrlBasedView)> ->_SINK_
<org.springframework.context.index.processor.TypeHelper: javax.lang.model.element.Element getSuperClass(javax.lang.model.element.Element)> ->_SINK_
<org.springframework.web.servlet.function.PathResourceLookupFunction: java.util.Optional apply(org.springframework.web.servlet.function.ServerRequest)> ->_SINK_
<org.springframework.cglib.core.TypeUtils: org.springframework.cglib.core.Signature parseConstructor(java.lang.String)> ->_SINK_
<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: void setErrorHandler(org.springframework.util.ErrorHandler)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder: org.springframework.web.reactive.function.server.HandlerStrategies$Builder exceptionHandler(org.springframework.web.server.WebExceptionHandler)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void processingInstruction(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.reactive.resource.ResourceResolverChain,org.springframework.web.reactive.resource.ResourceTransformer,org.springframework.web.reactive.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.r2dbc.core.DefaultFetchSpec: void <init>(org.springframework.r2dbc.core.ConnectionAccessor,java.lang.String,java.util.function.Function,java.util.function.Function,java.util.function.BiFunction)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void lambda$params$3(org.springframework.mock.web.MockHttpServletRequest,java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.cors.reactive.CorsWebFilter: reactor.core.publisher.Mono filter(org.springframework.web.server.ServerWebExchange,org.springframework.web.server.WebFilterChain)> ->_SINK_
<org.springframework.web.context.request.async.CallableInterceptorChain: void applyBeforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource: int getSqlType(java.lang.String)> ->_SINK_
<org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: void setPatternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int getInt(int)> ->_SINK_
<org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClassParser: void parse(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.CollectionToObjectConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.SessionAttributeMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeFunction(java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setHandlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver[])> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.oxm.jaxb.Jaxb2Marshaller: void setValidationEventHandler(javax.xml.bind.ValidationEventHandler)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder add(org.springframework.web.reactive.function.server.RouterFunction)> ->_SINK_
<org.springframework.web.servlet.function.ToStringVisitor: void startNested(org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional getValue(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: org.springframework.jdbc.core.SqlParameter createDefaultInParameter(java.lang.String,org.springframework.jdbc.core.metadata.CallParameterMetaData)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.util.Map)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,java.util.Date)> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: void sendToClient(org.springframework.web.socket.WebSocketSession,org.springframework.messaging.simp.stomp.StompHeaderAccessor,byte[])> ->_SINK_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec mappedInterceptors(java.lang.String[],org.springframework.web.servlet.HandlerInterceptor[])> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void handleWarnings(java.sql.Statement)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester transport(io.rsocket.transport.ClientTransport)> ->_SINK_
<org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.context.index.processor.ItemMetadata: void <init>(java.lang.String,java.util.Set)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void handleNoMatch(java.util.Set,java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Flux handleAndReply(io.rsocket.Payload,io.rsocket.frame.FrameType,reactor.core.publisher.Flux)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: java.util.stream.Stream stream(java.lang.String)> ->_SINK_
<org.springframework.context.config.LoadTimeWeaverBeanDefinitionParser: boolean isAspectJWeavingEnabled(java.lang.String,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerResponseBuilder: reactor.core.publisher.Mono render(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.asm.ClassReader: void <init>(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: long getLong(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,java.lang.String,org.springframework.jdbc.core.SqlReturnType)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: void parseProperties(org.w3c.dom.Element,org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.Object[],java.util.Map)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: void PUT(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.cglib.core.TypeUtils: org.springframework.asm.Type[] parseTypes(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void handle(org.springframework.test.web.servlet.MvcResult)> ->_SINK_
<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.format.Printer getPrinter(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.core.convert.support.ArrayToCollectionConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void handleTransportError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: javax.xml.transform.Source getXmlAsSource(java.sql.ResultSet,java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.scheduling.support.CompositeCronField: org.springframework.scheduling.support.CronField compose(org.springframework.scheduling.support.CronField[],org.springframework.scheduling.support.CronField$Type,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.cglib.proxy.Proxy: org.springframework.cglib.proxy.InvocationHandler getInvocationHandler(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.datasource.init.ResourceDatabasePopulator: void addScripts(org.springframework.core.io.Resource[])> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: boolean[] getBooleanArray(java.lang.String)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeAttribute(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.test.web.client.MockRestServiceServer: org.springframework.test.web.client.ResponseActions expect(org.springframework.test.web.client.ExpectedCount,org.springframework.test.web.client.RequestMatcher)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void convertAndSend(java.lang.Object,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression[] parseExpressions(java.lang.String,org.springframework.expression.ParserContext)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponseBuilder: void <init>(org.springframework.web.reactive.function.client.ClientResponse,boolean)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PATCH(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture delete(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.accept.ContentNegotiationManager: java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String)> ->_SINK_
<org.springframework.context.event.ApplicationListenerMethodAdapter: void handleResult(java.lang.Object)> ->_SINK_
<org.springframework.core.SortedProperties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.server.DefaultServerWebExchangeBuilder: void <init>(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor: void execute(java.lang.Runnable,long)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.util.List queryForList(org.springframework.jdbc.core.JdbcOperations,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void ignorableWhitespace(char[],int,int)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerResponseBuilder: void <init>(org.springframework.web.reactive.function.server.ServerResponse)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: void lambda$handleAndReply$5(java.util.concurrent.atomic.AtomicBoolean,io.rsocket.Payload,reactor.core.publisher.SignalType)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object execute(java.lang.String,org.springframework.jdbc.core.PreparedStatementCallback)> ->_SINK_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec customHandlerMapping(java.util.function.Supplier)> ->_SINK_
<org.springframework.jms.config.JcaListenerContainerParser: org.springframework.beans.MutablePropertyValues parseSpecificContainerProperties(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.reactive.accept.HeaderContentTypeResolver: java.util.List resolveMediaTypes(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.condition.CompositeRequestCondition: org.springframework.web.reactive.result.condition.CompositeRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.context.web.socket.MockServerContainer: void addEndpoint(javax.websocket.server.ServerEndpointConfig)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctions: org.springframework.web.servlet.function.RouterFunction changeParser(org.springframework.web.servlet.function.RouterFunction,org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.aop.TrueMethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.web.context.request.async.DeferredResult: void setResultHandler(org.springframework.web.context.request.async.DeferredResult$DeferredResultHandler)> ->_SINK_
<org.springframework.test.web.servlet.TestDispatcherServlet: org.springframework.web.servlet.ModelAndView processHandlerException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.HandlerMapping viewControllerHandlerMapping(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_SINK_
<org.springframework.web.reactive.config.DelegatingWebFluxConfiguration: void addResourceHandlers(org.springframework.web.reactive.config.ResourceHandlerRegistry)> ->_SINK_
<org.springframework.expression.spel.ast.Indexer: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)> ->_SINK_
<org.springframework.web.servlet.HandlerExecutionChain: void applyAfterConcurrentHandlingStarted(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.lang.Object[])> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object postForObject(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.remoting.jaxws.LocalJaxWsServiceFactory: void setHandlerResolver(javax.xml.ws.handler.HandlerResolver)> ->_SINK_
<org.springframework.core.metrics.jfr.FlightRecorderStartupStep: org.springframework.core.metrics.StartupStep tag(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder nest(org.springframework.web.reactive.function.server.RequestPredicate,java.util.function.Consumer)> ->_SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer: void shutdown(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleConversionNotSupported(org.springframework.beans.ConversionNotSupportedException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.condition.PatternsRequestCondition: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleHttpMessageNotReadable(org.springframework.http.converter.HttpMessageNotReadableException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.web.reactive.result.condition.RequestConditionHolder: int compareTo(org.springframework.web.reactive.result.condition.RequestConditionHolder,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.scheduling.commonj.ScheduledTimerListener: void setRunnable(java.lang.Runnable)> ->_SINK_
<org.springframework.web.reactive.function.client.WebClientUtils: reactor.core.publisher.Mono mapToEntity(org.springframework.web.reactive.function.client.ClientResponse,reactor.core.publisher.Mono)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: java.io.Reader getXmlAsCharacterStream(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)> ->_SINK_
<org.springframework.beans.AbstractNestablePropertyAccessor: org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler getPropertyHandler(java.lang.String)> ->_SINK_
<org.springframework.beans.BeanWrapperImpl: org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler getLocalPropertyHandler(java.lang.String)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void <init>(org.springframework.core.type.AnnotationMetadata,java.lang.String)> ->_SINK_
<org.springframework.aop.framework.adapter.MethodBeforeAdviceAdapter: boolean supportsAdvice(org.aopalliance.aop.Advice)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler: void handleRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,org.springframework.web.socket.sockjs.transport.SockJsSession)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void parseConstructorArgElements(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockExpressionEvaluator: javax.servlet.jsp.el.Expression parseExpression(java.lang.String,java.lang.Class,javax.servlet.jsp.el.FunctionMapper)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.RowMapper,java.lang.Object[])> ->_SINK_
<org.springframework.web.reactive.handler.AbstractUrlHandlerMapping: void validateHandler(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.support.incrementer.HsqlSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.config.CorsRegistration: org.springframework.web.reactive.config.CorsRegistration combine(org.springframework.web.cors.CorsConfiguration)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void jackson2SmileEncoder(org.springframework.core.codec.Encoder)> ->_SINK_
<org.springframework.web.servlet.resource.CachingResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: void registerHandlerMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.handler.PathPatternMatchableHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.'annotation'.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_SINK_
<org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration: org.springframework.messaging.MessageHandler userRegistryMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.simp.user.SimpUserRegistry,org.springframework.messaging.simp.SimpMessagingTemplate,org.springframework.scheduling.TaskScheduler)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: void afterCompletion(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.core.style.ToStringCreator: org.springframework.core.style.ToStringCreator append(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: org.springframework.jdbc.support.KeyHolder executeAndReturnKeyHolder(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.core.convert.support.EnumToStringConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver: reactor.core.publisher.Mono resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.context.web.socket.MockServerContainer: void setAsyncSendTimeout(long)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: double getDouble(int)> ->_SINK_
<org.springframework.r2dbc.connection.ConnectionFactoryUtils: org.springframework.dao.DataAccessException convertR2dbcException(java.lang.String,java.lang.String,io.r2dbc.spi.R2dbcException)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.bind.support.DefaultDataBinderFactory: org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest,java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: short[] getShortArray(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: org.springframework.web.reactive.function.client.WebClient$Builder exchangeFunction(org.springframework.web.reactive.function.client.ExchangeFunction)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: java.lang.String getXmlAsString(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.resource.AbstractResourceResolver: reactor.core.publisher.Mono resolveResource(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.scripting.config.ScriptingDefaultsParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: void addArgumentResolvers(java.util.List)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map queryForMap(java.lang.String)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultInterceptorChain: void triggerAfterTimeout(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: void add(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.scheduling.config.TaskExecutorFactoryBean: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)> ->_SINK_
<org.springframework.core.env.ProfilesParser: org.springframework.core.env.Profiles parseTokens(java.lang.String,java.util.StringTokenizer,org.springframework.core.env.ProfilesParser$Context)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.util.List put(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.socket.client.UndertowWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: boolean containsKey(java.lang.Object)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getNamespaceURI(int)> ->_SINK_
<org.springframework.jdbc.object.MappingSqlQuery: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource: void registerTypeName(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.StringToCharacterConverter: java.lang.Character convert(java.lang.String)> ->_SINK_
<org.springframework.web.bind.support.DefaultDataBinderFactory: org.springframework.web.bind.WebDataBinder createBinderInstance(java.lang.Object,java.lang.String,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.reactive.socket.client.JettyWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void convertAndSend(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitLdcInsn(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String tableNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(boolean)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void onOpen(javax.websocket.Session,javax.websocket.EndpointConfig)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.result.XpathResultMatchersDsl: void <init>(org.springframework.test.web.servlet.ResultActions,java.lang.String,java.util.Map,java.lang.Object[])> ->_SINK_
<org.springframework.web.reactive.BindingContext: org.springframework.web.bind.support.WebExchangeDataBinder createDataBinder(org.springframework.web.server.ServerWebExchange,java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void kotlinSerializationJsonDecoder(org.springframework.core.codec.Decoder)> ->_SINK_
<org.springframework.util.xml.DomContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.CollectionToCollectionConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.util.List queryForList(org.springframework.jdbc.core.JdbcOperations,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerRequest: java.util.Optional attribute(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleNoHandlerFoundException(org.springframework.web.servlet.NoHandlerFoundException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void addProtocolHandler(org.springframework.web.socket.messaging.SubProtocolHandler)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> ->_SINK_
<org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport: org.springframework.http.ResponseEntity executeSendRequestInternal(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: void handleMatch(java.lang.Object,org.springframework.messaging.handler.HandlerMethod,java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerRequest: void <init>(javax.servlet.http.HttpServletRequest,java.util.List)> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite: reactor.core.publisher.Mono handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder: void <init>(long,com.gargoylesoftware.htmlunit.WebRequest,org.springframework.mock.web.MockHttpServletResponse)> ->_SINK_
<org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider: javax.persistence.EntityManagerFactory createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.result.condition.CompositeRequestCondition: org.springframework.web.reactive.result.condition.CompositeRequestCondition combine(org.springframework.web.reactive.result.condition.CompositeRequestCondition)> ->_SINK_
<org.springframework.cache.config.CacheAdviceParser: java.util.List parseDefinitionsSources(java.util.List,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultRouterFunctionSpec: void <init>(org.springframework.web.reactive.function.server.RouterFunction)> ->_SINK_
<org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.expression.spel.ast.OpEQ: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)> ->_SINK_
<org.springframework.web.reactive.result.condition.RequestConditionHolder: org.springframework.web.reactive.result.condition.RequestConditionHolder getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler: void handleRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,org.springframework.web.socket.sockjs.transport.SockJsSession)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.MatrixVariableMapMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.AsyncTaskMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)> ->_SINK_
<org.springframework.messaging.core.GenericMessagingTemplate: org.springframework.messaging.Message doSendAndReceive(java.lang.Object,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeProcessingInstruction(java.lang.String)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder addScripts(java.lang.String[])> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleTypeMismatch(org.springframework.beans.TypeMismatchException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: java.lang.Object handleError(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: void <init>(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.RequestConditionHolder: int compareTo(org.springframework.web.servlet.mvc.condition.RequestConditionHolder,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: org.springframework.web.servlet.mvc.method.'annotation'.MvcUriComponentsBuilder$MethodArgumentBuilder fromMappingName(org.springframework.web.util.UriComponentsBuilder,java.lang.String)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.web.servlet.function.DefaultEntityResponseBuilder: org.springframework.web.servlet.function.EntityResponse$Builder header(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.mock.web.MockPageContext: void handlePageException(java.lang.Throwable)> ->_SINK_
<org.springframework.web.util.ContentCachingResponseWrapper: void sendRedirect(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PatternsRequestCondition: void <init>(java.lang.String[],org.springframework.web.util.UrlPathHelper,org.springframework.util.PathMatcher,boolean,boolean,java.util.List)> ->_SINK_
<org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getCorsHandlerExecutionChain(javax.servlet.http.HttpServletRequest,org.springframework.web.servlet.HandlerExecutionChain,org.springframework.web.cors.CorsConfiguration)> ->_SINK_
<org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.http.client.reactive.JettyClientHttpResponse: void lambda$null$0(org.springframework.util.MultiValueMap,java.lang.String,java.net.HttpCookie)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: reactor.core.publisher.Mono initModel(org.springframework.web.method.HandlerMethod,org.springframework.web.reactive.result.method.'annotation'.InitBinderBindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockPageContext: void handlePageException(java.lang.Exception)> ->_SINK_
<org.springframework.web.client.RestTemplate: void put(java.lang.String,java.lang.Object,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.support.incrementer.Db2LuwMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver: java.lang.Object resolveNamedValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.messaging.core.GenericMessagingTemplate: void setSendTimeout(long)> ->_SINK_
<org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor: void handleNotAuthorized(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.messaging.core.GenericMessagingTemplate: void setSendTimeoutHeader(java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.Object[])> ->_SINK_
<org.springframework.web.util.pattern.PathPattern: org.springframework.web.util.pattern.PathPattern combine(org.springframework.web.util.pattern.PathPattern)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(long)> ->_SINK_
<org.springframework.web.context.request.async.CallableInterceptorChain: void triggerAfterCompletion(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.MatrixVariableMethodArgumentResolver: java.lang.Object resolveNamedValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: boolean isPresent(java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: javax.jms.Message sendAndReceive(org.springframework.jms.core.MessageCreator)> ->_SINK_
<org.springframework.core.env.ReadOnlySystemAttributesMap: boolean containsKey(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void DELETE(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.reactive.resource.WebJarsResourceResolver: reactor.core.publisher.Mono resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.web.servlet.handler.MappedInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(int)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: reactor.core.publisher.Mono access$1000(org.springframework.web.reactive.function.client.ClientResponse,java.lang.Throwable)> ->_SINK_
<org.springframework.asm.ModuleWriter: void visitUse(java.lang.String)> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: java.lang.Object patchForObject$default(org.springframework.web.client.RestOperations,java.lang.String,java.lang.Object,java.lang.Object[],int,java.lang.Object)> ->_SINK_
<org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory: org.springframework.format.Printer getPrinter(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Mono requestResponse(io.rsocket.Payload)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void configureDefaultServletHandling(org.springframework.web.servlet.config.'annotation'.DefaultServletHandlerConfigurer)> ->_SINK_
<org.springframework.web.reactive.resource.GzipResourceResolver: reactor.core.publisher.Mono resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.cglib.transform.ClassFilterTransformer: boolean accept(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.mail.javamail.JavaMailSenderImpl: void send(org.springframework.mail.javamail.MimeMessagePreparator)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition: void <init>(org.springframework.web.util.pattern.PathPatternParser,java.lang.String[])> ->_SINK_
<org.springframework.mail.javamail.JavaMailSenderImpl: void send(org.springframework.mail.SimpleMailMessage[])> ->_SINK_
<org.springframework.aop.framework.adapter.ThrowsAdviceAdapter: org.aopalliance.intercept.MethodInterceptor getInterceptor(org.springframework.aop.Advisor)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void addImportBeanDefinitionRegistrar(org.springframework.context.'annotation'.ImportBeanDefinitionRegistrar,org.springframework.core.type.AnnotationMetadata)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(java.lang.Object)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: boolean hasDefaultValue(java.lang.String)> ->_SINK_
<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler: void setSystemHeartbeatSendInterval(long)> ->_SINK_
<org.springframework.web.reactive.result.condition.AbstractNameValueExpression: boolean match(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.object.StoredProcedure: java.util.Map execute(org.springframework.jdbc.core.ParameterMapper)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(java.lang.String,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.core.convert.support.ObjectToOptionalConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.HandlerExceptionResolver handlerExceptionResolver(org.springframework.web.accept.ContentNegotiationManager)> ->_SINK_
<org.springframework.r2dbc.core.ConnectionFunction: java.lang.Object apply(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.ModelAndView: void <init>(org.springframework.web.servlet.View,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.format.number.money.MonetaryAmountFormatter: javax.money.MonetaryAmount parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.BatchUpdateUtils: int[] executeBatchUpdate(java.lang.String,java.util.List,int[],org.springframework.jdbc.core.JdbcOperations)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: com.gargoylesoftware.htmlunit.util.Cookie createCookie(org.springframework.mock.web.MockHttpServletRequest,java.lang.String)> ->_SINK_
<org.springframework.web.socket.handler.SessionLimitExceededException: void <init>(java.lang.String,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.expression.spel.ast.OpNE: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)> ->_SINK_
<org.springframework.jdbc.datasource.init.CompositeDatabasePopulator: void populate(java.sql.Connection)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceTransformerSupport: java.lang.String toAbsolutePath(java.lang.String,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: void registerHandlerMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object)> ->_SINK_
<org.springframework.transaction.event.TransactionalApplicationListenerSynchronization: void beforeCommit(boolean)> ->_SINK_
<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: void publishEndpoint(javax.xml.ws.Endpoint,javax.xml.ws.WebServiceProvider)> ->_SINK_
<org.springframework.scheduling.support.CronSequenceGenerator: void doParse(java.lang.String[])> ->_SINK_
<org.springframework.util.ClassUtils: java.lang.String classPackageAsResourcePath(java.lang.Class)> ->_SINK_
<org.springframework.mail.javamail.MimeMessageHelper: void addTo(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter: void onFullCloseMessage(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.BufferedBinaryMessage)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: void OPTIONS(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.asm.ModuleWriter: void visitPackage(java.lang.String)> ->_SINK_
<org.springframework.web.accept.AbstractMappingContentNegotiationStrategy: void handleMatch(java.lang.String,org.springframework.http.MediaType)> ->_SINK_
<org.springframework.web.method.annotation.ErrorsMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(long)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void extendHandlerExceptionResolvers(java.util.List)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.web.util.pattern.WildcardPathElement: boolean matches(int,org.springframework.web.util.pattern.PathPattern$MatchingContext)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object getAttributeValue(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.core.convert.support.StringToEnumConverterFactory: org.springframework.core.convert.converter.Converter getConverter(java.lang.Class)> ->_SINK_
<org.springframework.beans.ExtendedBeanInfo: java.awt.Image getIcon(int)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpRequestMethodNotSupported(org.springframework.web.HttpRequestMethodNotSupportedException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.function.ToStringVisitor: void 'unknown'(org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: void access$100(org.springframework.web.client.AsyncRestTemplate,org.springframework.http.HttpMethod,java.net.URI,org.springframework.http.client.ClientHttpResponse)> ->_SINK_
<org.springframework.aop.framework.adapter.AfterReturningAdviceAdapter: org.aopalliance.intercept.MethodInterceptor getInterceptor(org.springframework.aop.Advisor)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentTypeCompatibleWith(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl delete$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int[] batchUpdate(java.lang.String[])> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder POST(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.core.log.CompositeLog: void fatal(java.lang.Object)> ->_SINK_
<org.springframework.web.method.annotation.RequestParamMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.servlet.tags.form.OptionWriter: void <init>(java.lang.Object,org.springframework.web.servlet.support.BindStatus,java.lang.String,java.lang.String,boolean)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder cookie(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.context.support.ContextTypeMatchClassLoader: boolean isClassReloadable(java.lang.Class)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: void setContentHandler(org.xml.sax.ContentHandler)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.stream.Stream queryForStream(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.mail.javamail.MimeMessageHelper: void addCc(java.lang.String)> ->_SINK_
<org.springframework.context.expression.CachedExpressionEvaluator: org.springframework.expression.Expression getExpression(java.util.Map,org.springframework.context.expression.AnnotatedElementKey,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceTransformerSupport: reactor.core.publisher.Mono resolveUrlPath(java.lang.String,org.springframework.web.server.ServerWebExchange,org.springframework.core.io.Resource,org.springframework.web.reactive.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.web.reactive.result.condition.CompositeRequestCondition: int compareTo(org.springframework.web.reactive.result.condition.CompositeRequestCondition,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.HandlerMapping resourceHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_SINK_
<org.springframework.core.convert.support.StringToLocaleConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.resource.CachingResourceTransformer: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource,org.springframework.web.servlet.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.core.convert.support.ZonedDateTimeToCalendarConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.util.Set optionsForAllow(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder path(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: org.springframework.web.reactive.function.client.WebClient$Builder uriBuilderFactory(org.springframework.web.util.UriBuilderFactory)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.util.Map,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.asm.AnnotationWriter: int computeAnnotationsSize(java.lang.String)> ->_SINK_
<org.springframework.test.web.ModelAndViewAssert: java.lang.Object assertAndReturnModelAttributeOfType(org.springframework.web.servlet.ModelAndView,java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite: org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite addHandler(org.springframework.web.method.support.HandlerMethodReturnValueHandler)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.util.Map)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: org.springframework.test.web.reactive.server.WebTestClient$Builder defaultHeader(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(java.lang.Class,javax.websocket.ClientEndpointConfig,java.net.URI)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: void <init>(org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],int[],java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleBindException(org.springframework.validation.BindException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.test.context.support.DynamicValuesPropertySource: boolean containsProperty(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.incrementer.DB2MainframeSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener: void handleResult(java.lang.Object,javax.jms.Message,javax.jms.Session)> ->_SINK_
<org.springframework.scheduling.concurrent.ReschedulingRunnable: long getDelay(java.util.concurrent.TimeUnit)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.List findByNamedQueryAndNamedParam(java.lang.String,java.lang.String[],java.lang.Object[])> ->_SINK_
<org.springframework.format.datetime.joda.LocalTimeParser: org.joda.time.LocalTime parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void dtdInternal(java.lang.String)> ->_SINK_
<org.springframework.web.util.pattern.PathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)> ->_SINK_
<org.springframework.cache.interceptor.SimpleCacheErrorHandler: void handleCachePutError(java.lang.RuntimeException,org.springframework.cache.Cache,java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceUrlProvider: reactor.core.publisher.Mono getForUriString(java.lang.String,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.result.condition.ConsumesRequestCondition: int compareTo(org.springframework.web.reactive.result.condition.ConsumesRequestCondition,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: void <init>(org.springframework.web.reactive.result.method.'annotation'.ArgumentResolverConfigurer,org.springframework.core.ReactiveAdapterRegistry,org.springframework.context.ConfigurableApplicationContext,java.util.List)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean getBoolean(int)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object postForObject(java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.cglib.core.TypeUtils: org.springframework.cglib.core.Signature parseSignature(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler: reactor.core.publisher.Mono handleResult(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.lang.Object queryForObject(org.springframework.jdbc.core.JdbcOperations,java.lang.String,java.lang.Object[],int[])> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addInterceptors(org.springframework.web.servlet.config.'annotation'.InterceptorRegistry)> ->_SINK_
<org.springframework.r2dbc.connection.lookup.BeanFactoryConnectionFactoryLookup: io.r2dbc.spi.ConnectionFactory getConnectionFactory(java.lang.String)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: void putAll(java.util.Map)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void doSend(javax.jms.Destination,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration: org.springframework.web.socket.config.'annotation'.WebSocketHandlerRegistration addHandler(org.springframework.web.socket.WebSocketHandler,java.lang.String[])> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession: void tryCloseWithSockJsTransportError(java.lang.Throwable,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: java.lang.Object patchForObject$default(org.springframework.web.client.RestOperations,java.lang.String,java.lang.Object,java.util.Map,int,java.lang.Object)> ->_SINK_
<org.springframework.web.util.pattern.SeparatorPathElement: boolean matches(int,org.springframework.web.util.pattern.PathPattern$MatchingContext)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl options$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.http.server.DefaultPathContainer: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceUrlProvider: void lambda$detectResourceHandlers$2(org.springframework.web.reactive.handler.SimpleUrlHandlerMapping)> ->_SINK_
<org.springframework.core.convert.support.StringToArrayConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.mock.web.MockAsyncContext: void addDispatchHandler(java.lang.Runnable)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.socket.client.StandardWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: java.io.InputStream getXmlAsBinaryStream(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.r2dbc.connection.R2dbcTransactionManager: reactor.core.publisher.Mono doSetRollbackOnly(org.springframework.transaction.reactive.TransactionSynchronizationManager,org.springframework.transaction.reactive.GenericReactiveTransaction)> ->_SINK_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: void handleMatch(org.springframework.messaging.simp.SimpMessageMappingInfo,org.springframework.messaging.handler.HandlerMethod,java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.reactive.resource.VersionResourceResolver: reactor.core.publisher.Mono resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.core.convert.support.StringToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup: javax.sql.DataSource getDataSource(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.condition.RequestConditionHolder: org.springframework.web.reactive.result.condition.RequestConditionHolder combine(org.springframework.web.reactive.result.condition.RequestConditionHolder)> ->_SINK_
<org.springframework.core.type.classreading.AnnotationReadingVisitorUtils: org.springframework.core.'annotation'.AnnotationAttributes getMergedAnnotationAttributes(org.springframework.util.LinkedMultiValueMap,java.util.Map,java.lang.String)> ->_SINK_
<org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean: void setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder OPTIONS(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.servlet.handler.PathPatternMatchableHandlerMapping: void <init>(org.springframework.web.servlet.handler.MatchableHandlerMapping)> ->_SINK_
<org.springframework.cglib.proxy.FixedValueGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.CallableStatementCreator,org.springframework.jdbc.core.CallableStatementCallback)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional getDefaultValue(java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.ArrayToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.transaction.reactive.TransactionalOperatorImpl: reactor.core.publisher.Flux execute(org.springframework.transaction.reactive.TransactionCallback)> ->_SINK_
<org.springframework.web.method.support.InvocableHandlerMethod: void setHandlerMethodArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolverComposite)> ->_SINK_
<org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor: void afterConcurrentHandlingStarted(org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.core.convert.support.StringToCharacterConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestAttributeMethodArgumentResolver: java.lang.Object resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.socket.sockjs.client.JettyXhrTransport: org.springframework.http.ResponseEntity executeSendRequestInternal(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.context.index.processor.SortedProperties: void storeToXML(java.io.OutputStream,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.WriteResultPublisher: void publishError(java.lang.Throwable)> ->_SINK_
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.jms.config.MethodJmsListenerEndpoint: void setMessageHandlerMethodFactory(org.springframework.messaging.handler.'annotation'.support.MessageHandlerMethodFactory)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void convertAndSend(java.lang.Object,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField parseList(java.lang.String,org.springframework.scheduling.support.CronField$Type,java.util.function.BiFunction)> ->_SINK_
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.'annotation'.ConfigurationCondition$ConfigurationPhase)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void handleMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.web.reactive.function.server.support.ServerRequestWrapper: java.lang.Object body(org.springframework.web.reactive.function.BodyExtractor,java.util.Map)> ->_SINK_
<org.springframework.core.metrics.DefaultApplicationStartup: org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep start(java.lang.String)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleEndElement(javax.xml.stream.events.EndElement)> ->_SINK_
<org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor: void afterCompletion(org.springframework.web.context.request.WebRequest,java.lang.Exception)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter: reactor.core.publisher.Mono handleException(java.lang.Throwable,org.springframework.web.method.HandlerMethod,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.socket.sockjs.client.WebSocketTransport: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.mail.javamail.MimeMessageHelper: javax.mail.internet.InternetAddress parseAddress(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession: void <init>(java.lang.Object,java.lang.String,org.springframework.web.reactive.socket.HandshakeInfo,org.springframework.core.io.buffer.DataBufferFactory,reactor.core.publisher.MonoProcessor)> ->_SINK_
<org.springframework.transaction.event.TransactionalApplicationListenerSynchronization: void afterCompletion(int)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMediaTypeNotAcceptable(org.springframework.web.HttpMediaTypeNotAcceptableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec number(java.util.function.Consumer)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.util.List put(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver: void handleResolvedValue(java.lang.Object,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: void processParameters(java.util.List)> ->_SINK_
<org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils: java.lang.Object getTypedValue(org.springframework.jdbc.core.namedparam.SqlParameterSource,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.stream.Stream queryForStream(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.StandardWebSocketSession: boolean sendMessage(org.springframework.web.reactive.socket.WebSocketMessage)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceUrlProvider: void registerHandlers(java.util.Map)> ->_SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.jdbc.support.SQLErrorCodes resolveErrorCodes(javax.sql.DataSource)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: org.springframework.web.cors.CorsConfiguration initCorsConfiguration(java.lang.Object,java.lang.reflect.Method,org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_SINK_
<org.springframework.jms.config.AbstractListenerContainerParser: java.lang.Integer parseAcknowledgeMode(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfo: void <init>(java.lang.String,org.springframework.web.reactive.result.condition.PatternsRequestCondition,org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition,org.springframework.web.reactive.result.condition.ParamsRequestCondition,org.springframework.web.reactive.result.condition.HeadersRequestCondition,org.springframework.web.reactive.result.condition.ConsumesRequestCondition,org.springframework.web.reactive.result.condition.ProducesRequestCondition,org.springframework.web.reactive.result.condition.RequestCondition,org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration,org.springframework.web.reactive.result.method.RequestMappingInfo$1)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler: org.springframework.web.servlet.mvc.method.'annotation'.ResponseBodyEmitter handleValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.socket.client.AbstractWebSocketClient: org.springframework.util.concurrent.ListenableFuture doHandshake(org.springframework.web.socket.WebSocketHandler,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.lang.String getClobAsString(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: void setDTDHandler(org.xml.sax.DTDHandler)> ->_SINK_
<org.springframework.web.method.annotation.ModelFactory: void updateModel(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.method.support.ModelAndViewContainer)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractXhrTransport: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.http.HttpRange: java.util.List parseRanges(java.lang.String)> ->_SINK_
<org.springframework.asm.AnnotationWriter: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(double)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField parseHours(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder: org.springframework.web.reactive.function.server.HandlerStrategies$Builder viewResolver(org.springframework.web.reactive.result.view.ViewResolver)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.RowMapper,java.lang.Object[])> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultInterceptorChain: boolean triggerAfterError(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult,java.lang.Throwable)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter: void configureDefaultServletHandling(org.springframework.web.servlet.config.'annotation'.DefaultServletHandlerConfigurer)> ->_SINK_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String replacePlaceholders(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver)> ->_SINK_
<org.springframework.scheduling.support.QuartzCronField: org.springframework.scheduling.support.QuartzCronField parseDaysOfWeek(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder nest(org.springframework.web.servlet.function.RequestPredicate,java.util.function.Consumer)> ->_SINK_
<org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor: void <init>(java.lang.String,org.springframework.core.'annotation'.AnnotationAttributes,java.lang.ClassLoader)> ->_SINK_
<org.springframework.web.socket.server.support.AbstractHandshakeHandler: java.util.List determineHandlerSupportedProtocols(org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.jdbc.core.metadata.DerbyCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: reactor.core.publisher.Mono handleMatch(java.lang.Object,org.springframework.messaging.handler.HandlerMethod,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: java.lang.Object getValue(java.lang.String)> ->_SINK_
<org.springframework.util.ClassUtils: java.lang.String convertClassNameToResourcePath(java.lang.String)> ->_SINK_
<org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite: org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite addHandlers(java.util.List)> ->_SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.jdbc.support.SQLErrorCodes registerDatabase(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Message,int,int,long,javax.jms.CompletionListener)> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder headers(java.util.function.Consumer)> ->_SINK_
<org.springframework.jdbc.core.SingleColumnRowMapper: java.lang.Object mapRow(java.sql.ResultSet,int)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(java.lang.String)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: reactor.core.publisher.Mono connectTcp(java.lang.String,int)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void handleMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.mail.MailSendException: void printStackTrace(java.io.PrintWriter)> ->_SINK_
<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void beforeTestMethod(org.springframework.test.context.TestContext)> ->_SINK_
<org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.util.HtmlCharacterEntityReferences: boolean isMappedToReference(char,java.lang.String)> ->_SINK_
<org.springframework.core.type.classreading.MergedAnnotationReadingVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object getForObject(java.lang.String,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)> ->_SINK_
<org.springframework.asm.CurrentFrame: void execute(int,int,org.springframework.asm.Symbol,org.springframework.asm.SymbolTable)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession: reactor.core.publisher.Mono close(org.springframework.web.reactive.socket.CloseStatus)> ->_SINK_
<org.springframework.web.method.annotation.ModelMethodProcessor: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String metaDataCatalogNameToUse(java.lang.String)> ->_SINK_
<org.springframework.cache.interceptor.VariableNotAvailableException: void <init>(java.lang.String)> ->_SINK_
<org.springframework.context.support.ApplicationListenerDetector: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.context.support.ContextTypeMatchClassLoader: java.lang.Class publicDefineClass(java.lang.String,byte[],java.security.ProtectionDomain)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: reactor.core.publisher.Mono lambda$null$4(org.springframework.web.reactive.BindingContext,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerResponseBuilder: reactor.core.publisher.Mono body(org.springframework.web.reactive.function.BodyInserter)> ->_SINK_
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void handleTransportError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitAttribute(org.springframework.asm.Attribute)> ->_SINK_
<org.springframework.transaction.support.TransactionTemplate: java.lang.Object execute(org.springframework.transaction.support.TransactionCallback)> ->_SINK_
<org.springframework.web.socket.sockjs.client.UndertowXhrTransport: org.springframework.http.ResponseEntity executeSendRequestInternal(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getAttributeValue(int)> ->_SINK_
<org.springframework.jdbc.core.SqlReturnResultSet: void <init>(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String,java.lang.Object,int)> ->_SINK_
<org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter: void publishEndpoint(javax.xml.ws.Endpoint,javax.xml.ws.WebServiceProvider)> ->_SINK_
<org.springframework.web.jsf.DecoratingNavigationHandler: void callNextHandlerInChain(javax.faces.context.FacesContext,java.lang.String,java.lang.String,javax.faces.application.NavigationHandler)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler: boolean supports(org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.Class getClass(java.lang.String)> ->_SINK_
<org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)> ->_SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.util.xml.AbstractStaxXMLReader: boolean getFeature(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void query(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder nest(org.springframework.web.servlet.function.RequestPredicate,java.util.function.Supplier)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler: org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession createSession(java.lang.String,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.result.condition.ParamsRequestCondition: int compareTo(org.springframework.web.reactive.result.condition.ParamsRequestCondition,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: void postProcess(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.mvc.condition.RequestConditionHolder: org.springframework.web.servlet.mvc.condition.RequestConditionHolder combine(org.springframework.web.servlet.mvc.condition.RequestConditionHolder)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void convertAndSend(java.lang.Object)> ->_SINK_
<org.springframework.cglib.core.TypeUtils: org.springframework.asm.Type parseType(java.lang.String)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: reactor.core.publisher.Mono lambda$handleMessage$4(org.springframework.messaging.handler.HandlerMethod,org.springframework.messaging.Message,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionStatusMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.result.condition.HeadersRequestCondition: org.springframework.web.reactive.result.condition.HeadersRequestCondition combine(org.springframework.web.reactive.result.condition.HeadersRequestCondition)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String schemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: org.reactivestreams.Publisher lambda$handleAndReply$6(java.util.concurrent.atomic.AtomicReference)> ->_SINK_
<org.springframework.jdbc.core.SqlReturnUpdateCount: void <init>(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnClassName(int)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(int)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.String,java.util.function.Predicate)> ->_SINK_
<org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration: void addWebSocketHandlerMapping(java.lang.Object,org.springframework.web.socket.WebSocketHandler,org.springframework.web.socket.server.HandshakeHandler,org.springframework.web.socket.server.HandshakeInterceptor[],java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.AsyncContext,java.lang.String,org.springframework.core.io.buffer.DataBufferFactory,int)> ->_SINK_
<org.springframework.context.testfixture.jndi.SimpleNamingContext: javax.naming.NameParser getNameParser(javax.naming.Name)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: void copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)> ->_SINK_
<org.springframework.expression.spel.ast.FunctionReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: byte getByte(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List query(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.r2dbc.connection.lookup.MapConnectionFactoryLookup: void addConnectionFactory(java.lang.String,io.r2dbc.spi.ConnectionFactory)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: int[] executeBatch(org.springframework.jdbc.core.namedparam.SqlParameterSource[])> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder sslInfo(org.springframework.http.server.reactive.SslInfo)> ->_SINK_
<org.springframework.aop.aspectj.TypePatternClassFilter: void setTypePattern(java.lang.String)> ->_SINK_
<org.springframework.cache.jcache.interceptor.CachePutOperation: javax.cache.'annotation'.CacheInvocationParameter getValueParameter(java.lang.Object[])> ->_SINK_
<org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jms.config.AbstractJmsListenerContainerFactory: void setErrorHandler(org.springframework.util.ErrorHandler)> ->_SINK_
<org.springframework.asm.SymbolTable: int addConstantNameAndType(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.env.AbstractPropertyResolver: java.lang.String doResolvePlaceholders(java.lang.String,org.springframework.util.PropertyPlaceholderHelper)> ->_SINK_
<org.springframework.context.index.processor.MetadataCollector: void add(org.springframework.context.index.processor.ItemMetadata)> ->_SINK_
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void handleTransportError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: org.springframework.test.web.reactive.server.WebTestClient$Builder exchangeStrategies(org.springframework.web.reactive.function.client.ExchangeStrategies)> ->_SINK_
<org.springframework.context.support.ApplicationListenerDetector: boolean requiresDestruction(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter: void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder OPTIONS(org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: void add(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEqualTo(java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractStaxXMLReader: void parse(org.xml.sax.InputSource)> ->_SINK_
<org.springframework.web.servlet.handler.MappedInterceptor: void postHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.web.servlet.ModelAndView)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleServletRequestBindingException(org.springframework.web.bind.ServletRequestBindingException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: void <init>(java.io.InputStream,long)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void execute(java.lang.Runnable,long)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: void GET(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])> ->_SINK_
<org.springframework.jms.core.JmsTemplate: java.lang.Object execute(org.springframework.jms.core.SessionCallback)> ->_SINK_
<org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration: org.springframework.web.socket.config.'annotation'.StompWebSocketEndpointRegistration setHandshakeHandler(org.springframework.web.socket.server.HandshakeHandler)> ->_SINK_
<org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.test.util.XmlExpectationsHelper: void assertNode(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.jdbc.support.JdbcTransactionManager: java.lang.RuntimeException translateException(java.lang.String,java.sql.SQLException)> ->_SINK_
<org.springframework.aop.target.CommonsPool2TargetSource: void setTimeBetweenEvictionRunsMillis(long)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PatternsRequestCondition: void <init>(java.lang.String[],org.springframework.web.util.UrlPathHelper,org.springframework.util.PathMatcher,boolean,boolean)> ->_SINK_
<org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder uriComponents(org.springframework.web.util.UriComponents)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String metaDataCatalogNameToUse(java.lang.String)> ->_SINK_
<org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection: org.springframework.util.concurrent.ListenableFuture send(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.core.convert.support.StringToTimeZoneConverter: java.util.TimeZone convert(java.lang.String)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void convertAndSend(java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void parsePropertyElements(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression buildPointcutExpression(java.lang.ClassLoader)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: void add(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.resource.AbstractResourceResolver: reactor.core.publisher.Mono resolveUrlPath(java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.core.convert.support.StringToPropertiesConverter: java.util.Properties convert(java.lang.String)> ->_SINK_
<org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message sendAndReceive(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession: reactor.core.publisher.Mono send(org.reactivestreams.Publisher)> ->_SINK_
<org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor: void preHandle(org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.TypeConverter)> ->_SINK_
<org.springframework.web.reactive.handler.AbstractUrlHandlerMapping: void registerHandler(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: int setString(long,java.lang.String,int,int)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void lambda$null$2(org.springframework.mock.web.MockHttpServletRequest,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler: void handleRequestInternal(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession)> ->_SINK_
<org.springframework.transaction.config.TxAdviceBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClientBuilder: org.springframework.r2dbc.core.DatabaseClient$Builder namedParameters(boolean)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(char)> ->_SINK_
<org.springframework.core.convert.support.StringToPropertiesConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getLongLiteral(java.lang.String,int,int,int)> ->_SINK_
<org.springframework.jdbc.core.CallableStatementCreatorFactory: org.springframework.jdbc.core.CallableStatementCreator newCallableStatementCreator(java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.Object[] buildValueArray(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource,java.util.List)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.springframework.asm.Label,org.springframework.asm.Label,int)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: void sendNotification(javax.management.Notification)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueMatches(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionElement(org.w3c.dom.Element,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void skippedEntityInternal(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PUT(java.lang.String,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext: void setSessionContext(org.springframework.web.reactive.result.method.'annotation'.SessionAttributesHandler,org.springframework.web.server.WebSession)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec httpOnly(java.lang.String,boolean)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: void parseJarFiles(org.w3c.dom.Element,org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo)> ->_SINK_
<org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.messaging.simp.SimpMessagingTemplate: void convertAndSendToUser(java.lang.String,java.lang.String,java.lang.Object,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(org.springframework.jdbc.support.xml.XmlCharacterStreamProvider)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int,java.util.Map)> ->_SINK_
<org.springframework.web.socket.client.WebSocketConnectionManager: void <init>(org.springframework.web.socket.client.WebSocketClient,org.springframework.web.socket.WebSocketHandler,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.jmx.access.ConnectorDelegate: javax.management.MBeanServerConnection connect(javax.management.remote.JMXServiceURL,java.util.Map,java.lang.String)> ->_SINK_
<org.springframework.format.datetime.joda.DurationFormatter: org.joda.time.Duration parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configurePathMatch(org.springframework.web.servlet.config.'annotation'.PathMatchConfigurer)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession: void <init>(java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsServiceConfig,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.r2dbc.connection.lookup.MapConnectionFactoryLookup: void <init>(java.lang.String,io.r2dbc.spi.ConnectionFactory)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message doSendAndReceive(javax.jms.Destination,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(char)> ->_SINK_
<org.springframework.core.env.ProfilesParser: org.springframework.core.env.Profiles parseTokens(java.lang.String,java.util.StringTokenizer)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping: org.springframework.web.method.HandlerMethod handleNoMatch(java.util.Set,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.core.namedparam.EmptySqlParameterSource: int getSqlType(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(java.lang.String)> ->_SINK_
<org.springframework.aop.aspectj.AspectJWeaverMessageHandler: boolean handleMessage(org.aspectj.bridge.IMessage)> ->_SINK_
<org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter: java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor,java.lang.Object[])> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object,java.util.Map)> ->_SINK_
<org.springframework.test.context.support.DynamicPropertiesContextCustomizer: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter: boolean handleError(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult,java.lang.Throwable)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder OPTIONS(java.lang.String,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.method.annotation.SessionAttributesHandler: void cleanupAttributes(org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec nodeCount(org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter: void onOpen(javax.websocket.Session,javax.websocket.EndpointConfig)> ->_SINK_
<org.springframework.web.reactive.socket.server.support.WebSocketUpgradeHandlerPredicate: boolean test(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.aop.TrueMethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class)> ->_SINK_
<org.gradle.wrapper.WrapperExecutor: void execute(java.lang.String[],org.gradle.wrapper.Install,org.gradle.wrapper.BootstrapMainStarter)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.r2dbc.core.MapBindParameterSource: java.lang.Class getType(java.lang.String)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object,java.util.Map,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfo: org.springframework.web.reactive.result.method.RequestMappingInfo combine(org.springframework.web.reactive.result.method.RequestMappingInfo)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void convertAndSend(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite: boolean isAsyncReturnValue(java.lang.Object,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.lang.Object queryForObject(org.springframework.jdbc.core.JdbcOperations,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMessageNotReadable(org.springframework.http.converter.HttpMessageNotReadableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeEmptyElement(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object patchForObject(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.core.convert.support.ZoneIdToTimeZoneConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.scheduling.concurrent.ReschedulingRunnable: boolean cancel(boolean)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: double[] getDoubleArray(java.lang.String)> ->_SINK_
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: void setErrorHandler(org.xml.sax.ErrorHandler)> ->_SINK_
<org.springframework.test.context.TestContextManager: void beforeTestMethod(java.lang.Object,java.lang.reflect.Method)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleBindException(org.springframework.validation.BindException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(int,java.util.Calendar)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String catalogNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.resource.VersionResourceResolver: org.springframework.core.io.Resource resolveResourceInternal(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: org.reactivestreams.Publisher lambda$handlePreFlight$6(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerMapping)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: boolean[] getRequiredBooleanParameters(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder handlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)> ->_SINK_
<org.springframework.web.reactive.result.condition.ParamsRequestCondition: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.function.support.HandlerFunctionAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: java.io.OutputStream setAsciiStream(long)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext: org.springframework.web.bind.support.WebExchangeDataBinder initDataBinder(org.springframework.web.bind.support.WebExchangeDataBinder,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider: java.lang.String parameterNameToUse(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.socket.config.annotation.SockJsServiceRegistration: org.springframework.web.socket.config.'annotation'.SockJsServiceRegistration setTransportHandlerOverrides(org.springframework.web.socket.sockjs.transport.TransportHandler[])> ->_SINK_
<org.springframework.web.servlet.function.ChangePathPatternParserVisitor: void endNested(org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)> ->_SINK_
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata)> ->_SINK_
<org.springframework.cglib.core.TypeUtils: org.springframework.asm.Type getType(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnTypeName(int)> ->_SINK_
<org.springframework.messaging.core.GenericMessagingTemplate: void doSend(java.lang.Object,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(java.lang.String,java.lang.Object[],int[])> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler: org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession createSession(java.lang.String,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester transports(org.reactivestreams.Publisher,io.rsocket.loadbalance.LoadbalanceStrategy)> ->_SINK_
<org.springframework.http.server.reactive.ServletServerHttpRequest: void <init>(org.springframework.util.MultiValueMap,javax.servlet.http.HttpServletRequest,javax.servlet.AsyncContext,java.lang.String,org.springframework.core.io.buffer.DataBufferFactory,int)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite: org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite addHandler(org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler)> ->_SINK_
<org.springframework.core.convert.support.ObjectToCollectionConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider: boolean byPassReturnParameter(java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractStaxXMLReader: void parse(java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler: org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession createSession(java.lang.String,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.messaging.simp.stomp.DefaultStompSession: org.springframework.messaging.simp.stomp.StompSession$Receiptable send(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void <init>(java.lang.Class,java.lang.String)> ->_SINK_
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.test.context.event.DefaultApplicationEvents: java.util.stream.Stream stream(java.lang.Class)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceWebHandler: reactor.core.publisher.Mono lambda$handle$1(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.aop.framework.adapter.AfterReturningAdviceAdapter: boolean supportsAdvice(org.aopalliance.aop.Advice)> ->_SINK_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: void handleMatch(java.lang.Object,org.springframework.web.method.HandlerMethod,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.convert.support.StringToBooleanConverter: java.lang.Boolean convert(java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int updateByNamedParam(java.util.Map)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: java.lang.Object getProperty(java.lang.String)> ->_SINK_
<org.springframework.beans.factory.xml.DefaultDocumentLoader: org.w3c.dom.Document loadDocument(org.xml.sax.InputSource,org.xml.sax.EntityResolver,org.xml.sax.ErrorHandler,int,boolean)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: java.lang.String getSubString(long,int)> ->_SINK_
<org.springframework.core.convert.support.StringToCurrencyConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.scripting.config.ScriptBeanDefinitionParser: org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: java.util.Map processHeadersToSend(java.util.Map)> ->_SINK_
<org.springframework.messaging.support.ChannelInterceptorAdapter: void postSend(org.springframework.messaging.Message,org.springframework.messaging.MessageChannel,boolean)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder header(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.result.view.BindStatus: void <init>(org.springframework.web.reactive.result.view.RequestContext,java.lang.String,boolean)> ->_SINK_
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void <init>(java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsServiceConfig,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.core.convert.support.StringToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jms.listener.adapter.MessageListenerAdapter: void onMessage(javax.jms.Message,javax.jms.Session)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: int[] doExecuteBatch(org.springframework.jdbc.core.namedparam.SqlParameterSource[])> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField parseDaysOfWeek(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void <init>(org.springframework.jdbc.support.SQLErrorCodes)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.util.xml.StaxResult: void setHandler(org.xml.sax.ContentHandler)> ->_SINK_
<org.springframework.core.convert.support.NumberToNumberConverterFactory: org.springframework.core.convert.converter.Converter getConverter(java.lang.Class)> ->_SINK_
<org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite: org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite addResolver(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver)> ->_SINK_
<org.springframework.web.servlet.support.ServletUriComponentsBuilder: org.springframework.web.servlet.support.ServletUriComponentsBuilder fromContextPath(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.beans.GenericTypeAwarePropertyDescriptor: void <init>(java.lang.Class,java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class)> ->_SINK_
<org.springframework.format.datetime.standard.PeriodFormatter: java.time.Period parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler: void registerMessagingAdvice(org.springframework.messaging.handler.MessagingAdviceBean)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeFunction(java.lang.Class,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.resource.VersionResourceResolver: org.springframework.web.reactive.resource.VersionResourceResolver addVersionStrategy(org.springframework.web.reactive.resource.VersionStrategy,java.lang.String[])> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void access$200(org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter,javax.websocket.Session,java.nio.ByteBuffer)> ->_SINK_
<org.springframework.format.datetime.standard.MonthFormatter: java.lang.String print(java.time.Month,java.util.Locale)> ->_SINK_
<org.springframework.util.StringUtils: java.util.Locale parseLocaleString(java.lang.String)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseHours(java.lang.String)> ->_SINK_
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method determineDestroyMethod(java.lang.String)> ->_SINK_
<org.springframework.core.log.CompositeLog: void error(java.lang.Object,java.lang.Throwable)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.servlet.ModelAndView handleInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: byte getByte(int)> ->_SINK_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: void lambda$handle$2(org.springframework.web.server.ServerWebExchange,java.lang.Void)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(int)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: float getFloat(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver: java.lang.Object resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void printModelAndView(org.springframework.web.servlet.ModelAndView)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: void addReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void handleBinaryMessage(javax.websocket.Session,java.nio.ByteBuffer,boolean)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: int doExecute(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void setCustomReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter: void onFullBinaryMessage(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.BufferedBinaryMessage)> ->_SINK_
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String toString(org.springframework.expression.spel.standard.Token)> ->_SINK_
<org.springframework.web.socket.messaging.SessionDisconnectEvent: void <init>(java.lang.Object,org.springframework.messaging.Message,java.lang.String,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void onError(javax.websocket.Session,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.RowMapperResultSetExtractor: void <init>(org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind valueOf(java.lang.String)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitTryCatchBlock(org.springframework.asm.Label,org.springframework.asm.Label,org.springframework.asm.Label,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: java.io.Reader getCharacterStream(long,long)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: void POST(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: java.util.stream.Stream stream(java.lang.String)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.format.number.money.MonetaryAmountFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractEncoderMethodReturnValueHandler: org.reactivestreams.Publisher lambda$handleReturnValue$0(org.springframework.core.MethodParameter,org.springframework.messaging.Message,org.reactivestreams.Publisher)> ->_SINK_
<org.springframework.web.servlet.i18n.CookieLocaleResolver: java.util.Locale parseLocaleValue(java.lang.String)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeNamespace(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService: reactor.core.publisher.Mono handleBadRequest(org.springframework.web.server.ServerWebExchange,java.lang.String)> ->_SINK_
<org.springframework.context.support.ApplicationListenerDetector: java.lang.Object postProcessAfterInitialization(java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.context.index.processor.TypeHelper: java.util.List getAllAnnotationMirrors(javax.lang.model.element.Element)> ->_SINK_
<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: void handle(com.sun.net.httpserver.HttpExchange)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: void lock(java.lang.String,java.lang.Object,org.hibernate.LockMode)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField lambda$parseDaysOfWeek$1(java.lang.String,org.springframework.scheduling.support.CronField$Type)> ->_SINK_
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void handleTransportError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable)> ->_SINK_
<org.springframework.r2dbc.connection.init.ScriptUtils: reactor.core.publisher.Mono executeSqlScript(io.r2dbc.spi.Connection,org.springframework.core.io.support.EncodedResource,org.springframework.core.io.buffer.DataBufferFactory,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl: void <init>(org.springframework.aop.aspectj.AspectJExpressionPointcut,java.lang.reflect.Method,org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory,org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory,int,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: java.util.Map asMap(java.util.function.Function,org.springframework.core.'annotation'.MergedAnnotation$Adapt[])> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl multipart$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.support.ConstructorResolver: java.lang.Object instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor,java.lang.Object[])> ->_SINK_
<org.springframework.test.web.reactive.server.StatusAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isEqualTo(int)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: java.lang.Object browseSelected(javax.jms.Queue,java.lang.String,org.springframework.jms.core.BrowserCallback)> ->_SINK_
<org.springframework.web.reactive.result.condition.ParamsRequestCondition: void <init>(java.lang.String[])> ->_SINK_
<org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor: void visit(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor: void processScheduled(org.springframework.scheduling.'annotation'.Scheduled,java.lang.reflect.Method,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.web.reactive.function.server.support.ServerResponseResultHandler: boolean supports(org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.test.jdbc.JdbcTestUtils: int deleteFromTables(org.springframework.jdbc.core.JdbcTemplate,java.lang.String[])> ->_SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: java.lang.Object unwrap(java.lang.Class)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: void lambda$detectHandlerMethods$1(java.lang.Object,java.lang.reflect.Method,java.lang.Object)> ->_SINK_
<org.springframework.web.method.annotation.RequestHeaderMapMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ServerWebExchangeMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField parseMonth(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.web.jsf.DelegatingNavigationHandlerProxy: void handleNavigation(javax.faces.context.FacesContext,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.RowMapperResultSetExtractor: java.util.List extractData(java.sql.ResultSet)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: org.xml.sax.ErrorHandler getErrorHandler()> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantInvokeDynamic(java.lang.String,java.lang.String,org.springframework.asm.Handle,java.lang.Object[])> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinition parseCustomElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: boolean containsKey(java.lang.Object)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void publish(javax.jms.Message,int,int,long)> ->_SINK_
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureHandlerExceptionResolvers(java.util.List)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler: void handleRequestInternal(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantMethodType(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.config.annotation.ViewResolverRegistry: void enableContentNegotiation(org.springframework.web.servlet.View[])> ->_SINK_
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void run(org.junit.runner.notification.RunNotifier)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: double getRequiredDoubleParameter(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: boolean getFeature(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.util.List reconcileColumnsToUse(java.util.List,java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestBodyMethodArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec path(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession: reactor.core.publisher.Mono send(org.reactivestreams.Publisher)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void setReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMapMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.servlet.resource.VersionResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.util.xml.DomContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getString(int)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(java.lang.Object)> ->_SINK_
<org.springframework.util.ClassUtils: java.lang.String convertResourcePathToClassName(java.lang.String)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: long position(java.sql.Clob,long)> ->_SINK_
<org.springframework.web.reactive.result.condition.PatternsRequestCondition: int compareTo(org.springframework.web.reactive.result.condition.PatternsRequestCondition,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClient: void <init>(org.springframework.r2dbc.core.binding.BindMarkersFactory,io.r2dbc.spi.ConnectionFactory,org.springframework.r2dbc.core.ExecuteFunction,boolean)> ->_SINK_
<org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: double getDouble(java.lang.String)> ->_SINK_
<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendPongMessage(org.springframework.web.socket.PongMessage)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField parseMinutes(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.JettyWebSocketSession: reactor.core.publisher.Mono close(org.springframework.web.reactive.socket.CloseStatus)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: org.springframework.web.reactive.result.method.'annotation'.SessionAttributesHandler getSessionAttributesHandler(org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.r2dbc.connection.init.ScriptUtils: org.reactivestreams.Publisher runStatement(java.lang.String,io.r2dbc.spi.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.util.concurrent.atomic.AtomicInteger)> ->_SINK_
<org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser: void access$400(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,boolean)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClient: org.springframework.r2dbc.core.DatabaseClient$GenericExecuteSpec sql(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.HandlerResult: reactor.core.publisher.Mono applyExceptionHandler(java.lang.Throwable)> ->_SINK_
<org.springframework.context.annotation.ConfigurationMethod: void validate(org.springframework.beans.factory.parsing.ProblemReporter)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.stream.Stream queryForStream(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler: void handleUncaughtException(java.lang.Throwable,java.lang.reflect.Method,java.lang.Object[])> ->_SINK_
<org.springframework.jms.listener.AbstractMessageListenerContainer: void invokeErrorHandler(java.lang.Throwable)> ->_SINK_
<org.springframework.expression.spel.standard.Tokenizer: void <init>(java.lang.String)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(java.lang.String,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void endEntity(java.lang.String)> ->_SINK_
<org.springframework.web.socket.adapter.jetty.JettyWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.jndi.JndiTemplate: void unbind(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.resource.GzipResourceResolver: reactor.core.publisher.Mono resolveResourceInternal(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.web.reactive.result.condition.ProducesRequestCondition: int compareTo(org.springframework.web.reactive.result.condition.ProducesRequestCondition,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: org.springframework.web.method.HandlerMethod handleNoMatch(java.util.Set,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: char[] getCharArray(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.ToStringVisitor: void route(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.format.datetime.standard.YearMonthFormatter: java.time.YearMonth parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: reactor.core.publisher.Mono handleResult(org.springframework.web.reactive.HandlerResult,org.springframework.web.reactive.BindingContext)> ->_SINK_
<org.springframework.transaction.annotation.JtaTransactionAnnotationParser: org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(javax.transaction.Transactional)> ->_SINK_
<org.springframework.web.servlet.function.ToStringVisitor: void route(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: boolean isCurrency(int)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> ->_SINK_
<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(float)> ->_SINK_
<org.springframework.test.web.servlet.result.XpathResultMatchersDsl: void <init>(org.springframework.test.web.servlet.ResultActions,java.lang.String,java.util.Map,java.lang.Object[],int,kotlin.jvm.internal.DefaultConstructorMarker)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeStartDocument(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.support.RouterFunctionMapping: reactor.core.publisher.Mono getHandlerInternal(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: int[] getIntArray(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.AbstractServerResponse: org.springframework.web.servlet.ModelAndView writeTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_SINK_
<org.springframework.jms.config.JmsListenerContainerParser: org.springframework.beans.MutablePropertyValues parseSpecificContainerProperties(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.test.web.servlet.client.ApplicationContextMockMvcSpec: void <init>(org.springframework.web.context.WebApplicationContext)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int[] batchUpdate(java.lang.String,java.util.List,int[])> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeEntityRef(java.lang.String)> ->_SINK_
<org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ->_SINK_
<org.springframework.cache.interceptor.AbstractCacheInvoker: void setErrorHandler(org.springframework.cache.interceptor.CacheErrorHandler)> ->_SINK_
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void processingInstructionInternal(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder replaceQueryParam(java.lang.String,java.util.Collection)> ->_SINK_
<org.springframework.format.datetime.standard.MonthDayFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider: org.springframework.jdbc.core.SqlParameter createDefaultOutParameter(java.lang.String,org.springframework.jdbc.core.metadata.CallParameterMetaData)> ->_SINK_
<org.springframework.core.task.SimpleAsyncTaskExecutor: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: void set(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.cglib.core.DebuggingClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: void initializeWithTableColumnMetaData(java.sql.DatabaseMetaData,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests: void executeSqlScript(java.lang.String,boolean)> ->_SINK_
<org.springframework.web.reactive.result.condition.ConsumesRequestCondition: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection: void <init>(org.springframework.test.web.servlet.MockMvc,com.gargoylesoftware.htmlunit.WebClient,java.lang.String)> ->_SINK_
<org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter: void setHandlerMethod(org.springframework.messaging.handler.invocation.InvocableHandlerMethod)> ->_SINK_
<org.springframework.messaging.simp.SimpMessagingTemplate: void doSend(java.lang.Object,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void registerMapping(org.springframework.web.servlet.mvc.method.RequestMappingInfo,java.lang.Object,java.lang.reflect.Method)> ->_SINK_
<org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.expression.spel.ast.ConstructorReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)> ->_SINK_
<org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin: byte[] transform(java.lang.String,byte[],java.security.CodeSource,java.lang.ClassLoader)> ->_SINK_
<org.springframework.jdbc.datasource.init.UncategorizedScriptException: void <init>(java.lang.String,java.lang.Throwable)> ->_SINK_
<org.springframework.web.reactive.resource.PathResourceResolver: reactor.core.publisher.Mono resolveResourceInternal(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.messaging.rsocket.MetadataEncoder: org.springframework.messaging.rsocket.MetadataEncoder metadataAndOrRoute(java.util.Map,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec domain(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleNoHandlerFoundException(org.springframework.web.servlet.NoHandlerFoundException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: java.util.Map matchInParameterValuesWithCallParameters(java.util.Map)> ->_SINK_
<org.springframework.core.convert.support.ArrayToObjectConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.handler.HandlerMappingIntrospector: boolean lambda$initPathPatternMatchableHandlerMappings$2(org.springframework.web.servlet.handler.MatchableHandlerMapping)> ->_SINK_
<org.springframework.test.web.ModelAndViewAssert: void assertModelAttributeAvailable(org.springframework.web.servlet.ModelAndView,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: long position(byte[],long)> ->_SINK_
<org.springframework.util.xml.DomContentHandler: void ignorableWhitespace(char[],int,int)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantPackage(java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.ObjectToObjectConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.http.client.InterceptingAsyncClientHttpRequest: org.springframework.util.concurrent.ListenableFuture executeInternal(org.springframework.http.HttpHeaders,byte[])> ->_SINK_
<org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <init>(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.scheduling.support.QuartzCronField: boolean isQuartzDaysOfWeekField(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate and(org.springframework.web.servlet.function.RequestPredicate,java.lang.String)> ->_SINK_
<org.springframework.asm.FieldWriter: void visitAttribute(org.springframework.asm.Attribute)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,java.util.Map,java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: void PATCH(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.asm.MethodWriter: org.springframework.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.springframework.asm.TypePath,org.springframework.asm.Label[],org.springframework.asm.Label[],int[],java.lang.String,boolean)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void handleTextMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseField(java.lang.String,org.springframework.scheduling.support.CronField$Type)> ->_SINK_
<org.springframework.web.reactive.resource.CssLinkResourceTransformer: reactor.core.publisher.Mono transform(org.springframework.web.server.ServerWebExchange,org.springframework.core.io.Resource,org.springframework.web.reactive.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser: void parseErrorHandler(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder POST(org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean absolute(int)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: org.springframework.web.reactive.function.client.ExchangeFunction access$900(org.springframework.web.reactive.function.client.DefaultWebClient)> ->_SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void prepareTransactionalConnection(java.sql.Connection,org.springframework.transaction.TransactionDefinition)> ->_SINK_
<org.springframework.web.context.request.async.CallableInterceptorChain: void applyPreProcess(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element)> ->_SINK_
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void handleMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(float)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.util.List put(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.client.RestTemplate: void put(java.lang.String,java.lang.Object,java.util.Map)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.web.reactive.function.server.PathResourceLookupFunction: void <init>(java.lang.String,org.springframework.core.io.Resource)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(long)> ->_SINK_
<org.springframework.jms.connection.CachedMessageConsumer: javax.jms.Message receive(long)> ->_SINK_
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String,org.springframework.expression.ParserContext)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: java.lang.Object execute(org.springframework.jms.core.ProducerCallback)> ->_SINK_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.String get(java.lang.Object)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void convertAndSend(java.lang.Object,java.lang.Object,java.util.Map,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite: org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite addHandlers(java.util.List)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractAsyncReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeObject(java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: java.lang.String lambda$handle$1(org.springframework.web.server.ServerWebExchange,java.lang.Boolean)> ->_SINK_
<org.springframework.cglib.proxy.MixinEmitter: void <init>(org.springframework.asm.ClassVisitor,java.lang.String,java.lang.Class[],int[])> ->_SINK_
<org.springframework.web.socket.adapter.jetty.JettyWebSocketSession: void sendPingMessage(org.springframework.web.socket.PingMessage)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: void setFeature(java.lang.String,boolean)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: void initializeWithProcedureColumnMetaData(java.sql.DatabaseMetaData,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jca.context.BootstrapContextAwareProcessor: java.lang.Object postProcessAfterInitialization(java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.messaging.support.ChannelInterceptorAdapter: void afterSendCompletion(org.springframework.messaging.Message,org.springframework.messaging.MessageChannel,boolean,java.lang.Exception)> ->_SINK_
<org.springframework.web.socket.adapter.jetty.JettyWebSocketSession: void sendPongMessage(org.springframework.web.socket.PongMessage)> ->_SINK_
<org.springframework.core.convert.support.NumberToCharacterConverter: java.lang.Character convert(java.lang.Number)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(int)> ->_SINK_
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureDefaultServletHandling(org.springframework.web.servlet.config.'annotation'.DefaultServletHandlerConfigurer)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void setBeanName(java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: org.springframework.test.web.reactive.server.WebTestClient$Builder filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: reactor.core.publisher.Mono lambda$handleMessage$0(org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.reactive.config.WebFluxConfigurerComposite: void addResourceHandlers(org.springframework.web.reactive.config.ResourceHandlerRegistry)> ->_SINK_
<org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.web.servlet.config.'annotation'.PathMatchConfigurer setPatternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleConversionNotSupported(org.springframework.beans.ConversionNotSupportedException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.r2dbc.core.MapBindParameterSource: boolean hasValue(java.lang.String)> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: void handleMessageToClient(org.springframework.web.socket.WebSocketSession,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(java.lang.String)> ->_SINK_
<org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.core.metrics.jfr.FlightRecorderStartupEvent: void <init>(long,java.lang.String,long)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder dataMimeType(org.springframework.util.MimeType)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.HttpHeadersReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: void afterCompletion(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.jdbc.object.StoredProcedure: java.util.Map execute(java.util.Map)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver: java.lang.Object resolveNamedValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver: void handleResolvedValue(java.lang.Object,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.util.xml.StaxEventHandler: void processingInstructionInternal(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(boolean)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: void afterCompletion(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor: void endNested(org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.util.xml.AbstractStaxXMLReader: void startPrefixMapping(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: void <init>(org.springframework.web.server.adapter.WebHttpHandlerBuilder,org.springframework.http.client.reactive.ClientHttpConnector)> ->_SINK_
<org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext: java.lang.Object unwrap(java.lang.Class)> ->_SINK_
<org.springframework.core.testfixture.TestGroupsCondition: org.junit.jupiter.api.extension.ConditionEvaluationResult evaluateExecutionCondition(org.junit.jupiter.api.extension.ExtensionContext)> ->_SINK_
<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,org.springframework.web.servlet.resource.ResourceTransformer,org.springframework.web.servlet.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.web.servlet.function.RequestPredicates: org.springframework.web.servlet.function.RequestPredicate lambda$pathPredicates$1(org.springframework.web.util.pattern.PathPatternParser,java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getNamespaceURI(java.lang.String)> ->_SINK_
<org.springframework.cache.interceptor.SimpleCacheErrorHandler: void handleCacheEvictError(java.lang.RuntimeException,org.springframework.cache.Cache,java.lang.Object)> ->_SINK_
<org.springframework.web.context.request.async.CallableInterceptorChain: java.lang.Object triggerAfterTimeout(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: void putAll(java.util.Map)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: void setDataSourceLookup(org.springframework.jdbc.datasource.lookup.DataSourceLookup)> ->_SINK_
<org.springframework.util.NumberUtils: java.lang.Number parseNumber(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity getForEntity(java.lang.String,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession: void handleInitialRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.sockjs.frame.SockJsFrameFormat)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate and(java.lang.String,org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.jdbc.core.namedparam.EmptySqlParameterSource: java.lang.String getTypeName(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy: java.lang.String getName(org.springframework.web.method.HandlerMethod,org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_SINK_
<org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter: void onWebSocketFrame(org.eclipse.jetty.websocket.api.extensions.Frame)> ->_SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory: org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.util.List)> ->_SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: int update(java.lang.Object[])> ->_SINK_
<org.springframework.r2dbc.core.NamedParameterExpander: java.util.List getParameterNames(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder: void <init>(org.springframework.web.reactive.function.server.RenderingResponse)> ->_SINK_
<org.springframework.context.index.processor.SortedProperties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureDefaultServletHandling(org.springframework.web.servlet.config.'annotation'.DefaultServletHandlerConfigurer)> ->_SINK_
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class)> ->_SINK_
<org.springframework.web.server.adapter.HttpWebHandlerAdapter: reactor.core.publisher.Mono lambda$handle$3(org.springframework.web.server.ServerWebExchange,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.net.URI,org.springframework.web.socket.WebSocketHttpHeaders,org.springframework.messaging.simp.stomp.StompHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: byte[] getByteArray(java.lang.String)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: short getShort(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.object.SqlFunction: java.lang.Object runGeneric(java.lang.Object[])> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: void setProperty(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: void PUT(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter: void setEndpointFeatures(javax.xml.ws.WebServiceFeature[])> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void initializeNativeSession(javax.websocket.Session)> ->_SINK_
<org.springframework.jdbc.object.SqlFunction: java.lang.Object runGeneric(int)> ->_SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(java.lang.String,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener: void beforeTestMethod(org.springframework.test.context.TestContext)> ->_SINK_
<org.springframework.transaction.annotation.JtaTransactionAnnotationParser: org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: boolean containsValue(java.lang.Object)> ->_SINK_
<org.springframework.web.socket.adapter.jetty.JettyWebSocketSession: void initializeNativeSession(org.eclipse.jetty.websocket.api.Session)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void setHandlerMethodMappingNamingStrategy(org.springframework.web.servlet.handler.HandlerMethodMappingNamingStrategy)> ->_SINK_
<org.springframework.web.reactive.socket.client.JettyWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeObject(java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: void <init>(org.springframework.web.server.adapter.WebHttpHandlerBuilder)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.HttpEntityMethodArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: boolean containsKey(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.reactive.resource.ResourceResolverChain,java.util.List)> ->_SINK_
<org.springframework.test.web.client.AbstractRequestExpectationManager: org.springframework.test.web.client.ResponseActions expectRequest(org.springframework.test.web.client.ExpectedCount,org.springframework.test.web.client.RequestMatcher)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: org.springframework.util.MultiValueMap access$700(org.springframework.web.reactive.function.client.DefaultWebClient)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(int)> ->_SINK_
<org.springframework.messaging.support.ExecutorSubscribableChannel: boolean sendInternal(org.springframework.messaging.Message,long)> ->_SINK_
<org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool: boolean runInThread(java.lang.Runnable)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Queue,javax.jms.Message)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl post$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: float getRequiredFloatParameter(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.ObjectToOptionalConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> ->_SINK_
<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport: org.springframework.web.servlet.HandlerMapping stompWebSocketHandlerMapping(org.springframework.web.socket.WebSocketHandler,org.springframework.scheduling.TaskScheduler)> ->_SINK_
<org.springframework.jdbc.object.SqlFunction: int run(int)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder route(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleNotationDeclaration(javax.xml.stream.events.NotationDeclaration)> ->_SINK_
<org.springframework.web.servlet.HandlerExecutionChain: boolean applyPreHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void setPatternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.web.servlet.function.DefaultAsyncServerResponse: org.springframework.web.servlet.ModelAndView writeTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_SINK_
<org.springframework.cache.annotation.SpringCacheAnnotationParser: java.util.Collection parseCacheAnnotations(java.lang.reflect.Method)> ->_SINK_
<org.springframework.util.xml.DomContentHandler: void endPrefixMapping(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor: void route(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.format.datetime.standard.PeriodFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder GET(java.lang.String,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void registerHandlerMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerRequestBuilder: void <init>(org.springframework.web.reactive.function.server.ServerRequest)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.String,java.util.function.Predicate)> ->_SINK_
<org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.support.BeanDefinitionResource: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: java.lang.Object getHandlerInternal(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource: boolean hasValue(java.lang.String)> ->_SINK_
<org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter: java.lang.Object generate(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void configureDefaultCodec(java.util.function.Consumer)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void handleWarnings(java.sql.SQLWarning)> ->_SINK_
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentTypeCompatibleWith(org.springframework.http.MediaType)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl patch$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: boolean matches(int,org.springframework.web.util.pattern.PathPattern$MatchingContext)> ->_SINK_
<org.springframework.http.client.reactive.ReactorClientHttpConnector: reactor.core.publisher.Mono connect(org.springframework.http.HttpMethod,java.net.URI,java.util.function.Function)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.util.Set optionsForAllow(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.util.xml.DomContentHandler: void skippedEntity(java.lang.String)> ->_SINK_
<org.springframework.format.datetime.standard.DurationFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition: org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition combine(org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,java.util.Date,long)> ->_SINK_
<org.springframework.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> ->_SINK_
<org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor: void afterConcurrentHandlingStarted(org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.messaging.simp.SimpMessagingTemplate: void convertAndSendToUser(java.lang.String,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.HsqlEmbeddedDatabaseConfigurer: void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties,java.lang.String)> ->_SINK_
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(char[])> ->_SINK_
<org.springframework.web.servlet.mvc.condition.CompositeRequestCondition: int compareTo(org.springframework.web.servlet.mvc.condition.CompositeRequestCondition,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void endPrefixMapping(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void HEAD(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter: void handleFrame(org.springframework.messaging.simp.stomp.StompHeaders,java.lang.Object)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String,java.util.function.Consumer)> ->_SINK_
<org.springframework.context.event.ApplicationListenerMethodAdapter: void lambda$handleResult$0(java.lang.Object,java.lang.Throwable)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.format.datetime.joda.MonthDayFormatter: java.lang.String print(org.joda.time.MonthDay,java.util.Locale)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void handleMessageInternal(org.springframework.messaging.Message,java.lang.String)> ->_SINK_
<org.springframework.beans.factory.support.FactoryBeanRegistrySupport: java.lang.Class getTypeForFactoryBean(org.springframework.beans.factory.FactoryBean)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantModule(java.lang.String)> ->_SINK_
<org.springframework.scheduling.commonj.WorkManagerTaskExecutor: void execute(java.lang.Runnable,long)> ->_SINK_
<org.springframework.web.servlet.handler.HandlerMappingIntrospector: org.springframework.web.servlet.handler.MatchableHandlerMapping getMatchableHandlerMapping(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.util.List,java.security.AccessControlContext)> ->_SINK_
<org.springframework.web.reactive.result.condition.HeadersRequestCondition: org.springframework.web.reactive.result.condition.HeadersRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.io.InputStream getClobAsAsciiStream(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultRouterFunctionSpec: org.springframework.test.web.reactive.server.WebTestClient$RouterFunctionSpec handlerStrategies(org.springframework.web.reactive.function.server.HandlerStrategies)> ->_SINK_
<org.springframework.jdbc.support.JdbcUtils: java.lang.Object extractDatabaseMetaData(javax.sql.DataSource,org.springframework.jdbc.support.DatabaseMetaDataCallback)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctions: org.springframework.http.server.reactive.HttpHandler toHttpHandler(org.springframework.web.reactive.function.server.RouterFunction)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession: void sendMessage(org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: boolean isSigned(int)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnName(int)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor: java.lang.String getRequestValueForAttribute(java.lang.String,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.format.datetime.joda.ReadablePartialPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.result.condition.HeadersRequestCondition: int compareTo(org.springframework.web.reactive.result.condition.HeadersRequestCondition,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.messaging.core.GenericMessagingTemplate: void doSend(org.springframework.messaging.MessageChannel,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.scheduling.support.QuartzCronField: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: void execute(java.lang.Runnable,long)> ->_SINK_
<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int compare(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void handleMessage(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration: void addReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.test.web.client.match.ContentRequestMatchers: org.springframework.test.web.client.RequestMatcher contentType(java.lang.String)> ->_SINK_
<org.springframework.mock.web.MockExpressionEvaluator: javax.servlet.jsp.el.Expression parseExpression(java.lang.String,java.lang.Class,javax.servlet.jsp.el.FunctionMapper)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addResourceHandlers(org.springframework.web.servlet.config.'annotation'.ResourceHandlerRegistry)> ->_SINK_
<org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor: void postHandle(org.springframework.web.context.request.WebRequest,org.springframework.ui.ModelMap)> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerRequest: java.util.Optional param(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.ParamsRequestCondition: void <init>(java.lang.String[])> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Destination,javax.jms.Message,javax.jms.CompletionListener)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.List findByValueBean(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: java.util.function.Consumer access$500(org.springframework.web.reactive.function.client.DefaultWebClient)> ->_SINK_
<org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration: org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler simpleBrokerMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.simp.user.UserDestinationResolver)> ->_SINK_
<org.springframework.jdbc.object.StoredProcedure: java.util.Map execute(java.lang.Object[])> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void initializeDelegateSession(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.jdbc.core.SqlParameterValue: void <init>(int,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.util.OpaqueUriComponents: org.springframework.web.util.UriComponents expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getNamespacePrefix(int)> ->_SINK_
<org.springframework.web.socket.handler.TextWebSocketHandler: void handleBinaryMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.BinaryMessage)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Mono metadataPush(io.rsocket.Payload)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitVarInsn(int,int)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void setDefaultProtocolHandler(org.springframework.web.socket.messaging.SubProtocolHandler)> ->_SINK_
<org.springframework.format.number.CurrencyStyleFormatter: java.math.BigDecimal parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.context.support.DefaultLifecycleProcessor: void doStop(java.util.Map,java.lang.String,java.util.concurrent.CountDownLatch,java.util.Set)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec nodeCount(int)> ->_SINK_
<org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(org.springframework.format.'annotation'.DateTimeFormat,java.lang.Class)> ->_SINK_
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod: org.springframework.web.reactive.HandlerResult invokeForHandlerResult(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.BindingContext,java.lang.Object[])> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendPingMessage(org.springframework.web.socket.PingMessage)> ->_SINK_
<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void afterTestMethod(org.springframework.test.context.TestContext)> ->_SINK_
<org.springframework.http.client.OkHttp3ClientHttpRequest: org.springframework.http.client.ClientHttpResponse executeInternal(org.springframework.http.HttpHeaders,byte[])> ->_SINK_
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: javax.xml.namespace.QName toQName(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerUserRegistryMessageHandler(org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.config.RuntimeBeanReference,java.lang.String,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Destination,javax.jms.Message,int,int,long)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.MapDataSourceLookup: void <init>(java.lang.String,javax.sql.DataSource)> ->_SINK_
<org.springframework.core.convert.support.ArrayToStringConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnLabel(int)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.util.Map,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getPrecision(int)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: reactor.core.publisher.Mono handleReturnValue(java.lang.Object,org.springframework.messaging.handler.HandlerMethod,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: javax.jms.Message receiveSelected(javax.jms.Destination,java.lang.String)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void registerExceptionHandlerAdvice(org.springframework.messaging.handler.MessagingAdviceBean,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver)> ->_SINK_
<org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration: org.springframework.messaging.simp.'annotation'.support.SimpAnnotationMethodMessageHandler simpAnnotationMethodMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.simp.SimpMessagingTemplate,org.springframework.messaging.converter.CompositeMessageConverter)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitLineNumber(int,org.springframework.asm.Label)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.MapDataSourceLookup: void addDataSource(java.lang.String,javax.sql.DataSource)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)> ->_SINK_
<org.springframework.mail.javamail.JavaMailSenderImpl: void send(javax.mail.internet.MimeMessage[])> ->_SINK_
<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.lang.Class)> ->_SINK_
<org.springframework.web.multipart.commons.CommonsMultipartResolver: void cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)> ->_SINK_
<org.springframework.web.filter.reactive.ServerWebExchangeContextFilter: reactor.core.publisher.Mono filter(org.springframework.web.server.ServerWebExchange,org.springframework.web.server.WebFilterChain)> ->_SINK_
<org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver: java.lang.Object resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.method.support.CompositeUriComponentsContributor: void contributeMethodArgument(org.springframework.core.MethodParameter,java.lang.Object,org.springframework.web.util.UriComponentsBuilder,java.util.Map,org.springframework.core.convert.ConversionService)> ->_SINK_
<org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService: reactor.core.publisher.Mono lambda$handleRequest$1(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.socket.WebSocketHandler,java.lang.String,org.springframework.http.server.reactive.ServerHttpRequest,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[],java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter: void extendHandlerExceptionResolvers(java.util.List)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession: void handleFrame(java.lang.String)> ->_SINK_
<org.springframework.format.datetime.standard.YearMonthFormatter: java.lang.String print(java.time.YearMonth,java.util.Locale)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod: void invokeAndHandle(org.springframework.web.context.request.ServletWebRequest,org.springframework.web.method.support.ModelAndViewContainer,java.lang.Object[])> ->_SINK_
<org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor: void <init>(java.lang.String,org.springframework.core.'annotation'.AnnotationAttributes,java.lang.ClassLoader)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleMissingServletRequestParameter(org.springframework.web.bind.MissingServletRequestParameterException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.web.reactive.socket.client.UndertowWebSocketClient: void access$000(org.springframework.web.reactive.socket.client.UndertowWebSocketClient,java.net.URI,org.springframework.web.reactive.socket.WebSocketHandler,reactor.core.publisher.Sinks$Empty,org.springframework.web.reactive.socket.client.UndertowWebSocketClient$DefaultNegotiation,io.undertow.websockets.core.WebSocketChannel)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.Object[],org.springframework.jdbc.support.KeyHolder)> ->_SINK_
<org.springframework.http.codec.support.ClientDefaultCodecsImpl: void serverSentEventDecoder(org.springframework.core.codec.Decoder)> ->_SINK_
<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void close(org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.lang.Object executeObject(java.lang.Class,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.http.client.BufferingClientHttpRequestWrapper: org.springframework.http.client.ClientHttpResponse executeInternal(org.springframework.http.HttpHeaders,byte[])> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void convertAndSend(javax.jms.Destination,java.lang.Object)> ->_SINK_
<org.springframework.scheduling.support.CronExpression: org.springframework.scheduling.support.CronExpression parse(java.lang.String)> ->_SINK_
<org.springframework.util.unit.DataSize: org.springframework.util.unit.DataSize parse(java.lang.CharSequence)> ->_SINK_
<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void setPortFeatures(javax.xml.ws.WebServiceFeature[])> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: int[] getRequiredIntParameters(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.ReactorServerHttpResponse: reactor.core.publisher.Mono writeAndFlushWithInternal(org.reactivestreams.Publisher)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(int,int)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: org.springframework.http.HttpHeaders access$600(org.springframework.web.reactive.function.client.DefaultWebClient)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PATCH(java.lang.String,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,int)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.web.bind.support.DefaultSessionAttributeStore: void cleanupAttribute(org.springframework.web.context.request.WebRequest,java.lang.String)> ->_SINK_
<org.springframework.cache.interceptor.SimpleCacheErrorHandler: void handleCacheClearError(java.lang.RuntimeException,org.springframework.cache.Cache)> ->_SINK_
<org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl: void <init>(org.springframework.test.web.servlet.ResultActions,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.asm.ModuleWriter: void visitProvide(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.messaging.handler.annotation.reactive.AbstractNamedValueMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: org.springframework.web.util.HierarchicalUriComponents expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy: java.lang.String getName(org.springframework.web.method.HandlerMethod,java.lang.Object)> ->_SINK_
<org.springframework.aop.framework.CglibAopProxy: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void addSessionCookie(org.springframework.mock.web.MockHttpServletRequest,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView doResolveHandlerMethodException(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.method.HandlerMethod,java.lang.Exception)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec string(org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.reactive.result.condition.RequestConditionHolder: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.web.reactive.function.client.ExchangeFunction access$300(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.asm.SymbolTable: int addUninitializedType(java.lang.String,int)> ->_SINK_
<org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter: java.lang.Object handleError(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Throwable)> ->_SINK_
<org.springframework.core.env.CommandLineArgs: boolean containsOption(java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int,java.util.Map)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getNString(int)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int,int)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: org.springframework.core.'annotation'.AnnotationAttributes asAnnotationAttributes(org.springframework.core.'annotation'.MergedAnnotation$Adapt[])> ->_SINK_
<org.springframework.context.support.ApplicationContextAwareProcessor: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void mergeImportedBy(org.springframework.context.'annotation'.ConfigurationClass)> ->_SINK_
<org.springframework.asm.ModuleWriter: void visitExport(java.lang.String,int,java.lang.String[])> ->_SINK_
<org.springframework.web.servlet.i18n.LocaleChangeInterceptor: java.util.Locale parseLocaleValue(java.lang.String)> ->_SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: org.springframework.jdbc.core.namedparam.ParsedSql getParsedSql(java.lang.String)> ->_SINK_
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: void set(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: reactor.core.publisher.Mono access$1100(org.springframework.web.reactive.function.client.ClientResponse)> ->_SINK_
<org.springframework.jdbc.object.MappingSqlQueryWithParameters: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.view.RedirectView: reactor.core.publisher.Mono sendRedirect(java.lang.String,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.convert.support.StringToNumberConverterFactory: org.springframework.core.convert.converter.Converter getConverter(java.lang.Class)> ->_SINK_
<org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler: void sendMessageToSubscribers(java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.resource.GzipResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.core.log.CompositeLog: void trace(java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void parseBeanDefinitions(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.ProducesRequestCondition: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.accept.ContentNegotiationManager)> ->_SINK_
<org.springframework.util.SimpleRouteMatcher: org.springframework.util.RouteMatcher$Route parseRoute(java.lang.String)> ->_SINK_
<org.springframework.test.jdbc.JdbcTestUtils: int countRowsInTable(org.springframework.jdbc.core.JdbcTemplate,java.lang.String)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: void registerExceptionHandlerAdvice(org.springframework.messaging.handler.MessagingAdviceBean,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver)> ->_SINK_
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.web.filter.reactive.HiddenHttpMethodFilter: reactor.core.publisher.Mono filter(org.springframework.web.server.ServerWebExchange,org.springframework.web.server.WebFilterChain)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder filter(org.springframework.web.reactive.function.server.HandlerFilterFunction)> ->_SINK_
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: java.sql.Connection getConnection(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition: int compareTo(org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.mock.http.client.reactive.MockClientHttpRequest: void setWriteHandler(java.util.function.Function)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctions: void lambda$toHttpHandler$0(org.springframework.web.reactive.function.server.HandlerStrategies,java.util.List)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctions: void lambda$toHttpHandler$1(org.springframework.web.reactive.function.server.HandlerStrategies,java.util.List)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField parseDaysOfMonth(java.lang.String)> ->_SINK_
<org.springframework.web.socket.client.WebSocketConnectionManager: org.springframework.web.socket.WebSocketHandler decorateWebSocketHandler(org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockPageContext: void handlePageException(java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource: java.lang.Object getValue(java.lang.String)> ->_SINK_
<org.springframework.core.env.CommandLineArgs: java.util.List getOptionValues(java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: java.time.Duration access$200(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message doSendAndReceive(java.lang.Object,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.util.Map,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.servlet.ModelAndView invokeHandlerMethod(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.mock.web.MockPageContext: void handlePageException(java.lang.Exception)> ->_SINK_
<org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider: org.springframework.jdbc.core.SqlParameter createDefaultOutParameter(java.lang.String,org.springframework.jdbc.core.metadata.CallParameterMetaData)> ->_SINK_
<org.springframework.format.datetime.joda.LocalDateParser: org.joda.time.LocalDate parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: org.springframework.jdbc.core.simple.SimpleJdbcCall returningResultSet(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor: java.lang.Object resolveConstructorArgument(java.lang.String,java.lang.Class,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.Object[] buildValueArray(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: void processMetaData(javax.sql.DataSource,java.util.List,java.lang.String[])> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(long,long)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponseBuilder: org.springframework.web.reactive.function.client.DefaultClientResponseBuilder cookie(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut: boolean matches(java.lang.reflect.Method,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int[] batchUpdate(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource[])> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeDTD(java.lang.String)> ->_SINK_
<org.springframework.asm.FieldWriter: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> ->_SINK_
<org.springframework.scheduling.support.CronSequenceGenerator: void <init>(java.lang.String,java.util.TimeZone)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,java.lang.Class)> ->_SINK_
<org.springframework.asm.ModuleWriter: void visitRequire(java.lang.String,int,java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec domain(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleCharacters(javax.xml.stream.events.Characters)> ->_SINK_
<org.springframework.jdbc.core.metadata.PostgresTableMetaDataProvider: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.List find(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder nest(org.springframework.web.reactive.function.server.RequestPredicate,java.util.function.Supplier)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeComment(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.web.socket.sockjs.client.XhrClientSockJsSession: void sendInternal(org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.util.xml.AbstractXMLEventReader: java.lang.Object getProperty(java.lang.String)> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: org.springframework.http.ResponseEntity postForEntity$default(org.springframework.web.client.RestOperations,java.lang.String,java.lang.Object,java.util.Map,int,java.lang.Object)> ->_SINK_
<org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext: void invokeBinderMethod(org.springframework.web.bind.support.WebExchangeDataBinder,org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod)> ->_SINK_
<org.springframework.web.servlet.function.ChangePathPatternParserVisitor: void changeParser(org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void handleTransportError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable)> ->_SINK_
<org.springframework.beans.factory.BeanCreationException: void printStackTrace(java.io.PrintStream)> ->_SINK_
<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation,org.apache.commons.logging.Log)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: short getShort(int)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void convertAndSend(javax.jms.Destination,java.lang.Object,org.springframework.jms.core.MessagePostProcessor)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.resource.EncodedResourceResolver: reactor.core.publisher.Mono resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(double)> ->_SINK_
<org.springframework.web.method.support.HandlerMethodArgumentResolverComposite: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void processHandlerMethodException(org.springframework.messaging.handler.HandlerMethod,java.lang.Exception,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: boolean isDirectlyPresent(java.lang.Class)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void <init>(java.util.Map,com.gargoylesoftware.htmlunit.WebClient,com.gargoylesoftware.htmlunit.WebRequest)> ->_SINK_
<org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory: org.springframework.format.Printer getPrinter(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.cache.jcache.interceptor.CacheResolverAdapter: java.util.Collection resolveCaches(org.springframework.cache.interceptor.CacheOperationInvocationContext)> ->_SINK_
<org.springframework.expression.spel.standard.Tokenizer: void pushHexIntToken(char[],boolean,int,int)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Destination,javax.jms.Message,int,int,long,javax.jms.CompletionListener)> ->_SINK_
<org.springframework.core.env.CommandLineArgs: void addOptionArg(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: java.util.List getInitBinderMethods(org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void printRequest(org.springframework.mock.web.MockHttpServletRequest)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(double)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: boolean isPresent(java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor,org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void handleMatch(java.lang.Object,java.lang.String,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: org.springframework.http.ResponseEntity exchange$default(org.springframework.web.client.RestOperations,java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Object[],int,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.view.UrlBasedViewResolver: boolean canHandle(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory: org.springframework.jdbc.core.PreparedStatementSetter newPreparedStatementSetter(java.lang.Object[])> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseDaysOfMonth(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.ParamsRequestCondition: org.springframework.web.servlet.mvc.condition.ParamsRequestCondition combine(org.springframework.web.servlet.mvc.condition.ParamsRequestCondition)> ->_SINK_
<org.springframework.web.reactive.result.condition.ConsumesRequestCondition: org.springframework.web.reactive.result.condition.ConsumesRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Queue,javax.jms.Message,int,int,long)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.context.annotation.ComponentScanBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: org.springframework.web.util.UriBuilderFactory access$100(org.springframework.web.reactive.function.client.DefaultWebClient)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: byte[] getBlobAsBytes(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.frame.DefaultSockJsFrameFormat: java.lang.String format(org.springframework.web.socket.sockjs.frame.SockJsFrame)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: boolean hasNonDefaultValue(java.lang.String)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder HEAD(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(int)> ->_SINK_
<org.springframework.web.servlet.function.PathResourceLookupFunction: void <init>(java.lang.String,org.springframework.core.io.Resource)> ->_SINK_
<org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler: reactor.core.publisher.Mono handleMatch(java.lang.Object,org.springframework.messaging.handler.HandlerMethod,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec dispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(org.springframework.jdbc.core.PreparedStatementCreator)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter: void onFullPongMessage(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.BufferedBinaryMessage)> ->_SINK_
<org.springframework.messaging.support.ChannelInterceptorAdapter: org.springframework.messaging.Message preSend(org.springframework.messaging.Message,org.springframework.messaging.MessageChannel)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleComment(javax.xml.stream.events.Comment)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.web.util.UriBuilderFactory access$100(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder remoteAddress(java.net.InetSocketAddress)> ->_SINK_
<org.springframework.format.datetime.standard.MonthDayFormatter: java.time.MonthDay parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.aop.aspectj.RuntimeTestWalker: boolean testThisInstanceOfResidue(java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureViewResolvers(org.springframework.web.servlet.config.'annotation'.ViewResolverRegistry)> ->_SINK_
<org.springframework.web.multipart.support.StandardServletMultipartResolver: void cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: void registerHandlerMethod(java.lang.Object,java.lang.reflect.Method,org.springframework.web.reactive.result.method.RequestMappingInfo)> ->_SINK_
<org.springframework.web.servlet.resource.PathResourceResolver: org.springframework.core.io.Resource resolveResourceInternal(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: boolean containsValue(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: org.springframework.web.reactive.HandlerResultHandler getResultHandler(org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: boolean isCaseSensitive(int)> ->_SINK_
<org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(org.springframework.format.'annotation'.NumberFormat,java.lang.Class)> ->_SINK_
<org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy: void upgrade(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,java.lang.String,java.util.List,java.security.Principal,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.asm.MethodWriter: org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int,org.springframework.asm.TypePath,java.lang.String,boolean)> ->_SINK_
<org.springframework.test.web.reactive.server.StatusAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.util.function.Consumer)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation: javax.cache.'annotation'.CacheInvocationParameter[] getAllParameters(java.lang.Object[])> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator: void subscribe(reactor.core.CoreSubscriber)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getColumnType(int)> ->_SINK_
<org.springframework.core.metrics.jfr.FlightRecorderStartupStep: org.springframework.core.metrics.StartupStep tag(java.lang.String,java.util.function.Supplier)> ->_SINK_
<org.springframework.scheduling.support.QuartzCronField: boolean isQuartzDaysOfMonthField(java.lang.String)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void jackson2JsonDecoder(org.springframework.core.codec.Decoder)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.test.web.reactive.server.WebTestClient mutateWith(org.springframework.test.web.reactive.server.WebTestClientConfigurer)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.context.annotation.BeanMethod: void validate(org.springframework.beans.factory.parsing.ProblemReporter)> ->_SINK_
<org.springframework.web.servlet.mvc.WebContentInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.jms.config.JcaListenerContainerParser: org.springframework.beans.MutablePropertyValues parseCommonContainerProperties(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitMultiANewArrayInsn(java.lang.String,int)> ->_SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int)> ->_SINK_
<org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.format.number.AbstractNumberFormatter: java.lang.Number parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.util.pattern.PathPatternRouteMatcher: org.springframework.util.RouteMatcher$Route parseRoute(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: long position(java.sql.Blob,long)> ->_SINK_
<org.springframework.web.reactive.result.condition.ProducesRequestCondition: org.springframework.web.reactive.result.condition.ProducesRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void handleMatch(org.springframework.web.servlet.mvc.method.RequestMappingInfo,java.lang.String,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: void setHandlerPredicate(java.util.function.Predicate)> ->_SINK_
<org.springframework.core.convert.support.ObjectToArrayConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.r2dbc.core.binding.MutableBindings: org.springframework.r2dbc.core.binding.BindMarker nextMarker(java.lang.String)> ->_SINK_
<org.springframework.web.client.RestTemplate: void delete(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.socket.config.annotation.SockJsServiceRegistration: org.springframework.web.socket.config.'annotation'.SockJsServiceRegistration setTransportHandlers(org.springframework.web.socket.sockjs.transport.TransportHandler[])> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod initExceptionHandlerMethod(org.springframework.messaging.handler.HandlerMethod,java.lang.Throwable)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object patchForObject(java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.jdbc.support.SQLExceptionSubclassTranslator: org.springframework.dao.DataAccessException doTranslate(java.lang.String,java.lang.String,java.sql.SQLException)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: java.util.concurrent.atomic.AtomicLong access$000(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.lang.Object[])> ->_SINK_
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.RequestPath modifyContextPath(java.lang.String)> ->_SINK_
<org.springframework.web.util.ServletContextPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String,javax.servlet.ServletContext,boolean)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getColumnDisplaySize(int)> ->_SINK_
<org.springframework.web.reactive.function.server.ToStringVisitor: void endNested(org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.reactive.result.view.UrlBasedViewResolver: reactor.core.publisher.Mono resolveViewName(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.jsf.DecoratingNavigationHandler: void handleNavigation(javax.faces.context.FacesContext,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.format.datetime.standard.YearMonthFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void jaxb2Decoder(org.springframework.core.codec.Decoder)> ->_SINK_
<org.springframework.util.ReflectionUtils: void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)> ->_SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: void <init>(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyDynamicElementReader: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PatternsRequestCondition: org.springframework.web.servlet.mvc.condition.PatternsRequestCondition combine(org.springframework.web.servlet.mvc.condition.PatternsRequestCondition)> ->_SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.io.Reader,int,org.springframework.jdbc.support.lob.LobHandler)> ->_SINK_
<org.springframework.context.annotation.ComponentScanAnnotationParser: java.util.Set parse(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.String)> ->_SINK_
<org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition: int compareTo(org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: java.lang.Object execute(javax.jms.Destination,org.springframework.jms.core.ProducerCallback)> ->_SINK_
<org.springframework.core.convert.support.IdToEntityConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec maxAge(java.lang.String,java.time.Duration)> ->_SINK_
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.lang.String,org.springframework.web.socket.WebSocketHttpHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler,java.lang.Object[])> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.util.MultiValueMap access$700(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleDtd(javax.xml.stream.events.DTD)> ->_SINK_
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: void lambda$handleMessageFromClient$0(org.springframework.web.socket.WebSocketSession,java.security.Principal)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.StatementCallback)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter: void beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder POST(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.method.annotation.ModelMethodProcessor: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.test.context.support.DynamicPropertiesContextCustomizerFactory: org.springframework.test.context.support.DynamicPropertiesContextCustomizer createContextCustomizer(java.lang.Class,java.util.List)> ->_SINK_
<org.springframework.util.xml.DomUtils: org.xml.sax.ContentHandler createContentHandler(org.w3c.dom.Node)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer: void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties,java.lang.String)> ->_SINK_
<org.springframework.format.datetime.standard.MonthFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper instantiateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)> ->_SINK_
<org.springframework.core.convert.support.StreamConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.method.support.InvocableHandlerMethod: java.lang.Object invokeForRequest(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.method.support.ModelAndViewContainer,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup: javax.sql.DataSource getDataSource(java.lang.String)> ->_SINK_
<org.springframework.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.util.xml.StaxEventHandler: void dtdInternal(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponse: java.lang.Object body(org.springframework.web.reactive.function.BodyExtractor)> ->_SINK_
<org.springframework.beans.PropertyBatchUpdateException: void printStackTrace(java.io.PrintStream)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamReader: javax.xml.namespace.QName getAttributeName(int)> ->_SINK_
<org.springframework.asm.MethodWriter: org.springframework.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> ->_SINK_
<org.springframework.web.method.annotation.ModelAttributeMethodProcessor: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.test.web.servlet.setup.PatternMappingFilterProxy: void <init>(javax.servlet.Filter,java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.socket.adapter.JettyWebSocketSession: boolean sendMessage(org.springframework.web.reactive.socket.WebSocketMessage)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: java.util.List getHandlerMethodsForMappingName(java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.StringToCharsetConverter: java.nio.charset.Charset convert(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.core.convert.support.IdToEntityConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: boolean isPresent(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PUT(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.format.datetime.joda.ReadablePartialPrinter: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: float getFloat(java.lang.String)> ->_SINK_
<org.springframework.format.datetime.standard.YearFormatter: java.time.Year parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.test.web.reactive.server.AbstractMockServerSpec: org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec webSessionManager(org.springframework.web.server.session.WebSessionManager)> ->_SINK_
<org.springframework.http.codec.multipart.MultipartParser: reactor.core.publisher.Flux parse(reactor.core.publisher.Flux,byte[],int)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture postForEntity(java.lang.String,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.web.reactive.config.WebFluxConfigurationSupport: org.springframework.web.reactive.result.method.'annotation'.ResponseEntityResultHandler responseEntityResultHandler(org.springframework.core.ReactiveAdapterRegistry,org.springframework.http.codec.ServerCodecConfigurer,org.springframework.web.reactive.accept.RequestedContentTypeResolver)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseMinutes(java.lang.String)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: void <init>(org.springframework.core.io.support.ResourcePatternResolver,org.springframework.jdbc.datasource.lookup.DataSourceLookup)> ->_SINK_
<org.springframework.core.annotation.PackagesAnnotationFilter: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: org.xml.sax.ContentHandler getContentHandler()> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression: int compareTo(org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression)> ->_SINK_
<org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession: void sendInternal(org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.format.support.FormattingConversionService: void addParser(org.springframework.format.Parser)> ->_SINK_
<org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor: void afterCompletion(org.springframework.web.context.request.WebRequest,java.lang.Exception)> ->_SINK_
<org.springframework.cglib.core.TypeUtils: java.lang.String emulateClassGetName(org.springframework.asm.Type)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.Object[])> ->_SINK_
<org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService: void handleTransportRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.expression.spel.CodeFlow: boolean isPrimitiveOrUnboxableSupportedNumberOrBoolean(java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.StringToUUIDConverter: java.util.UUID convert(java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.RdbmsOperation: void declareParameter(org.springframework.jdbc.core.SqlParameter)> ->_SINK_
<org.springframework.web.socket.adapter.jetty.JettyWebSocketSession: void sendBinaryMessage(org.springframework.web.socket.BinaryMessage)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.http.HttpHeaders access$600(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: void HEAD(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void send(java.lang.String,org.springframework.jms.core.MessageCreator)> ->_SINK_
<org.springframework.core.convert.support.CollectionToStringConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.server.handler.WebHandlerDecorator: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantFieldref(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int,int)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(char)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,java.lang.Class)> ->_SINK_
<org.springframework.format.datetime.joda.MonthDayFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.support.JdbcBeanDefinitionReader: void loadBeanDefinitions(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression: boolean match(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.util.Map execute(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.StandardWebSocketSession: reactor.core.publisher.Mono close(org.springframework.web.reactive.socket.CloseStatus)> ->_SINK_
<org.springframework.aop.framework.adapter.ThrowsAdviceAdapter: boolean supportsAdvice(org.aopalliance.aop.Advice)> ->_SINK_
<org.springframework.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,org.springframework.asm.Type,org.springframework.asm.Type[],java.lang.String)> ->_SINK_
<org.springframework.messaging.handler.annotation.reactive.DestinationVariableMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: reactor.core.publisher.Mono handleMessage(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.String getString(java.lang.String)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.Iterator iterate(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.test.web.ModelAndViewAssert: void assertViewName(org.springframework.web.servlet.ModelAndView,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.util.Properties parsePropsElement(org.w3c.dom.Element)> ->_SINK_
<org.springframework.context.support.ContextTypeMatchClassLoader: java.lang.Class loadClass(java.lang.String)> ->_SINK_
<org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner: void <init>(java.lang.ClassLoader,java.lang.String[])> ->_SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void setDatabaseProductName(java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.ZoneIdToTimeZoneConverter: java.util.TimeZone convert(java.time.ZoneId)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: void <init>(java.lang.String,org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition,org.springframework.web.servlet.mvc.condition.PatternsRequestCondition,org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition,org.springframework.web.servlet.mvc.condition.ParamsRequestCondition,org.springframework.web.servlet.mvc.condition.HeadersRequestCondition,org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition,org.springframework.web.servlet.mvc.condition.ProducesRequestCondition,org.springframework.web.servlet.mvc.condition.RequestConditionHolder,org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration,org.springframework.web.servlet.mvc.method.RequestMappingInfo$1)> ->_SINK_
<org.springframework.test.context.support.DynamicValuesPropertySource: java.lang.Object getProperty(java.lang.String)> ->_SINK_
<org.springframework.jmx.export.MBeanExporter: void setEnsureUniqueRuntimeObjectNames(boolean)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: org.springframework.messaging.Message sendAndReceive(java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: void <init>(java.io.InputStream,long)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.lang.Object merge(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.condition.HeadersRequestCondition: void <init>(java.lang.String[])> ->_SINK_
<org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.core.metadata.HsqlTableMetaDataProvider: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.util.Map,java.lang.Class)> ->_SINK_
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)> ->_SINK_
<org.springframework.core.convert.support.StringToUUIDConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: void replicate(java.lang.String,java.lang.Object,org.hibernate.ReplicationMode)> ->_SINK_
<org.springframework.web.cors.DefaultCorsProcessor: boolean handleInternal(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.cors.CorsConfiguration,boolean)> ->_SINK_
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void handleMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcResultHandlersDsl: void print(java.io.OutputStream)> ->_SINK_
<org.springframework.test.context.testng.AbstractTestNGSpringContextTests: void run(org.testng.IHookCallBack,org.testng.ITestResult)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: java.util.function.Consumer access$500(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(java.lang.String)> ->_SINK_
<org.springframework.web.cors.reactive.DefaultCorsProcessor: boolean handleInternal(org.springframework.web.server.ServerWebExchange,org.springframework.web.cors.CorsConfiguration,boolean)> ->_SINK_
<org.springframework.cglib.reflect.FastClassEmitter: void <init>(org.springframework.asm.ClassVisitor,java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.client.RestTemplate: void setUriTemplateHandler(org.springframework.web.util.UriTemplateHandler)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void addBeanMethod(org.springframework.context.'annotation'.BeanMethod)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: java.lang.Object buildPathExposingHandler(java.lang.Object,java.lang.String,java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession: void <init>(java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsServiceConfig,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: java.lang.Number executeAndReturnKey(java.util.Map)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMethodArgumentNotValidException(org.springframework.web.bind.MethodArgumentNotValidException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolErrorHandler: org.springframework.messaging.Message handleClientMessageProcessingError(org.springframework.messaging.Message,java.lang.Throwable)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.Object getProperty(java.lang.String)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$PathComponent,org.springframework.util.MultiValueMap,boolean)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver: void handleResolvedValue(java.lang.Object,java.lang.String,org.springframework.core.MethodParameter,org.springframework.ui.Model,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleMissingPathVariable(org.springframework.web.bind.MissingPathVariableException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getSchemaName(int)> ->_SINK_
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)> ->_SINK_
<org.springframework.web.reactive.result.view.ViewResolutionResultHandler: reactor.core.publisher.Mono renderWith(org.springframework.web.reactive.result.view.View,java.util.Map,org.springframework.http.MediaType,org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.BindingContext)> ->_SINK_
<org.springframework.core.type.classreading.MergedAnnotationReadingVisitor: void visit(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: void setNamespaceHandlerResolver(org.springframework.beans.factory.xml.NamespaceHandlerResolver)> ->_SINK_
<org.springframework.expression.spel.CodeFlow: java.lang.String toJvmDescriptor(java.lang.Class)> ->_SINK_
<org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor: void postHandle(org.springframework.web.context.request.WebRequest,org.springframework.ui.ModelMap)> ->_SINK_
<org.springframework.core.convert.support.StreamConverter: boolean matchesToStream(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.test.context.support.DynamicPropertiesContextCustomizer: void customizeContext(org.springframework.context.ConfigurableApplicationContext,org.springframework.test.context.MergedContextConfiguration)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerRequest: org.springframework.http.server.reactive.ServerHttpRequest access$200(org.springframework.web.reactive.function.server.DefaultServerRequest)> ->_SINK_
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder path(java.lang.String,java.util.function.Supplier)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Flux requestChannel(org.reactivestreams.Publisher)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: void <init>(org.springframework.web.reactive.result.method.'annotation'.ControllerMethodResolver,org.springframework.core.ReactiveAdapterRegistry)> ->_SINK_
<org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration: void <init>(java.lang.String[],org.springframework.web.socket.WebSocketHandler,org.springframework.scheduling.TaskScheduler)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.'annotation'.MergedAnnotation filterAttributes(java.util.function.Predicate)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.SseEmitter: void send(java.lang.Object,org.springframework.http.MediaType)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleMissingServletRequestPart(org.springframework.web.multipart.support.MissingServletRequestPartException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int getInt(java.lang.String)> ->_SINK_
<org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener: void executeSqlScripts(org.springframework.test.context.TestContext,org.springframework.test.context.jdbc.Sql$ExecutionPhase)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentType(java.lang.String)> ->_SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: java.lang.Object unwrap(java.lang.Class)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClient: org.springframework.test.web.reactive.server.WiretapConnector access$400(org.springframework.test.web.reactive.server.DefaultWebTestClient)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleHttpRequestMethodNotSupported(org.springframework.web.HttpRequestMethodNotSupportedException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.test.web.client.match.ContentRequestMatchers: org.springframework.test.web.client.RequestMatcher contentTypeCompatibleWith(java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: org.xml.sax.DTDHandler getDTDHandler()> ->_SINK_
<org.springframework.core.OverridingClassLoader: java.io.InputStream openStreamForClass(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: void lambda$handle$2(org.springframework.core.io.buffer.DataBuffer,int,reactor.core.publisher.SignalType)> ->_SINK_
<org.springframework.web.util.UriComponents: java.lang.String expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)> ->_SINK_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec patternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void initialize(org.springframework.web.servlet.mvc.method.'annotation'.ResponseBodyEmitter$Handler)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: void <init>(java.io.Reader,long)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List executeByNamedParam(java.util.Map)> ->_SINK_
<org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession: void <init>(java.lang.Object,java.lang.String,org.springframework.web.reactive.socket.HandshakeInfo,org.springframework.core.io.buffer.DataBufferFactory)> ->_SINK_
<org.springframework.web.reactive.result.SimpleHandlerAdapter: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_SINK_
<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite: org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite addHandler(org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class,java.util.function.Predicate,org.springframework.core.'annotation'.MergedAnnotationSelector)> ->_SINK_
<org.springframework.jdbc.object.RdbmsOperation: void setParameters(org.springframework.jdbc.core.SqlParameter[])> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder HEAD(org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Map asMap(java.util.function.Function,org.springframework.core.'annotation'.MergedAnnotation$Adapt[])> ->_SINK_
<org.springframework.web.reactive.result.condition.ParamsRequestCondition: org.springframework.web.reactive.result.condition.ParamsRequestCondition combine(org.springframework.web.reactive.result.condition.ParamsRequestCondition)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.util.List put(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.util.NumberUtils: java.lang.Number parseNumber(java.lang.String,java.lang.Class,java.text.NumberFormat)> ->_SINK_
<org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void printFlashMap(org.springframework.web.servlet.FlashMap)> ->_SINK_
<org.springframework.beans.PropertyDescriptorUtils: java.lang.Class findIndexedPropertyType(java.lang.String,java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Method)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo[] readPersistenceUnitInfos(java.lang.String)> ->_SINK_
<org.springframework.web.filter.reactive.ForwardedHeaderFilter: reactor.core.publisher.Mono filter(org.springframework.web.server.ServerWebExchange,org.springframework.web.server.WebFilterChain)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyDynamicElementReader: java.lang.Object super$1$invokeMethod(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration: org.springframework.messaging.simp.'annotation'.support.SimpAnnotationMethodMessageHandler createAnnotationMethodMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.simp.SimpMessagingTemplate)> ->_SINK_
<org.springframework.test.web.servlet.result.ContentResultMatchersDsl: void json$default(org.springframework.test.web.servlet.result.ContentResultMatchersDsl,java.lang.String,boolean,int,java.lang.Object)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void convertAndSend(java.lang.Object,java.lang.Object,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter: void onWebSocketFrame(org.eclipse.jetty.websocket.api.extensions.Frame)> ->_SINK_
<org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: reactor.core.publisher.Mono lambda$handle$2(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder fromMethodName(org.springframework.web.util.UriComponentsBuilder,java.lang.Class,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter: void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)> ->_SINK_
<org.springframework.test.context.support.MergedTestPropertySources: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: int doExecute(java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.SqlParameterValue: void <init>(org.springframework.jdbc.core.SqlParameter,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: org.springframework.dao.DataAccessException translateException(java.lang.String,java.lang.String,java.sql.SQLException)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler: void handleRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,org.springframework.web.socket.sockjs.transport.SockJsSession)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: void add(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.GenericConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.reactive.resource.WebJarsResourceResolver: reactor.core.publisher.Mono resolveResourceInternal(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleTypeMismatch(org.springframework.beans.TypeMismatchException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.resource.DefaultResourceResolverChain: java.lang.String resolveUrlPath(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.reactive.result.condition.PatternsRequestCondition: org.springframework.web.reactive.result.condition.PatternsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder OPTIONS(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.context.support.MessageSourceResourceBundle: java.lang.Object handleGetObject(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.SQLStateSQLExceptionTranslator: org.springframework.dao.DataAccessException doTranslate(java.lang.String,java.lang.String,java.sql.SQLException)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver: reactor.core.publisher.Mono getValuesToBind(org.springframework.web.bind.support.WebExchangeDataBinder,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.HttpHeaders headForHeaders(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.context.request.WebRequestInterceptor)> ->_SINK_
<org.springframework.jdbc.support.JdbcAccessor: void setDatabaseProductName(java.lang.String)> ->_SINK_
<org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener: void lambda$executeSqlScripts$0(org.springframework.test.context.jdbc.Sql$ExecutionPhase,org.springframework.test.context.TestContext,boolean,org.springframework.test.context.jdbc.Sql)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class,java.util.function.Predicate)> ->_SINK_
<org.springframework.jms.config.AbstractListenerContainerParser: void parseListenerConfiguration(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.MutablePropertyValues)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: org.springframework.jdbc.support.KeyHolder doExecuteAndReturnKeyHolder(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.web.servlet.function.ChangePathPatternParserVisitor: void 'unknown'(org.springframework.web.servlet.function.RouterFunction)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(int)> ->_SINK_
<org.springframework.web.socket.handler.WebSocketSessionDecorator: void close(org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitIntInsn(int,int)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctions: org.springframework.web.reactive.function.server.RouterFunction changeParser(org.springframework.web.reactive.function.server.RouterFunction,org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcResultHandlersDsl: void print(java.io.Writer)> ->_SINK_
<org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponseBuilder: org.springframework.web.reactive.function.client.ClientResponse$Builder body(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.HeadersRequestCondition: org.springframework.web.servlet.mvc.condition.HeadersRequestCondition combine(org.springframework.web.servlet.mvc.condition.HeadersRequestCondition)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: reactor.core.publisher.Mono lambda$handleResult$5(org.springframework.web.reactive.HandlerResult,org.springframework.web.server.ServerWebExchange,java.lang.Throwable)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitTypeInsn(int,java.lang.String)> ->_SINK_
<org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy: void upgradeInternal(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,java.lang.String,java.util.List,javax.websocket.Endpoint)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClientBuilder: org.springframework.r2dbc.core.DatabaseClient$Builder apply(java.util.function.Consumer)> ->_SINK_
<org.springframework.web.reactive.result.condition.ProducesRequestCondition: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.context.config.PropertyOverrideBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport: void init(javax.websocket.EndpointConfig)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantDynamic(java.lang.String,java.lang.String,org.springframework.asm.Handle,java.lang.Object[])> ->_SINK_
<org.springframework.core.convert.support.ArrayToArrayConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$Match getHandlerMethod(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(java.lang.String)> ->_SINK_
<org.springframework.jdbc.datasource.init.ScriptParseException: void <init>(java.lang.String,org.springframework.core.io.support.EncodedResource)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.AbstractNamedValueSyncArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(long,java.util.Map)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: java.util.stream.Stream stream(java.lang.Class)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])> ->_SINK_
<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite: org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite addHandlers(java.util.List)> ->_SINK_
<org.springframework.web.reactive.function.server.RequestPredicates: org.springframework.web.reactive.function.server.RequestPredicate lambda$pathPredicates$1(org.springframework.web.util.pattern.PathPatternParser,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.stream.Stream queryForStream(java.lang.String,org.springframework.jdbc.core.RowMapper,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getCatalogName(int)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueEquals(java.lang.String,long)> ->_SINK_
<org.springframework.core.env.ProfilesParser: org.springframework.core.env.Profiles parse(java.lang.String[])> ->_SINK_
<org.springframework.jms.config.JmsListenerEndpointRegistrar: void setMessageHandlerMethodFactory(org.springframework.messaging.handler.'annotation'.support.MessageHandlerMethodFactory)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object,java.util.Map,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: java.io.Writer setCharacterStream(long)> ->_SINK_
<org.springframework.util.xml.StaxEventHandler: void commentInternal(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(int,java.util.Map)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: org.springframework.web.method.HandlerMethod handleNoMatch(java.util.Set,java.lang.String,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.servlet.function.ChangePathPatternParserVisitor: void <init>(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.beans.DirectFieldAccessor: org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler getLocalPropertyHandler(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.PreparedStatementSetter)> ->_SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,int)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.web.reactive.resource.VersionResourceResolver: reactor.core.publisher.Mono resolveResourceInternal(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: void putAll(java.util.Map)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.config.ResourcesBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: void handleNoMatch(org.springframework.util.RouteMatcher$Route,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.function.SseServerResponse: org.springframework.web.servlet.ModelAndView writeToInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_SINK_
<org.springframework.mock.jndi.SimpleNamingContext: javax.naming.NameParser getNameParser(javax.naming.Name)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.lang.Object get(java.lang.String,java.io.Serializable,org.hibernate.LockMode)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketStrategies(java.util.function.Consumer)> ->_SINK_
<org.springframework.jdbc.core.SingleColumnRowMapper: java.lang.Object convertValueToRequiredType(java.lang.Object,java.lang.Class)> ->_SINK_
<org.springframework.context.index.processor.SortedProperties: void store(java.io.OutputStream,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: org.springframework.core.'annotation'.MergedAnnotation[] getAnnotationArray(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration: void addSockJsServiceMapping(org.springframework.util.MultiValueMap,org.springframework.web.socket.sockjs.SockJsService,org.springframework.web.socket.WebSocketHandler,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder DELETE(java.lang.String,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.context.annotation.ScopedProxyCreator: java.lang.String getTargetBeanName(java.lang.String)> ->_SINK_
<org.springframework.core.log.CompositeLog: void error(java.lang.Object)> ->_SINK_
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void runChild(java.lang.Object,org.junit.runner.notification.RunNotifier)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void lambda$detectHandlerMethods$1(java.lang.Object,java.lang.reflect.Method,java.lang.Object)> ->_SINK_
<org.springframework.format.number.money.CurrencyUnitFormatter: javax.money.CurrencyUnit parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler: boolean isHandlerSessionAttribute(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.r2dbc.core.NamedParameterExpander: org.springframework.r2dbc.core.ParsedSql getParsedSql(java.lang.String)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo[] readPersistenceUnitInfos(java.lang.String[])> ->_SINK_
<org.springframework.mock.web.MockHttpServletRequest: long getDateHeader(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder method(org.springframework.http.HttpMethod)> ->_SINK_
<org.springframework.web.reactive.result.condition.PatternsRequestCondition: org.springframework.web.reactive.result.condition.PatternsRequestCondition combine(org.springframework.web.reactive.result.condition.PatternsRequestCondition)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PATCH(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.format.datetime.joda.MillisecondInstantPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void send(java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: java.util.Optional getValue(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession: void <init>(java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsServiceConfig,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.web.server.adapter.WebHttpHandlerBuilder: org.springframework.web.server.adapter.WebHttpHandlerBuilder exceptionHandler(org.springframework.web.server.WebExceptionHandler[])> ->_SINK_
<org.springframework.util.xml.XMLEventStreamReader: java.lang.String getAttributeType(int)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultInterceptorChain: void applyPreProcess(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: org.springframework.dao.DataAccessException doTranslate(java.lang.String,java.lang.String,java.sql.SQLException)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: org.springframework.web.method.HandlerMethod getHandlerInternal(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.context.config.PropertyPlaceholderBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl head$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseMonth(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.util.List query(org.springframework.jdbc.core.JdbcOperations,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(long)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.lang.Object query(org.springframework.jdbc.core.JdbcOperations,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: org.springframework.jdbc.core.simple.SimpleJdbcCall declareParameters(org.springframework.jdbc.core.SqlParameter[])> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture put(java.lang.String,org.springframework.http.HttpEntity,java.lang.Object[])> ->_SINK_
<org.springframework.util.MimeTypeUtils: java.util.List parseMimeTypes(java.lang.String)> ->_SINK_
<org.springframework.test.context.event.ApplicationEventsApplicationListener: void onApplicationEvent(org.springframework.context.ApplicationEvent)> ->_SINK_
<org.springframework.messaging.simp.stomp.DefaultStompSession: void invokeHandler(org.springframework.messaging.simp.stomp.StompFrameHandler,org.springframework.messaging.Message,org.springframework.messaging.simp.stomp.StompHeaders)> ->_SINK_
<org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistry: org.springframework.jdbc.support.SQLExceptionTranslator findTranslatorForDatabase(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.web.multipart.MultipartFileResource: void <init>(org.springframework.web.multipart.MultipartFile)> ->_SINK_
<org.springframework.web.server.handler.ExceptionHandlingWebHandler: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseTemplate(java.lang.String,org.springframework.expression.ParserContext)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(java.lang.String)> ->_SINK_
<org.springframework.messaging.simp.user.UserDestinationMessageHandler: void handleMessage(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: void <init>(byte[])> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(char)> ->_SINK_
<org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.messaging.tcp.TcpConnectionHandler,org.springframework.messaging.tcp.ReconnectStrategy)> ->_SINK_
<org.springframework.format.number.AbstractNumberFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.config.ResourceHandlerRegistry: org.springframework.web.reactive.config.ResourceHandlerRegistration addResourceHandler(java.lang.String[])> ->_SINK_
<org.springframework.http.server.DefaultRequestPath: void <init>(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler: void storeAttributes(org.springframework.web.server.WebSession,java.util.Map)> ->_SINK_
<org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractXhrTransport: void executeSendRequest(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitLabel(org.springframework.asm.Label)> ->_SINK_
<org.springframework.web.client.ExtractingResponseErrorHandler: void handleError(org.springframework.http.client.ClientHttpResponse,org.springframework.http.HttpStatus)> ->_SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.core.convert.support.ByteBufferConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer: void shutdown(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.config.DelegatingWebFluxConfiguration: void configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)> ->_SINK_
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(char[])> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolErrorHandler: org.springframework.messaging.Message handleErrorMessageToClient(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: org.springframework.web.cors.CorsConfiguration initCorsConfiguration(java.lang.Object,java.lang.reflect.Method,org.springframework.web.reactive.result.method.RequestMappingInfo)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void jackson2JsonEncoder(org.springframework.core.codec.Encoder)> ->_SINK_
<org.springframework.cglib.core.ReflectUtils: java.lang.reflect.Constructor findConstructor(java.lang.String,java.lang.ClassLoader)> ->_SINK_
<org.springframework.web.socket.client.jetty.JettyWebSocketClient: org.springframework.util.concurrent.ListenableFuture doHandshake(org.springframework.web.socket.WebSocketHandler,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.context.event.ApplicationListenerMethodAdapter: void processEvent(org.springframework.context.ApplicationEvent)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockHttpServletRequest: long getDateHeader(java.lang.String)> ->_SINK_
<org.springframework.jca.cci.core.CciTemplate: java.lang.Object execute(org.springframework.jca.cci.core.InteractionCallback)> ->_SINK_
<org.springframework.web.context.request.async.CallableInterceptorChain: java.lang.Object triggerAfterError(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Throwable)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClassParser: void parse(java.lang.Class,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.InvocableHandlerMethod: boolean isResponseHandled(java.lang.Object[],org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec placeholderValue(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.List findByExample(java.lang.String,java.lang.Object,int,int)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void parseCollectionElements(org.w3c.dom.NodeList,java.util.Collection,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.StringToCharsetConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerRequest: reactor.core.publisher.Mono checkNotModified(org.springframework.web.server.ServerWebExchange,java.time.Instant,java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec string(java.util.function.Consumer)> ->_SINK_
<org.springframework.web.servlet.handler.PathPatternMatchableHandlerMapping: org.springframework.web.servlet.handler.RequestMatchResult match(javax.servlet.http.HttpServletRequest,java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int,int,java.util.Map)> ->_SINK_
<org.springframework.web.method.annotation.ModelFactory: void initModel(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitLookupSwitchInsn(org.springframework.asm.Label,int[],org.springframework.asm.Label[])> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.Map queryForMap(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: double getDouble(java.lang.String)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.scheduling.support.QuartzCronField: java.time.temporal.Temporal nextOrSame(java.time.temporal.Temporal)> ->_SINK_
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> ->_SINK_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec defaultRequest(org.springframework.test.web.servlet.RequestBuilder)> ->_SINK_
<org.springframework.asm.AnnotationWriter: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> ->_SINK_
<org.springframework.test.jdbc.JdbcTestUtils: int countRowsInTableWhere(org.springframework.jdbc.core.JdbcTemplate,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry: org.springframework.web.socket.config.'annotation'.WebMvcStompEndpointRegistry setErrorHandler(org.springframework.web.socket.messaging.StompSubProtocolErrorHandler)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.web.method.annotation.MapMethodProcessor: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.http.server.reactive.ServletHttpHandlerAdapter: void access$100(javax.servlet.AsyncContext,java.util.concurrent.atomic.AtomicBoolean,java.lang.Runnable)> ->_SINK_
<org.springframework.core.convert.support.StreamConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantString(java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultMockServerSpec: void <init>(org.springframework.web.server.WebHandler)> ->_SINK_
<org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder path(java.lang.String,java.util.function.Consumer)> ->_SINK_
<org.springframework.test.web.ModelAndViewAssert: void assertCompareListModelAttribute(org.springframework.web.servlet.ModelAndView,java.lang.String,java.util.List)> ->_SINK_
<org.springframework.core.annotation.AnnotationUtils: void handleIntrospectionFailure(java.lang.reflect.AnnotatedElement,java.lang.Throwable)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: void setUriTemplateHandler(org.springframework.web.util.UriTemplateHandler)> ->_SINK_
<org.springframework.web.reactive.resource.DefaultResourceTransformerChain: reactor.core.publisher.Mono transform(org.springframework.web.server.ServerWebExchange,org.springframework.core.io.Resource)> ->_SINK_
<org.springframework.util.xml.StaxResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: java.lang.String catalogNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.resource.ResourceTransformerSupport: java.lang.String resolveUrlPath(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource,org.springframework.web.servlet.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.messaging.simp.config.StompBrokerRelayRegistration: org.springframework.messaging.simp.config.StompBrokerRelayRegistration setSystemHeartbeatSendInterval(long)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.web.reactive.function.server.PathResourceLookupFunction: reactor.core.publisher.Mono apply(org.springframework.web.reactive.function.server.ServerRequest)> ->_SINK_
<org.springframework.util.concurrent.DelegatingCompletableFuture: boolean cancel(boolean)> ->_SINK_
<org.springframework.web.reactive.config.WebFluxConfigurationSupport: org.springframework.web.reactive.result.method.'annotation'.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.reactive.accept.RequestedContentTypeResolver)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: reactor.core.publisher.Mono connect(io.rsocket.transport.ClientTransport)> ->_SINK_
<org.springframework.beans.factory.support.ConstructorResolver: java.lang.Object instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ->_SINK_
<org.springframework.web.method.annotation.RequestParamMethodArgumentResolver: void contributeMethodArgument(org.springframework.core.MethodParameter,java.lang.Object,org.springframework.web.util.UriComponentsBuilder,java.util.Map,org.springframework.core.convert.ConversionService)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec customReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler[])> ->_SINK_
<org.springframework.jdbc.object.StoredProcedure: void declareParameter(org.springframework.jdbc.core.SqlParameter)> ->_SINK_
<org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor: void 'unknown'(org.springframework.web.reactive.function.server.RouterFunction)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader: void loadBeanDefinitions(java.util.Set)> ->_SINK_
<org.springframework.web.servlet.function.ResourceHandlerFunction: org.springframework.web.servlet.function.ServerResponse handle(org.springframework.web.servlet.function.ServerRequest)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: int getRequiredIntParameter(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: void setErrorHandler(org.springframework.web.socket.messaging.StompSubProtocolErrorHandler)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(float)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(double)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEqualTo(boolean)> ->_SINK_
<org.springframework.mail.javamail.JavaMailSenderImpl: void send(javax.mail.internet.MimeMessage)> ->_SINK_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: org.springframework.jdbc.core.SqlParameter createReturnResultSetParameter(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.reactive.config.WebFluxConfigurationSupport: void addResourceHandlers(org.springframework.web.reactive.config.ResourceHandlerRegistry)> ->_SINK_
<org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator: boolean send(org.springframework.messaging.Message,long)> ->_SINK_
<org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService: reactor.core.publisher.Mono handleRequest(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: int[] buildSqlTypeArray(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.test.web.servlet.result.HandlerResultMatchers: org.springframework.web.method.HandlerMethod getHandlerMethod(org.springframework.test.web.servlet.MvcResult)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setPatternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: reactor.core.publisher.Mono lambda$handle$1(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry: org.springframework.web.servlet.config.'annotation'.ResourceHandlerRegistration addResourceHandler(java.lang.String[])> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: boolean getBoolean(java.lang.String)> ->_SINK_
<org.springframework.r2dbc.connection.init.ScriptUtils: reactor.core.publisher.Mono executeSqlScript(io.r2dbc.spi.Connection,org.springframework.core.io.support.EncodedResource,org.springframework.core.io.buffer.DataBufferFactory,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder apply(java.util.function.Consumer)> ->_SINK_
<org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getIntLiteral(java.lang.String,int,int,int)> ->_SINK_
<org.springframework.cache.interceptor.CacheOperationSourcePointcut: boolean matches(java.lang.reflect.Method,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.core.type.classreading.SimpleMethodMetadata: void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.springframework.core.'annotation'.MergedAnnotations)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMethodArgumentResolver: java.lang.Object resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.cglib.core.DuplicatesPredicate: void <init>(java.util.List)> ->_SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: java.util.Map matchInParameterValuesWithCallParameters(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(char[])> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession: void <init>(java.lang.Object,java.lang.String,org.springframework.web.reactive.socket.HandshakeInfo,org.springframework.core.io.buffer.DataBufferFactory,reactor.core.publisher.Sinks$Empty)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: void putAll(java.util.Map)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void onClose(javax.websocket.Session,javax.websocket.CloseReason)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter: boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.web.method.annotation.ModelAttributeMethodProcessor: java.lang.Object createAttribute(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.bind.support.WebDataBinderFactory,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.gradle.cli.CommandLineParser: org.gradle.cli.ParsedCommandLine parse(java.lang.Iterable)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void endEntity(java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler: boolean doHandshake(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.cache.interceptor.CacheOperationExpressionEvaluator: java.lang.Object key(java.lang.String,org.springframework.context.expression.AnnotatedElementKey,org.springframework.expression.EvaluationContext)> ->_SINK_
<org.springframework.beans.AbstractNestablePropertyAccessor: boolean isWritableProperty(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.lang.String,org.springframework.jdbc.support.lob.LobHandler)> ->_SINK_
<org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration: void addSockJsServiceMapping(java.lang.Object,org.springframework.web.socket.sockjs.SockJsService,org.springframework.web.socket.WebSocketHandler,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.EnumToIntegerConverter: java.lang.Integer convert(java.lang.Enum)> ->_SINK_
<org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite: org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite addResolvers(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver[])> ->_SINK_
<org.springframework.asm.ModuleWriter: void visitOpen(java.lang.String,int,java.lang.String[])> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(int)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.expression.spel.standard.SpelExpressionParser: org.springframework.expression.spel.standard.SpelExpression parseRaw(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.UndertowServerHttpResponse: reactor.core.publisher.Mono writeWith(java.nio.file.Path,long,long)> ->_SINK_
<org.springframework.messaging.rsocket.MetadataEncoder: org.springframework.messaging.rsocket.MetadataEncoder route(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: boolean hasValue(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.client.UndertowWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver: java.lang.Object resolveNamedValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: long getRequiredLongParameter(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Map asMap(org.springframework.core.'annotation'.MergedAnnotation$Adapt[])> ->_SINK_
<org.gradle.cli.AbstractCommandLineConverter: java.lang.Object convert(java.lang.Iterable,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: java.io.OutputStream setBinaryStream(long)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMediaTypeNotSupported(org.springframework.web.HttpMediaTypeNotSupportedException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.messaging.SessionDisconnectEvent: void <init>(java.lang.Object,org.springframework.messaging.Message,java.lang.String,org.springframework.web.socket.CloseStatus,java.security.Principal)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(java.lang.Class,org.springframework.jdbc.support.xml.XmlResultProvider)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_SINK_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.String put(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void println(long)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void characters(char[],int,int)> ->_SINK_
<org.springframework.cache.interceptor.SimpleCacheErrorHandler: void handleCacheGetError(java.lang.RuntimeException,org.springframework.cache.Cache,java.lang.Object)> ->_SINK_
<org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler: reactor.core.publisher.Mono handleMatch(org.springframework.messaging.handler.CompositeMessageCondition,org.springframework.messaging.handler.HandlerMethod,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.socket.server.standard.ServerEndpointRegistration: void modifyHandshake(javax.websocket.server.ServerEndpointConfig,javax.websocket.server.HandshakeRequest,javax.websocket.HandshakeResponse)> ->_SINK_
<org.springframework.context.config.LoadTimeWeaverBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils: java.util.Map extractCaseInsensitiveParameterNames(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.scheduling.support.CronTrigger: void <init>(java.lang.String,java.time.ZoneId)> ->_SINK_
<org.springframework.jndi.JndiTemplate: void bind(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.format.datetime.joda.ReadableInstantPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.util.List buildSqlParameterList(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.aop.config.AspectJAutoProxyBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler: void handleMessageInternal(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: org.springframework.web.method.HandlerMethod handleNoMatch(java.util.Set,java.lang.String,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.servlet.DispatcherServlet: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.method.annotation.InitBinderDataBinderFactory: void initBinder(org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEqualTo(java.lang.Double)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponseBuilder: org.springframework.web.reactive.function.client.ClientResponse$Builder header(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture headForHeaders(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.util.StringUtils: java.util.Locale parseLocale(java.lang.String)> ->_SINK_
<org.springframework.cache.interceptor.CacheOperationExpressionEvaluator: boolean condition(java.lang.String,org.springframework.context.expression.AnnotatedElementKey,org.springframework.expression.EvaluationContext)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void cDataInternal(java.lang.String)> ->_SINK_
<org.springframework.web.accept.AbstractMappingContentNegotiationStrategy: java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.aop.interceptor.AsyncExecutionAspectSupport: void setExceptionHandler(org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)> ->_SINK_
<org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser: void access$500(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression: int compareTo(org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void skippedEntity(java.lang.String)> ->_SINK_
<org.springframework.scheduling.support.TaskUtils: org.springframework.scheduling.support.DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(java.lang.Runnable,org.springframework.util.ErrorHandler,boolean)> ->_SINK_
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.'annotation'.InterceptorRegistration addWebRequestInterceptor(org.springframework.web.context.request.WebRequestInterceptor)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void registerHandlerMethod(java.lang.Object,java.lang.reflect.Method,org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: java.util.List getModelAttributeMethods(org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: org.springframework.web.method.HandlerMethod getHandlerInternal(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping: void handleMatch(java.lang.Object,org.springframework.web.method.HandlerMethod,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: org.springframework.jdbc.core.SqlParameter createDefaultInOutParameter(java.lang.String,org.springframework.jdbc.core.metadata.CallParameterMetaData)> ->_SINK_
<org.springframework.jdbc.object.SqlFunction: int run(java.lang.Object[])> ->_SINK_
<org.springframework.aop.TrueClassFilter: boolean matches(java.lang.Class)> ->_SINK_
<org.springframework.context.support.ApplicationListenerDetector: void postProcessBeforeDestruction(java.lang.Object,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.'annotation'.MergedAnnotation[] getAnnotationArray(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void printHandler(java.lang.Object,org.springframework.web.servlet.HandlerInterceptor[])> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter: reactor.core.publisher.Mono lambda$handle$0(org.springframework.web.method.HandlerMethod,org.springframework.web.reactive.result.method.'annotation'.InitBinderBindingContext,org.springframework.web.server.ServerWebExchange,java.lang.Throwable)> ->_SINK_
<org.springframework.format.datetime.DateFormatter: java.util.Date parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message sendAndReceive(java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.method.RequestMappingInfo combine(org.springframework.web.servlet.mvc.method.RequestMappingInfo)> ->_SINK_
<org.springframework.format.datetime.joda.MillisecondInstantPrinter: java.lang.String print(java.lang.Long,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler: void cleanupAttributes(org.springframework.web.server.WebSession)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: java.lang.Object getAttributeValue(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.ColumnMapRowMapper: java.util.Map mapRow(java.sql.ResultSet,int)> ->_SINK_
<org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.jms.listener.AbstractMessageListenerContainer: void setErrorHandler(org.springframework.util.ErrorHandler)> ->_SINK_
<org.springframework.core.task.support.ExecutorServiceAdapter: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder locale(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: org.springframework.web.reactive.function.client.WebClient$Builder defaultHeader(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.context.annotation.ProfileCondition: boolean matches(org.springframework.context.'annotation'.ConditionContext,org.springframework.core.type.AnnotatedTypeMetadata)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.Enum getEnum(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleException(java.lang.Exception,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClientBuilder: org.springframework.r2dbc.core.DatabaseClient$Builder bindMarkers(org.springframework.r2dbc.core.binding.BindMarkersFactory)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo: void init(java.lang.ClassLoader)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: org.springframework.web.reactive.function.client.WebClient$Builder exchangeStrategies(org.springframework.web.reactive.function.client.ExchangeStrategies)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void convertAndSend(java.lang.Object,org.springframework.jms.core.MessagePostProcessor)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: boolean isWrapperFor(java.lang.Class)> ->_SINK_
<org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter: void handleException(org.springframework.messaging.simp.stomp.StompSession,org.springframework.messaging.simp.stomp.StompCommand,org.springframework.messaging.simp.stomp.StompHeaders,byte[],java.lang.Throwable)> ->_SINK_
<org.springframework.scheduling.support.QuartzCronField: java.time.DayOfWeek parseDayOfWeek(java.lang.String)> ->_SINK_
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.SpelExpression doParseExpression(java.lang.String,org.springframework.expression.ParserContext)> ->_SINK_
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: void connect(org.springframework.web.socket.WebSocketHandler,org.springframework.util.concurrent.SettableListenableFuture)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField lambda$parseDaysOfMonth$0(java.lang.String,org.springframework.scheduling.support.CronField$Type)> ->_SINK_
<org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClient: reactor.core.publisher.Flux inConnectionMany(java.util.function.Function)> ->_SINK_
<org.springframework.format.datetime.joda.MonthDayFormatter: org.joda.time.MonthDay parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeCData(java.lang.String)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void handlePongMessage(javax.websocket.Session,java.nio.ByteBuffer)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void send(javax.jms.Destination,org.springframework.jms.core.MessageCreator)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder path(java.lang.String,java.util.function.Consumer)> ->_SINK_
<org.springframework.context.event.SimpleApplicationEventMulticaster: void multicastEvent(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType)> ->_SINK_
<org.springframework.core.convert.support.FallbackObjectToStringConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.beans.factory.support.ConstructorResolver: java.lang.reflect.Method[] getCandidateMethods(java.lang.Class,org.springframework.beans.factory.support.RootBeanDefinition)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.SingleDataSourceLookup: javax.sql.DataSource getDataSource(java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.Enum[] getEnumArray(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry: org.springframework.web.socket.config.'annotation'.WebSocketHandlerRegistration addHandler(org.springframework.web.socket.WebSocketHandler,java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: org.springframework.web.reactive.result.method.InvocableHandlerMethod getExceptionHandlerMethod(java.lang.Throwable,org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void startEntity(java.lang.String)> ->_SINK_
<org.springframework.expression.spel.standard.SpelExpressionParser: org.springframework.expression.spel.standard.SpelExpression doParseExpression(java.lang.String,org.springframework.expression.ParserContext)> ->_SINK_
<org.springframework.core.log.CompositeLog: void trace(java.lang.Object,java.lang.Throwable)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int[][] batchUpdate(java.lang.String,java.util.Collection,int,org.springframework.jdbc.core.ParameterizedPreparedStatementSetter)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.core.convert.support.StringToBooleanConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.core.env.SystemEnvironmentPropertySource: java.lang.String checkPropertyName(java.lang.String)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(boolean)> ->_SINK_
<org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter: org.springframework.web.reactive.HandlerResult lambda$handle$0(org.springframework.web.reactive.function.server.HandlerFunction,org.springframework.web.reactive.function.server.ServerResponse)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int updateByNamedParam(java.util.Map,org.springframework.jdbc.support.KeyHolder)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver: java.lang.Object resolveNamedValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.web.servlet.TestDispatcherServlet: org.springframework.web.servlet.HandlerExecutionChain getHandler(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String,java.util.function.Consumer)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec values(java.lang.String,java.util.function.Consumer)> ->_SINK_
<org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration: void registerWebSocketHandlers(org.springframework.web.socket.config.'annotation'.WebSocketHandlerRegistry)> ->_SINK_
<org.springframework.format.datetime.standard.MonthFormatter: java.time.Month parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long)> ->_SINK_
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateFindProxy(org.springframework.cglib.core.ClassEmitter,java.util.Map)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture headForHeaders(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getTableName(int)> ->_SINK_
<org.springframework.r2dbc.connection.R2dbcTransactionManager: reactor.core.publisher.Mono lambda$null$3(org.springframework.r2dbc.connection.R2dbcTransactionManager$ConnectionFactoryTransactionObject,io.r2dbc.spi.Connection,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.metadata.CallMetaDataContext: java.util.Map matchInParameterValuesWithCallParameters(java.lang.Object[])> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeCharacters(java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession: void afterTransportClosed(org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.core.env.SimpleCommandLinePropertySource: void <init>(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.web.servlet.resource.VersionResourceResolver: org.springframework.web.servlet.resource.VersionResourceResolver addVersionStrategy(org.springframework.web.servlet.resource.VersionStrategy,java.lang.String[])> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: boolean containsKey(java.lang.Object)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void doSend(javax.jms.Session,javax.jms.Destination,org.springframework.jms.core.MessageCreator)> ->_SINK_
<org.springframework.context.event.SimpleApplicationEventMulticaster: void setErrorHandler(org.springframework.util.ErrorHandler)> ->_SINK_
<org.springframework.aop.config.ConfigBeanDefinitionParser: void parseAdvisor(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter: void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder GET(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Message,javax.jms.CompletionListener)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.util.List queryForList(org.springframework.jdbc.core.JdbcOperations,java.lang.String,java.lang.Object[],int[])> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: void parseMappingFiles(org.w3c.dom.Element,org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClient: void <init>(org.springframework.web.reactive.function.client.ExchangeFunction,org.springframework.web.util.UriBuilderFactory,org.springframework.http.HttpHeaders,org.springframework.util.MultiValueMap,java.util.function.Consumer,org.springframework.web.reactive.function.client.DefaultWebClientBuilder)> ->_SINK_
<org.springframework.web.reactive.resource.CssLinkResourceTransformer: reactor.core.publisher.Mono transformContent(java.lang.String,org.springframework.core.io.Resource,org.springframework.web.reactive.resource.ResourceTransformerChain,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.scheduling.commonj.TimerManagerTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver: java.util.List exceptionHandlerResolvers(org.springframework.web.reactive.result.method.'annotation'.ArgumentResolverConfigurer,org.springframework.core.ReactiveAdapterRegistry,org.springframework.context.ConfigurableApplicationContext)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void POST(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String replacePlaceholders(java.lang.String,java.util.Properties)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: org.springframework.messaging.handler.HandlerMethod createHandlerMethod(java.lang.Object,java.lang.reflect.Method)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.ContextWebSocketHandler: reactor.core.publisher.Mono handle(org.springframework.web.reactive.socket.WebSocketSession)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseDaysOfWeek(java.lang.String)> ->_SINK_
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeCustomInitMethod(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)> ->_SINK_
<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int compare(org.springframework.aop.Advisor,org.springframework.aop.Advisor)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: void <init>(org.springframework.web.reactive.function.client.DefaultWebClientBuilder)> ->_SINK_
<org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider: java.lang.String parameterNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.socket.config.WebSocketMessageBrokerStats: void setSubProtocolWebSocketHandler(org.springframework.web.socket.messaging.SubProtocolWebSocketHandler)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: org.springframework.web.servlet.mvc.method.RequestMappingInfo addCustomCondition(org.springframework.web.servlet.mvc.condition.RequestCondition)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void startPrefixMapping(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void send(java.lang.Object,org.springframework.http.MediaType)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext: void <init>(org.springframework.web.bind.support.WebBindingInitializer,java.util.List)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: org.springframework.test.web.reactive.server.WebTestClient$Builder defaultCookie(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.r2dbc.core.binding.NamedBindMarkers: org.springframework.r2dbc.core.binding.BindMarker next(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource: java.lang.String getTypeName(java.lang.String)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity getForEntity(java.lang.String,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String parseSqlStatementIntoString(java.lang.String)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: reactor.core.publisher.Mono connectWebSocket(java.net.URI)> ->_SINK_
<org.springframework.asm.SymbolTable: int addType(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.reactive.result.condition.CompositeRequestCondition: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Flux requestStream(io.rsocket.Payload)> ->_SINK_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder addMappedInterceptors(java.lang.String[],org.springframework.web.servlet.HandlerInterceptor[])> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: int setBytes(long,byte[])> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.servlet.resource.PathResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.asm.RecordComponentWriter: org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int,org.springframework.asm.TypePath,java.lang.String,boolean)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_SINK_
<org.springframework.web.reactive.result.condition.ParamsRequestCondition: org.springframework.web.reactive.result.condition.ParamsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void parseConstructorArgElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.String remove(java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.util.Map parseMapElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(char)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: short getShort(java.lang.String)> ->_SINK_
<org.springframework.test.context.TestContextManager: void beforeTestExecution(java.lang.Object,java.lang.reflect.Method)> ->_SINK_
<org.springframework.transaction.reactive.TransactionalOperatorImpl: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.http.HttpHeaders)> ->_SINK_
<org.springframework.web.servlet.config.annotation.CorsRegistration: org.springframework.web.servlet.config.'annotation'.CorsRegistration combine(org.springframework.web.cors.CorsConfiguration)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Class)> ->_SINK_
<org.springframework.asm.AnnotationWriter: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec secure(java.lang.String,boolean)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.String)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeProcessingInstruction(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(org.w3c.dom.Document)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void convertAndSend(java.lang.String,java.lang.Object,org.springframework.jms.core.MessagePostProcessor)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int[] batchUpdate(java.lang.String,java.util.Map[])> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void publish(javax.jms.Message)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: javax.jms.Message receiveSelected(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.HeadersRequestCondition: int compareTo(org.springframework.web.servlet.mvc.condition.HeadersRequestCondition,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(int)> ->_SINK_
<org.springframework.web.servlet.DispatcherServlet: void noHandlerFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.mail.MailSendException: void printStackTrace(java.io.PrintStream)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: void putAll(java.util.Map)> ->_SINK_
<org.springframework.test.web.servlet.DefaultMvcResult: void <init>(org.springframework.mock.web.MockHttpServletRequest,org.springframework.mock.web.MockHttpServletResponse)> ->_SINK_
<org.springframework.http.client.reactive.JettyClientHttpResponse: java.lang.String parseSameSite(java.lang.String)> ->_SINK_
<org.springframework.web.context.request.async.CallableInterceptorChain: java.lang.Object applyPostProcess(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.mail.javamail.MimeMessageHelper: void addBcc(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMessageNotWritable(org.springframework.http.converter.HttpMessageNotWritableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.ResourceHandlerFunction: org.springframework.web.reactive.function.server.ServerResponse lambda$handle$1(org.springframework.web.reactive.function.server.EntityResponse)> ->_SINK_
<org.springframework.web.reactive.function.server.ResourceHandlerFunction: org.springframework.web.reactive.function.server.ServerResponse lambda$handle$0(org.springframework.web.reactive.function.server.EntityResponse)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void OPTIONS(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClient: reactor.core.publisher.Mono inConnection(java.util.function.Function)> ->_SINK_
<org.springframework.web.reactive.handler.AbstractHandlerMapping: reactor.core.publisher.Mono getHandler(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: void setHandlers(java.util.List)> ->_SINK_
<org.springframework.web.socket.handler.BinaryWebSocketHandler: void handleTextMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void parsePropertyElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider: void initializeWithTableColumnMetaData(java.sql.DatabaseMetaData,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationPredicates: java.util.function.Predicate firstRunOf(java.util.function.Function)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getNString(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.DefaultRenderingResponseBuilder: void <init>(org.springframework.web.servlet.function.RenderingResponse)> ->_SINK_
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void handleTransportError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(java.lang.String)> ->_SINK_
<org.springframework.scheduling.commonj.TimerManagerTaskScheduler: void setErrorHandler(org.springframework.util.ErrorHandler)> ->_SINK_
<org.springframework.test.web.servlet.result.ContentResultMatchers: org.springframework.test.web.servlet.ResultMatcher contentType(java.lang.String)> ->_SINK_
<org.springframework.cglib.core.TypeUtils: java.lang.String map(java.lang.String)> ->_SINK_
<org.springframework.format.datetime.joda.DurationFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfo: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: void <init>(java.lang.String,org.springframework.web.servlet.mvc.condition.PatternsRequestCondition,org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition,org.springframework.web.servlet.mvc.condition.ParamsRequestCondition,org.springframework.web.servlet.mvc.condition.HeadersRequestCondition,org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition,org.springframework.web.servlet.mvc.condition.ProducesRequestCondition,org.springframework.web.servlet.mvc.condition.RequestCondition)> ->_SINK_
<org.springframework.r2dbc.core.NamedParameterUtils: org.springframework.r2dbc.core.PreparedOperation substituteNamedParameters(org.springframework.r2dbc.core.ParsedSql,org.springframework.r2dbc.core.binding.BindMarkersFactory,org.springframework.r2dbc.core.BindParameterSource)> ->_SINK_
<org.springframework.aop.interceptor.AsyncExecutionAspectSupport: void handleError(java.lang.Throwable,java.lang.reflect.Method,java.lang.Object[])> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfo: void <init>(java.lang.String,org.springframework.web.reactive.result.condition.PatternsRequestCondition,org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition,org.springframework.web.reactive.result.condition.ParamsRequestCondition,org.springframework.web.reactive.result.condition.HeadersRequestCondition,org.springframework.web.reactive.result.condition.ConsumesRequestCondition,org.springframework.web.reactive.result.condition.ProducesRequestCondition,org.springframework.web.reactive.result.condition.RequestCondition)> ->_SINK_
<org.springframework.web.reactive.result.view.AbstractView: reactor.core.publisher.Mono getModelAttributes(java.util.Map,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.util.MimeType: org.springframework.util.MimeType valueOf(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition: org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition combine(org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition)> ->_SINK_
<org.springframework.jdbc.support.JdbcTransactionManager: void setDatabaseProductName(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void removeSessionCookie(org.springframework.mock.web.MockHttpServletRequest,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.ReactorServerHttpResponse: reactor.core.publisher.Mono writeWith(java.nio.file.Path,long,long)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.net.URI postForLocation(java.lang.String,java.lang.Object,java.lang.Object[])> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.List findByNamedQuery(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMissingServletRequestParameter(org.springframework.web.bind.MissingServletRequestParameterException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: void handleMessageFromClient(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.WebSocketMessage,org.springframework.messaging.MessageChannel)> ->_SINK_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: reactor.core.publisher.Mono getHandlerInternal(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.metrics.jfr.FlightRecorderStartupEvent: void setTags(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: org.springframework.web.reactive.function.client.WebClient$Builder filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler: java.util.Map retrieveAttributes(org.springframework.web.server.WebSession)> ->_SINK_
<org.springframework.messaging.simp.user.UserRegistryMessageHandler: void handleMessage(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addViewControllers(org.springframework.web.servlet.config.'annotation'.ViewControllerRegistry)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void convertAndSend(java.lang.Object,java.lang.Object,java.util.Map)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: javax.jms.Message sendAndReceive(java.lang.String,org.springframework.jms.core.MessageCreator)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: org.springframework.web.method.HandlerMethod lookupHandlerMethod(java.lang.String,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.socket.sockjs.client.UndertowXhrTransport: void access$700(org.springframework.web.socket.sockjs.client.UndertowXhrTransport,org.springframework.web.socket.sockjs.client.TransportRequest,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleAsyncRequestTimeoutException(org.springframework.web.context.request.async.AsyncRequestTimeoutException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.messaging.support.AbstractMessageChannel: boolean send(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.web.util.OpaqueUriComponents: void copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseDate(java.lang.String,org.springframework.scheduling.support.CronField$Type)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcCall: void addDeclaredParameter(org.springframework.jdbc.core.SqlParameter)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder path(java.lang.String,java.util.function.Supplier)> ->_SINK_
<org.springframework.web.socket.server.support.WebSocketHandlerMapping: java.lang.Object getHandlerInternal(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.jndi.JndiTemplate: java.lang.Object lookup(java.lang.String)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: java.lang.String getPrefix(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponse: org.springframework.http.client.reactive.ClientHttpResponse access$100(org.springframework.web.reactive.function.client.DefaultClientResponse)> ->_SINK_
<org.springframework.jdbc.datasource.init.DatabasePopulatorUtils: void execute(org.springframework.jdbc.datasource.init.DatabasePopulator,javax.sql.DataSource)> ->_SINK_
<org.springframework.context.index.processor.CandidateComponentsMetadata: void add(org.springframework.context.index.processor.ItemMetadata)> ->_SINK_
<org.springframework.beans.factory.xml.NamespaceHandlerSupport: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.cglib.beans.BeanMapEmitter: void <init>(org.springframework.asm.ClassVisitor,java.lang.String,java.lang.Class,int)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int[] batchUpdate(java.lang.String,org.springframework.jdbc.core.BatchPreparedStatementSetter)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMissingServletRequestPartException(org.springframework.web.multipart.support.MissingServletRequestPartException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.cglib.proxy.NoOpGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: void preProcess(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.core.convert.support.CharacterToNumberFactory: org.springframework.core.convert.converter.Converter getConverter(java.lang.Class)> ->_SINK_
<org.springframework.cglib.core.ReflectUtils: java.lang.reflect.Method findMethod(java.lang.String,java.lang.ClassLoader)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.Object[])> ->_SINK_
<org.springframework.jca.cci.object.SimpleRecordOperation: void execute(javax.resource.cci.Record,javax.resource.cci.Record)> ->_SINK_
<org.springframework.web.reactive.result.view.ViewResolutionResultHandler: reactor.core.publisher.Mono handleResult(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.util.xml.StaxEventHandler: void ignorableWhitespaceInternal(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(java.lang.String,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.http.codec.support.ServerDefaultCodecsImpl: void multipartReader(org.springframework.http.codec.HttpMessageReader)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.util.Map execute(java.util.Map)> ->_SINK_
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistry: void registerTranslator(java.lang.String,org.springframework.jdbc.support.SQLExceptionTranslator)> ->_SINK_
<org.springframework.ejb.config.AbstractJndiLocatingBeanDefinitionParser: boolean isEligibleAttribute(java.lang.String)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClient: org.springframework.r2dbc.core.DatabaseClient$GenericExecuteSpec sql(java.util.function.Supplier)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: long position(java.lang.String,long)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: boolean isDirectlyPresent(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: boolean byPassReturnParameter(java.lang.String)> ->_SINK_
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.aop.framework.JdkDynamicAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyDynamicElementReader: void <init>(java.lang.String,java.util.Map,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate,org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper,boolean)> ->_SINK_
<org.springframework.test.web.servlet.DefaultMvcResult: void setHandler(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: void POST(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerRequest: void <init>(org.springframework.web.server.ServerWebExchange,java.util.List)> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder uri(java.net.URI)> ->_SINK_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String parseStringValue(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver,java.util.Set)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: org.springframework.jdbc.core.PreparedStatementCreator getPreparedStatementCreator(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.test.web.servlet.result.HandlerResultMatchers: void lambda$handlerType$0(java.lang.Class,org.springframework.test.web.servlet.MvcResult)> ->_SINK_
<org.springframework.test.context.jdbc.MergedSqlConfig: void <init>(org.springframework.test.context.jdbc.SqlConfig,java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: void <init>(org.springframework.web.servlet.function.ServerRequest)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void addImportedResource(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture put(java.lang.String,org.springframework.http.HttpEntity,java.util.Map)> ->_SINK_
<org.springframework.web.socket.adapter.AbstractWebSocketSession: void sendMessage(org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.lang.Class)> ->_SINK_
<org.springframework.cache.interceptor.CacheEvaluationContext: java.lang.Object lookupVariable(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.CallableStatementCreatorFactory: org.springframework.jdbc.core.CallableStatementCreator newCallableStatementCreator(org.springframework.jdbc.core.ParameterMapper)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$PathComponent,org.springframework.util.MultiValueMap,org.springframework.web.util.HierarchicalUriComponents$EncodeState,java.util.function.UnaryOperator)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.lang.Object queryForObject(org.springframework.jdbc.core.JdbcOperations,java.lang.String)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.remoting.rmi.RmiInvocationWrapper: java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.MatrixVariableMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: org.springframework.messaging.Message doSendAndReceive(java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.namedparam.EmptySqlParameterSource: java.lang.Object getValue(java.lang.String)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: boolean isPresent(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.RequestMappingInfo: int compareTo(org.springframework.web.servlet.mvc.method.RequestMappingInfo,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: void <init>(org.springframework.jdbc.core.JdbcTemplate)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Mono handleConnectionSetupPayload(io.rsocket.ConnectionSetupPayload)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)> ->_SINK_
<org.springframework.format.datetime.standard.DurationFormatter: java.lang.String print(java.time.Duration,java.util.Locale)> ->_SINK_
<org.springframework.oxm.config.Jaxb2MarshallerBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(char[])> ->_SINK_
<org.springframework.web.reactive.function.server.support.ServerResponseResultHandler: reactor.core.publisher.Mono handleResult(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.jmx.export.MBeanExporter: void replaceNotificationListenerBeanNameKeysIfNecessary(java.lang.String,javax.management.ObjectName)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter: void handleTextMessage(javax.websocket.Session,java.lang.String,boolean)> ->_SINK_
<org.springframework.web.cors.DefaultCorsProcessor: java.lang.String checkOrigin(org.springframework.web.cors.CorsConfiguration,java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.Object[],java.util.Map)> ->_SINK_
<org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec: org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> ->_SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.asm.ClassWriter: int newHandle(int,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder DELETE(org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec path(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.reactive.resource.AppCacheManifestTransformer: reactor.core.publisher.Mono transform(org.springframework.web.server.ServerWebExchange,org.springframework.core.io.Resource,org.springframework.web.reactive.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder timeZone(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.web.util.pattern.InternalPathPatternParser: void <init>(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.math.BigDecimal getBigDecimal(java.lang.String)> ->_SINK_
<org.springframework.web.server.adapter.WebHttpHandlerBuilder: org.springframework.web.server.adapter.WebHttpHandlerBuilder exceptionHandlers(java.util.function.Consumer)> ->_SINK_
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.'annotation'.InterceptorRegistration addInterceptor(org.springframework.web.servlet.HandlerInterceptor)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl request$default(org.springframework.test.web.servlet.MockMvc,org.springframework.http.HttpMethod,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.sockjs.client.UndertowXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.web.cors.reactive.DefaultCorsProcessor: java.lang.String checkOrigin(org.springframework.web.cors.CorsConfiguration,java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession: void sendMessage(org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.web.util.HierarchicalUriComponents: void access$200(java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)> ->_SINK_
<org.springframework.web.server.adapter.WebHttpHandlerBuilder: org.springframework.web.server.adapter.WebHttpHandlerBuilder filter(org.springframework.web.server.WebFilter[])> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: org.springframework.web.servlet.mvc.method.'annotation'.ServletInvocableHandlerMethod getExceptionHandlerMethod(org.springframework.web.method.HandlerMethod,java.lang.Exception)> ->_SINK_
<org.springframework.web.reactive.config.WebFluxConfigurationSupport: org.springframework.web.reactive.result.method.'annotation'.ResponseBodyResultHandler responseBodyResultHandler(org.springframework.core.ReactiveAdapterRegistry,org.springframework.http.codec.ServerCodecConfigurer,org.springframework.web.reactive.accept.RequestedContentTypeResolver)> ->_SINK_
<org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void <init>(java.lang.String,org.springframework.util.MultiValueMap,java.util.Map,java.lang.ClassLoader)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory: org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: void <init>(org.springframework.web.socket.sockjs.client.SockJsUrlInfo,org.springframework.http.HttpHeaders,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.Transport,org.springframework.web.socket.sockjs.transport.TransportType,org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)> ->_SINK_
<org.springframework.core.convert.support.ByteBufferConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureHandlerExceptionResolvers(java.util.List)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.core.convert.support.StreamConverter: boolean matchesFromStream(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addResourceHandlers(org.springframework.web.servlet.config.'annotation'.ResourceHandlerRegistry)> ->_SINK_
<org.springframework.expression.spel.CodeFlow: boolean isPrimitiveOrUnboxableSupportedNumber(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder addInterceptors(org.springframework.web.servlet.HandlerInterceptor[])> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getScale(int)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.web.reactive.socket.client.StandardWebSocketClient: reactor.core.publisher.Mono execute(java.net.URI,org.springframework.web.reactive.socket.WebSocketHandler)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: boolean handleError(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.web.servlet.mvc.AbstractController: org.springframework.web.servlet.ModelAndView handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.orm.hibernate5.ConfigurableJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)> ->_SINK_
<org.springframework.format.datetime.standard.MonthDayFormatter: java.lang.String print(java.time.MonthDay,java.util.Locale)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.function.support.HandlerFunctionAdapter: org.springframework.web.servlet.function.ServerResponse handleAsync(org.springframework.web.context.request.async.WebAsyncManager)> ->_SINK_
<org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.support.KeyHolder,java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.resource.CachingResourceResolver: reactor.core.publisher.Mono resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void invoke(org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: int setString(long,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean relative(int)> ->_SINK_
<org.springframework.cglib.beans.BulkBeanEmitter: void <init>(org.springframework.asm.ClassVisitor,java.lang.String,java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[])> ->_SINK_
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: java.lang.Object lookupHandler(org.springframework.http.server.RequestPath,java.lang.String,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.reactive.socket.client.JettyWebSocketClient: org.springframework.web.reactive.socket.adapter.JettyWebSocketSession lambda$createHandler$1(java.net.URI,reactor.core.publisher.Sinks$Empty,org.eclipse.jetty.websocket.api.Session)> ->_SINK_
<org.springframework.beans.PropertyBatchUpdateException: void printStackTrace(java.io.PrintWriter)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockAsyncContext: void addDispatchHandler(java.lang.Runnable)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClassEnhancer: java.lang.Class enhance(java.lang.Class,java.lang.ClassLoader)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.PrincipalMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: java.util.List put(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.transaction.support.WithoutTransactionOperations: java.lang.Object execute(org.springframework.transaction.support.TransactionCallback)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession: void <init>(java.lang.String,org.springframework.web.socket.sockjs.transport.SockJsServiceConfig,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.jndi.JndiTemplate: void rebind(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitIincInsn(int,int)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler: void handleNoMatch(org.springframework.util.RouteMatcher$Route,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.String,java.util.function.Predicate,org.springframework.core.'annotation'.MergedAnnotationSelector)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider: java.lang.String schemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilderMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributeNamespace(int)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(char[])> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.String[] getStringArray(java.lang.String)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: boolean containsValue(java.lang.Object)> ->_SINK_
<org.springframework.core.convert.support.ArrayToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.core.type.classreading.MergedAnnotationReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelInitializer: void lambda$null$0(org.springframework.web.reactive.result.method.'annotation'.InitBinderBindingContext,org.springframework.web.server.WebSession,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: int[] doExecuteBatch(java.util.Map[])> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.PathVariableMapMethodArgumentResolver: java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(java.lang.String,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.core.env.ReadOnlySystemAttributesMap: boolean containsValue(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.resource.WebJarsResourceResolver: org.springframework.core.io.Resource resolveResourceInternal(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.Class getPropertyType(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponse: void <init>(org.springframework.http.client.reactive.ClientHttpResponse,org.springframework.web.reactive.function.client.ExchangeStrategies,java.lang.String,java.lang.String,java.util.function.Supplier)> ->_SINK_
<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: void publishEndpoint(javax.xml.ws.Endpoint,javax.jws.WebService)> ->_SINK_
<org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.HeadersRequestCondition: void <init>(java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void PATCH(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.util.xml.StaxEventHandler: void charactersInternal(java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(float)> ->_SINK_
<org.springframework.web.util.UriTemplate: void <init>(java.lang.String)> ->_SINK_
<org.springframework.ejb.config.JndiLookupBeanDefinitionParser: boolean isEligibleAttribute(java.lang.String)> ->_SINK_
<org.springframework.test.util.JsonPathExpectationsHelper: java.lang.Object evaluateJsonPath(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.asm.Type: java.lang.String getInternalName(java.lang.Class)> ->_SINK_
<org.springframework.web.method.annotation.RequestParamMapMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory: org.springframework.format.Printer getPrinter(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.cglib.proxy.DispatcherGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.web.client.RestTemplate: void setErrorHandler(org.springframework.web.client.ResponseErrorHandler)> ->_SINK_
<org.springframework.ejb.config.JndiLookupBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.servlet.HandlerExecutionChain getHandlerExecutionChain(java.lang.Object,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void publish(javax.jms.Topic,javax.jms.Message,int,int,long)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(int,java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor: void <init>(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor: void startNested(org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.socket.server.support.AbstractHandshakeHandler: java.lang.String selectProtocol(java.util.List,org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.messaging.simp.SimpMessagingTemplate: void send(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler: org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(org.springframework.jdbc.support.xml.XmlBinaryStreamProvider)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder add(org.springframework.web.servlet.function.RouterFunction)> ->_SINK_
<org.springframework.core.convert.support.EnumToStringConverter: java.lang.String convert(java.lang.Enum)> ->_SINK_
<org.springframework.jdbc.support.incrementer.SqlServerMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.ChangePathPatternParserVisitor: void startNested(org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: int getInt(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: reactor.core.publisher.Mono handlePreFlight(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.Map queryForMap(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.Object parseKeyElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)> ->_SINK_
<org.springframework.util.xml.StaxEventHandler: void cDataInternal(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.ToStringVisitor: void 'unknown'(org.springframework.web.servlet.function.RouterFunction)> ->_SINK_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec interceptors(org.springframework.web.servlet.HandlerInterceptor[])> ->_SINK_
<org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener: void afterTestMethod(org.springframework.test.context.TestContext)> ->_SINK_
<org.springframework.util.ReflectionUtils: void rethrowRuntimeException(java.lang.Throwable)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler: org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession createSession(java.lang.String,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: org.springframework.web.socket.WebSocketHandler getHandler(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.core.metrics.jfr.FlightRecorderStartupStep: void <init>(long,java.lang.String,long,java.util.function.Consumer)> ->_SINK_
<org.springframework.context.index.processor.StandardStereotypesProvider: java.util.Set getStereotypes(javax.lang.model.element.Element)> ->_SINK_
<org.springframework.web.socket.sockjs.client.JettyXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> ->_SINK_
<org.springframework.web.method.ControllerAdviceBean: void <init>(java.lang.String,org.springframework.beans.factory.BeanFactory,org.springframework.web.bind.'annotation'.ControllerAdvice)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: float[] getRequiredFloatParameters(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(long,java.util.Map)> ->_SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: void handleError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.namedparam.EmptySqlParameterSource: boolean hasValue(java.lang.String)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketConnector(org.springframework.messaging.rsocket.RSocketConnectorConfigurer)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: org.springframework.web.socket.messaging.SubProtocolHandler findProtocolHandler(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.util.DefaultUriTemplateHandler: org.springframework.web.util.UriComponentsBuilder initUriComponentsBuilder(java.lang.String)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void maxInMemorySize(int)> ->_SINK_
<org.springframework.core.convert.support.CollectionToArrayConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter: void addReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.web.server.session.HeaderWebSessionIdResolver: java.util.List resolveSessionIds(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.util.XpathExpectationsHelper: void assertNodeList(byte[],java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletCookieValueMethodArgumentResolver: java.lang.Object resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.test.web.reactive.server.AbstractMockServerSpec: org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec apply(org.springframework.test.web.reactive.server.MockServerConfigurer)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.context.index.processor.MetadataCollector: void processing(javax.'annotation'.processing.RoundEnvironment)> ->_SINK_
<org.springframework.web.accept.HeaderContentNegotiationStrategy: java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String,java.lang.Object,int,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder header(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer: void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: void putAll(java.util.Map)> ->_SINK_
<org.springframework.core.env.SimpleCommandLinePropertySource: void <init>(java.lang.String[])> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributePrefix(int)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.r2dbc.core.NamedParameterUtils: org.springframework.r2dbc.core.PreparedOperation substituteNamedParameters(java.lang.String,org.springframework.r2dbc.core.binding.BindMarkersFactory,org.springframework.r2dbc.core.BindParameterSource)> ->_SINK_
<org.springframework.aop.config.ConfigBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration: void addReturnValueHandlers(java.util.List)> ->_SINK_
<org.springframework.core.env.ProfilesParser: java.lang.String lambda$parseExpression$0(java.lang.String)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void handleMatch(java.lang.Object,org.springframework.messaging.handler.HandlerMethod,java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void setForwardPostProcessor(org.springframework.test.web.servlet.request.RequestPostProcessor)> ->_SINK_
<org.springframework.web.server.handler.ExceptionHandlingWebHandler: reactor.core.publisher.Mono lambda$handle$0(org.springframework.web.server.WebExceptionHandler,org.springframework.web.server.ServerWebExchange,java.lang.Throwable)> ->_SINK_
<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.String,java.util.function.Predicate,org.springframework.core.'annotation'.MergedAnnotationSelector)> ->_SINK_
<org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin: void <init>(java.lang.instrument.ClassFileTransformer)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.web.reactive.handler.AbstractHandlerMapping: java.lang.Object lambda$getHandler$1(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_SINK_
<org.springframework.core.annotation.AttributeMethods: int indexOf(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.DefaultMvcResult: void setInterceptors(org.springframework.web.servlet.HandlerInterceptor[])> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod: void setHandlerMethodReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: java.lang.Number executeAndReturnKey(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator: org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node,org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: java.lang.Object handleEmptyBody(java.lang.Object,org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: void send(java.lang.String,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.core.convert.support.IntegerToEnumConverterFactory: org.springframework.core.convert.converter.Converter getConverter(java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcCall: java.util.Map doExecute(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantClass(java.lang.String)> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.Object,java.lang.Object,java.util.Map,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.mail.javamail.SmartMimeMessage: void <init>(javax.mail.Session,java.lang.String,javax.activation.FileTypeMap)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity postForEntity(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerResponseBuilder: org.springframework.web.servlet.function.ServerResponse render(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource: void registerSqlType(java.lang.String,int)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler: boolean supports(org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder attribute(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.core.env.CommandLineArgs: void addNonOptionArg(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition: org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.util.StringUtils: java.util.TimeZone parseTimeZoneString(java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractStaxHandler: void comment(char[],int,int)> ->_SINK_
<org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler getDefaultErrorHandler(boolean)> ->_SINK_
<org.springframework.test.web.reactive.server.AbstractMockServerSpec: org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec webFilter(org.springframework.web.server.WebFilter[])> ->_SINK_
<org.springframework.core.log.CompositeLog: void debug(java.lang.Object)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.util.Map,java.lang.Class,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.test.web.reactive.server.StatusAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(org.hamcrest.Matcher)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: void DELETE(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClassParser: void parse(org.springframework.core.type.AnnotationMetadata,java.lang.String)> ->_SINK_
<org.springframework.util.xml.AbstractStaxXMLReader: void endPrefixMapping(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl put$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.context.testfixture.jndi.SimpleNamingContext: javax.naming.NameParser getNameParser(java.lang.String)> ->_SINK_
<org.springframework.web.accept.AbstractMappingContentNegotiationStrategy: org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class,java.util.function.Predicate)> ->_SINK_
<org.springframework.web.context.request.async.WebAsyncManager: void startDeferredResultProcessing(org.springframework.web.context.request.async.DeferredResult,java.lang.Object[])> ->_SINK_
<org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition: int compareTo(java.lang.Object,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(long)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession: void handleClose(org.springframework.web.reactive.socket.CloseStatus)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: void setErrorHandler(org.springframework.web.client.ResponseErrorHandler)> ->_SINK_
<org.springframework.web.util.HtmlCharacterEntityDecoder: void <init>(org.springframework.web.util.HtmlCharacterEntityReferences,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.resource.AbstractResourceResolver: java.lang.String resolveUrlPath(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.core.convert.support.EnumToIntegerConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.web.socket.sockjs.client.JettyXhrTransport: void access$100(org.springframework.web.socket.sockjs.client.JettyXhrTransport,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener)> ->_SINK_
<org.springframework.web.reactive.handler.AbstractUrlHandlerMapping: reactor.core.publisher.Mono getHandlerInternal(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.jms.core.JmsTemplate: java.lang.Object browseSelected(java.lang.String,java.lang.String,org.springframework.jms.core.BrowserCallback)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.ProducesRequestCondition: int compareTo(org.springframework.web.servlet.mvc.condition.ProducesRequestCondition,javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo: void addTransformer(javax.persistence.spi.ClassTransformer)> ->_SINK_
<org.springframework.asm.SymbolTable: void addConstantMethodHandle(int,int,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: boolean parseMergeAttribute(org.w3c.dom.Element)> ->_SINK_
<org.springframework.web.method.annotation.SessionStatusMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.reactive.handler.AbstractUrlHandlerMapping: java.lang.Object lookupHandler(org.springframework.http.server.PathContainer,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.HandlerExecutionChain: void applyPostHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.ModelAndView)> ->_SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.io.InputStream,int,org.springframework.jdbc.support.lob.LobHandler)> ->_SINK_
<org.springframework.core.annotation.MergedAnnotationsCollection: org.springframework.core.'annotation'.MergedAnnotation get(java.lang.Class,java.util.function.Predicate,org.springframework.core.'annotation'.MergedAnnotationSelector)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valuesMatch(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.jms.config.AbstractListenerContainerParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(double)> ->_SINK_
<org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider: java.lang.String metaDataCatalogNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.support.BindStatus: void <init>(org.springframework.web.servlet.support.RequestContext,java.lang.String,boolean)> ->_SINK_
<org.springframework.web.reactive.resource.CachingResourceResolver: java.lang.String computeKey(org.springframework.web.server.ServerWebExchange,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: void GET(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.web.servlet.handler.SimpleServletHandlerAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.scheduling.support.CompositeCronField: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.core.convert.support.StringToCurrencyConverter: java.util.Currency convert(java.lang.String)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.socket.server.standard.ServerEndpointRegistration: void <init>(java.lang.String,javax.websocket.Endpoint)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: void set(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.ObjectToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int,int,java.util.Map)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeDefaultNamespace(java.lang.String)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcResultMatchersDsl: void xpath$default(org.springframework.test.web.servlet.MockMvcResultMatchersDsl,java.lang.String,java.lang.Object[],java.util.Map,kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration: org.springframework.web.socket.config.'annotation'.WebSocketHandlerRegistration setHandshakeHandler(org.springframework.web.socket.server.HandshakeHandler)> ->_SINK_
<org.springframework.core.SortedProperties: void storeToXML(java.io.OutputStream,java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.StringToCollectionConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: boolean hasNonDefaultValue(java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.client.SockJsClient: org.springframework.util.concurrent.ListenableFuture doHandshake(org.springframework.web.socket.WebSocketHandler,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport: org.springframework.web.socket.WebSocketHandler subProtocolWebSocketHandler(org.springframework.messaging.support.AbstractSubscribableChannel,org.springframework.messaging.support.AbstractSubscribableChannel)> ->_SINK_
<org.springframework.jms.listener.AbstractMessageListenerContainer: void handleListenerException(java.lang.Throwable)> ->_SINK_
<org.springframework.web.servlet.config.ViewControllerBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void enableLoggingRequestDetails(boolean)> ->_SINK_
<org.springframework.web.server.i18n.FixedLocaleContextResolver: org.springframework.context.i18n.LocaleContext resolveLocaleContext(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultInterceptorChain: void applyBeforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.reactive.resource.CachingResourceResolver: reactor.core.publisher.Mono resolveResourceInternal(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(org.springframework.format.'annotation'.DateTimeFormat,java.lang.Class)> ->_SINK_
<org.springframework.format.datetime.standard.InstantFormatter: java.time.Instant parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter: void onError(io.undertow.websockets.core.WebSocketChannel,java.lang.Throwable)> ->_SINK_
<org.springframework.web.reactive.result.condition.ProducesRequestCondition: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.reactive.accept.RequestedContentTypeResolver)> ->_SINK_
<org.springframework.web.bind.support.WebExchangeDataBinder: reactor.core.publisher.Mono bind(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: void setPatternParser(org.springframework.web.util.pattern.PathPatternParser)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamReader: boolean isAttributeSpecified(int)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughBlob: int setBytes(long,byte[],int,int)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void println(char)> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerResponseBuilder: org.springframework.web.servlet.function.ServerResponse render(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.multipart.support.StandardMultipartHttpServletRequest: void handleParseFailure(java.lang.Throwable)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: void parseManagedClasses(org.w3c.dom.Element,org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void handlePongMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.PongMessage)> ->_SINK_
<org.springframework.web.reactive.resource.EncodedResourceResolver: reactor.core.publisher.Mono resolveResourceInternal(org.springframework.web.server.ServerWebExchange,java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.web.method.annotation.SessionAttributesHandler: java.lang.Object retrieveAttribute(org.springframework.web.context.request.WebRequest,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.socket.client.JettyWebSocketClient: java.lang.Object createHandler(java.net.URI,org.springframework.web.reactive.socket.WebSocketHandler,reactor.core.publisher.Sinks$Empty)> ->_SINK_
<org.springframework.http.codec.xml.JaxbContextContainer: javax.xml.bind.Marshaller createMarshaller(java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder DELETE(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_SINK_
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Mono lambda$handle$1(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: java.lang.Object getProperty(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.condition.ConsumesRequestCondition: void <init>(java.lang.String[],java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor: void changeParser(org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler: void access$200(org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler,java.lang.String,java.security.Principal,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterBatchUpdateUtils: int[] executeBatchUpdateWithNamedParameters(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource[],org.springframework.jdbc.core.JdbcOperations)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: boolean containsValue(java.lang.Object)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.net.URI postForLocation(java.lang.String,java.lang.Object,java.util.Map)> ->_SINK_
<org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping: org.springframework.web.method.HandlerMethod lookupHandlerMethod(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.format.number.money.CurrencyUnitFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: boolean isHandler(java.lang.Class)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObjectByNamedParam(java.util.Map)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleEntityReference(javax.xml.stream.events.EntityReference)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.String)> ->_SINK_
<org.springframework.test.context.support.TestPropertySourceAttributes: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void access$200(org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder,org.springframework.mock.web.MockHttpServletRequest,java.lang.String)> ->_SINK_
<org.springframework.web.method.annotation.ModelAttributeMethodProcessor: java.lang.Object constructAttribute(java.lang.reflect.Constructor,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.bind.support.WebDataBinderFactory,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Destination,javax.jms.Message)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void commentInternal(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler: void lambda$retrieveAttributes$0(org.springframework.web.server.WebSession,java.util.Map,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientResponseBuilder: void <init>(org.springframework.web.reactive.function.client.ExchangeStrategies)> ->_SINK_
<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter: java.lang.Object handleEmptyBody(java.lang.Object,org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> ->_SINK_
<org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration: void addWebSocketHandlerMapping(org.springframework.util.MultiValueMap,org.springframework.web.socket.WebSocketHandler,org.springframework.web.socket.server.HandshakeHandler,org.springframework.web.socket.server.HandshakeInterceptor[],java.lang.String)> ->_SINK_
<org.gradle.cli.CommandLineParser: org.gradle.cli.ParsedCommandLine parse(java.lang.String[])> ->_SINK_
<org.springframework.test.web.servlet.TestDispatcherServlet: void <init>(org.springframework.web.context.WebApplicationContext)> ->_SINK_
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleMissingPathVariable(org.springframework.web.bind.MissingPathVariableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.object.RdbmsOperation: void setGeneratedKeysColumnNames(java.lang.String[])> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void GET(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: org.springframework.core.'annotation'.MergedAnnotation filterAttributes(java.util.function.Predicate)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder HEAD(java.lang.String,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.servlet.tags.form.OptionWriter: void writeOptions(org.springframework.web.servlet.tags.form.TagWriter)> ->_SINK_
<org.springframework.cache.interceptor.CacheOperationExpressionEvaluator: boolean unless(java.lang.String,org.springframework.context.expression.AnnotatedElementKey,org.springframework.expression.EvaluationContext)> ->_SINK_
<org.springframework.web.accept.AbstractMappingContentNegotiationStrategy: java.util.List resolveMediaTypeKey(org.springframework.web.context.request.NativeWebRequest,java.lang.String)> ->_SINK_
<org.springframework.asm.FieldWriter: org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int,org.springframework.asm.TypePath,java.lang.String,boolean)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int[] batchUpdate(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object execute(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.PreparedStatementCallback)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(long)> ->_SINK_
<org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer: void afterConfigurerAdded(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: void putAll(java.util.Map)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: long getLong(int)> ->_SINK_
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.frame.SockJsFrame: org.springframework.web.socket.sockjs.frame.SockJsFrame messageFrame(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec,java.lang.String[])> ->_SINK_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.util.List matchInParameterValuesWithInsertColumns(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitAttribute(org.springframework.asm.Attribute)> ->_SINK_
<org.springframework.scripting.config.LangNamespaceHandler: void registerScriptBeanDefinitionParser(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Message,int,int,long)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: float getFloat(int)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: org.springframework.web.reactive.function.client.ClientRequest$Builder body(org.springframework.web.reactive.function.BodyInserter)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[],int[])> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: java.lang.Object convertSendAndReceive(java.lang.String,java.lang.Object,java.util.Map,java.lang.Class)> ->_SINK_
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.lang.String,org.springframework.web.socket.WebSocketHttpHeaders,org.springframework.messaging.simp.stomp.StompHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler,java.lang.Object[])> ->_SINK_
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void registerCorsConfiguration(java.lang.String,org.springframework.web.cors.CorsConfiguration)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClassParser: void parse(java.util.Set)> ->_SINK_
<org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor: long parseDelayAsLong(java.lang.String)> ->_SINK_
<org.springframework.format.datetime.joda.YearMonthFormatter: org.joda.time.YearMonth parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.method.support.CompositeUriComponentsContributor mvcUriComponentsContributor(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.mvc.method.'annotation'.RequestMappingHandlerAdapter)> ->_SINK_
<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.Object retrieveAttribute(org.springframework.web.context.request.WebRequest,java.lang.String)> ->_SINK_
<org.springframework.messaging.simp.SimpMessagingTemplate: void setSendTimeout(long)> ->_SINK_
<org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter: void postHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.web.servlet.ModelAndView)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void setErrorHandler(org.springframework.util.ErrorHandler)> ->_SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.jdbc.support.SQLErrorCodes getErrorCodes(javax.sql.DataSource)> ->_SINK_
<org.springframework.context.index.processor.TypeHelper: java.util.List getDirectInterfaces(javax.lang.model.element.Element)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer: void addCustomHandler(org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler[])> ->_SINK_
<org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Class[])> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: org.springframework.jdbc.support.KeyHolder doExecuteAndReturnKeyHolder(java.util.Map)> ->_SINK_
<org.springframework.web.reactive.function.server.ToStringVisitor: void startNested(org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(double)> ->_SINK_
<org.springframework.web.method.annotation.RequestParamMethodArgumentResolver: java.lang.Object resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jdbc.core.metadata.Db2CallMetaDataProvider: java.lang.String metaDataSchemaNameToUse(java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.incrementer.H2SequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: org.w3c.dom.Document buildDocument(org.xml.sax.ErrorHandler,java.io.InputStream)> ->_SINK_
<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport: org.springframework.web.socket.WebSocketHandler decorateWebSocketHandler(org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultInterceptorChain: java.lang.Object applyPostProcess(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureContentNegotiation(org.springframework.web.servlet.config.'annotation'.ContentNegotiationConfigurer)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping: void registerMapping(org.springframework.web.reactive.result.method.RequestMappingInfo,java.lang.Object,java.lang.reflect.Method)> ->_SINK_
<org.springframework.core.log.CompositeLog: void info(java.lang.Object,java.lang.Throwable)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter: void addResourceHandlers(org.springframework.web.servlet.config.'annotation'.ResourceHandlerRegistry)> ->_SINK_
<org.springframework.web.reactive.function.client.WebClientUtils: reactor.core.publisher.Mono mapToEntityList(org.springframework.web.reactive.function.client.ClientResponse,org.reactivestreams.Publisher)> ->_SINK_
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void handleBinaryMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.BinaryMessage)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec sameSite(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(java.lang.String,org.springframework.jdbc.core.PreparedStatementCallback)> ->_SINK_
<org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter: void afterConcurrentHandlingStarted(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping beanNameHandlerMapping(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.jms.listener.DefaultMessageListenerContainer: void handleListenerSetupFailure(java.lang.Throwable,boolean)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerRequest: java.lang.Object body(org.springframework.web.reactive.function.BodyExtractor,java.util.Map)> ->_SINK_
<org.springframework.messaging.rsocket.annotation.support.MessagingRSocket: reactor.core.publisher.Mono lambda$handleAndReply$4(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory: org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession: void handleCloseFrame(org.springframework.web.socket.sockjs.frame.SockJsFrame)> ->_SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,java.lang.String)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: java.lang.Object getFirst(java.lang.Object)> ->_SINK_
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(java.lang.String,org.springframework.jdbc.core.CallableStatementCallback)> ->_SINK_
<org.springframework.test.web.servlet.client.StandaloneMockMvcSpec: org.springframework.test.web.servlet.client.StandaloneMockMvcSpec handlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver[])> ->_SINK_
<org.springframework.http.client.reactive.JettyClientHttpResponse: void lambda$getCookies$1(org.springframework.util.MultiValueMap,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.CompositeRequestCondition: org.springframework.web.servlet.mvc.condition.CompositeRequestCondition combine(org.springframework.web.servlet.mvc.condition.CompositeRequestCondition)> ->_SINK_
<org.springframework.scheduling.commonj.TimerManagerTaskScheduler: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,org.springframework.scheduling.Trigger)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(java.lang.String,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: float[] getFloatArray(java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void sendMessageInternal(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String substituteNamedParameters(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.Object parsePropertyValue(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.incrementer.SybaseAnywhereMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.DefaultRenderingResponseBuilder: org.springframework.web.servlet.function.RenderingResponse$Builder modelAttribute(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.Future submit(java.lang.Runnable)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: org.springframework.web.reactive.function.client.WebClient$Builder defaultCookie(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.transaction.annotation.SpringTransactionAnnotationParser: org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcCall: void addDeclaredRowMapper(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy: void upgrade(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,java.lang.String,java.util.List,java.security.Principal,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo parsePersistenceUnitInfo(org.w3c.dom.Element,java.lang.String,java.net.URL)> ->_SINK_
<org.springframework.web.servlet.function.ErrorHandlingServerResponse: org.springframework.web.servlet.ModelAndView handleError(java.lang.Throwable,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.web.servlet.function.ServerResponse$Context)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: java.lang.String getFirst(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.tags.form.SelectedValueComparator: boolean isSelected(org.springframework.web.servlet.support.BindStatus,java.lang.Object)> ->_SINK_
<org.springframework.asm.MethodWriter: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> ->_SINK_
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void handleTextMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.TextMessage)> ->_SINK_
<org.springframework.asm.ClassWriter: int newHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: void persist(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider: org.springframework.jdbc.core.SqlParameter createDefaultOutParameter(java.lang.String,org.springframework.jdbc.core.metadata.CallParameterMetaData)> ->_SINK_
<org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator: org.springframework.dao.DataAccessException translate(java.lang.String,java.lang.String,java.sql.SQLException)> ->_SINK_
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter: org.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> ->_SINK_
<org.springframework.core.convert.support.PropertiesToStringConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: void OPTIONS(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.core.convert.support.NumberToCharacterConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.test.util.XpathExpectationsHelper: java.lang.Object evaluateXpath(byte[],java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.socket.config.annotation.WebSocketConfigurationSupport: void registerWebSocketHandlers(org.springframework.web.socket.config.'annotation'.WebSocketHandlerRegistry)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeCharacters(char[],int,int)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean getBoolean(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest,org.springframework.web.bind.support.WebDataBinderFactory)> ->_SINK_
<org.springframework.jdbc.support.lob.PassThroughClob: void truncate(long)> ->_SINK_
<org.springframework.core.log.CompositeLog: void warn(java.lang.Object)> ->_SINK_
<org.springframework.web.method.annotation.ModelAttributeMethodProcessor: void validateValueIfApplicable(org.springframework.web.bind.WebDataBinder,org.springframework.core.MethodParameter,java.lang.Class,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceUrlProvider: void lambda$registerHandlers$0(java.lang.String,org.springframework.web.reactive.resource.ResourceWebHandler)> ->_SINK_
<org.springframework.asm.ModuleWriter: void visitMainClass(java.lang.String)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.jms.listener.SimpleMessageListenerContainer: void lambda$createListenerConsumer$1(javax.jms.Session,javax.jms.Message)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: void afterCompletion(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: void addAll(org.springframework.util.MultiValueMap)> ->_SINK_
<org.springframework.web.filter.RelativeRedirectResponseWrapper: void sendRedirect(java.lang.String)> ->_SINK_
<org.springframework.web.method.annotation.SessionAttributesHandler: boolean isHandlerSessionAttribute(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: org.springframework.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: java.util.Map access$100(org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder)> ->_SINK_
<org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketStrategies(org.springframework.messaging.rsocket.RSocketStrategies)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder: org.springframework.web.reactive.function.server.RenderingResponse$Builder modelAttribute(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.WebSessionMethodArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.convert.support.StringToTimeZoneConverter: java.lang.Object convert(java.lang.Object)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void protobufEncoder(org.springframework.core.codec.Encoder)> ->_SINK_
<org.springframework.web.reactive.accept.ParameterContentTypeResolver: java.util.List resolveMediaTypes(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.http.server.reactive.JettyHeadersAdapter: boolean containsKey(java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.support.DisposableBeanAdapter: void invokeCustomDestroyMethod(java.lang.reflect.Method)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: void registerHandlerMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object)> ->_SINK_
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: void setFallbackRequest(org.springframework.web.socket.sockjs.client.DefaultTransportRequest)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder: void access$300(org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder,org.springframework.mock.web.MockHttpServletRequest,java.lang.String)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite: boolean supportsReturnType(org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator: boolean send(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.Object parseArrayElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder: org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setCustomReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler[])> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getString(java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.ObjectToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor: java.lang.Object createAttributeFromRequestValue(java.lang.String,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.bind.support.WebDataBinderFactory,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int findColumn(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.support.ClientResponseWrapper: java.lang.Object body(org.springframework.web.reactive.function.BodyExtractor)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueEqualsDate(java.lang.String,long)> ->_SINK_
<org.springframework.web.servlet.tags.form.OptionWriter: void writeCommonAttributes(org.springframework.web.servlet.tags.form.TagWriter)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder GET(org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder setupRoute(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: void delete(java.lang.String,java.lang.Object,org.hibernate.LockMode)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable,long)> ->_SINK_
<org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter: void publishEndpoint(javax.xml.ws.Endpoint,javax.jws.WebService)> ->_SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void <init>(java.lang.String,boolean)> ->_SINK_
<org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests: void executeSqlScript(java.lang.String,boolean)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleMethodArgumentNotValid(org.springframework.web.bind.MethodArgumentNotValidException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.messaging.tcp.TcpConnectionHandler)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcResultHandlersDsl: void handle(org.springframework.test.web.servlet.ResultHandler)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClientBuilder: org.springframework.r2dbc.core.DatabaseClient$Builder connectionFactory(io.r2dbc.spi.ConnectionFactory)> ->_SINK_
<org.springframework.test.jdbc.JdbcTestUtils: int deleteFromTableWhere(org.springframework.jdbc.core.JdbcTemplate,java.lang.String,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.socket.messaging.StompSubProtocolHandler: void afterSessionEnded(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus,org.springframework.messaging.MessageChannel)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity postForEntity(java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.lang.Object load(java.lang.String,java.io.Serializable,org.hibernate.LockMode)> ->_SINK_
<org.springframework.aop.framework.adapter.MethodBeforeAdviceAdapter: org.aopalliance.intercept.MethodInterceptor getInterceptor(org.springframework.aop.Advisor)> ->_SINK_
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(javax.websocket.Endpoint,javax.websocket.ClientEndpointConfig,java.net.URI)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.AbstractNamedValueSyncArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.format.datetime.DateFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.function.server.support.ServerRequestWrapper: java.lang.Object body(org.springframework.web.reactive.function.BodyExtractor)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition: void <init>(java.lang.String[],java.lang.String[])> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: org.springframework.jdbc.support.KeyHolder executeAndReturnKeyHolder(java.util.Map)> ->_SINK_
<org.springframework.http.codec.support.ServerDefaultCodecsImpl: void serverSentEventEncoder(org.springframework.core.codec.Encoder)> ->_SINK_
<org.springframework.scheduling.support.CompositeCronField: java.time.temporal.Temporal nextOrSame(java.time.temporal.Temporal)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void println(double)> ->_SINK_
<org.springframework.core.env.ReadOnlySystemAttributesMap: void putAll(java.util.Map)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: long getLong(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ServletRequestDataBinderFactory: org.springframework.web.bind.ServletRequestDataBinder createBinderInstance(java.lang.Object,java.lang.String,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.jca.work.WorkManagerTaskExecutor: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: java.util.List put(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture getForEntity(java.lang.String,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: boolean getRequiredBooleanParameter(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper addProperty(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultClientRequestBuilder: void <init>(org.springframework.web.reactive.function.client.ClientRequest)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: void DELETE(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver: org.springframework.context.i18n.LocaleContext resolveLocaleContext(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.asm.SymbolTable: org.springframework.asm.Symbol addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean)> ->_SINK_
<org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection: com.gargoylesoftware.htmlunit.WebResponse getResponse(com.gargoylesoftware.htmlunit.WebRequest)> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: org.springframework.messaging.Message sendAndReceive(java.lang.Object,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.reactive.resource.ResourceWebHandler: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.cglib.proxy.MixinEverythingEmitter: void <init>(org.springframework.asm.ClassVisitor,java.lang.String,java.lang.Class[])> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: org.springframework.test.web.reactive.server.WebTestClient$Builder uriBuilderFactory(org.springframework.web.util.UriBuilderFactory)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(long)> ->_SINK_
<org.springframework.util.xml.StaxUtils: org.xml.sax.ContentHandler createContentHandler(javax.xml.stream.XMLEventWriter)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder: org.springframework.web.reactive.function.server.HandlerStrategies$Builder webFilter(org.springframework.web.server.WebFilter)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(java.lang.String)> ->_SINK_
<org.springframework.core.type.classreading.MergedAnnotationReadingVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> ->_SINK_
<org.springframework.test.web.reactive.server.CookieAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueEquals(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: void add(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.format.datetime.joda.ReadableInstantPrinter: java.lang.String print(org.joda.time.ReadableInstant,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfo: org.springframework.web.reactive.result.method.RequestMappingInfo getMatchingCondition(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider: boolean byPassReturnParameter(java.lang.String)> ->_SINK_
<org.springframework.core.convert.support.AbstractConditionalEnumConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.method.annotation.ModelAttributeMethodProcessor: java.lang.Object resolveConstructorArgument(java.lang.String,java.lang.Class,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: boolean isDirectlyPresent(java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(java.lang.Object)> ->_SINK_
<org.springframework.http.MediaType: org.springframework.http.MediaType valueOf(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder: void <init>(org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies,org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$1)> ->_SINK_
<org.springframework.beans.AbstractNestablePropertyAccessor: boolean isReadableProperty(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver: reactor.core.publisher.Flux getPartValues(org.springframework.core.MethodParameter,org.springframework.web.bind.'annotation'.RequestPart,boolean,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.client.RestTemplate: org.springframework.http.HttpHeaders headForHeaders(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: reactor.core.publisher.Mono lambda$onError$4(java.util.function.Predicate,java.util.function.BiFunction,org.springframework.web.reactive.function.server.ServerRequest,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: org.springframework.core.'annotation'.MergedAnnotation getAnnotation(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: java.lang.Number doExecuteAndReturnKey(java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: void <init>(org.springframework.jdbc.core.JdbcTemplate)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.List findByNamedParam(java.lang.String,java.lang.String[],java.lang.Object[])> ->_SINK_
<org.springframework.asm.MethodWriter: void visitTableSwitchInsn(int,int,org.springframework.asm.Label,org.springframework.asm.Label[])> ->_SINK_
<org.springframework.util.xml.StaxEventHandler: void skippedEntityInternal(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.stream.Stream queryForStream(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.messaging.rsocket.MetadataEncoder: java.lang.String expand(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void send(java.lang.Object,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.test.web.servlet.MockMvcExtensionsKt: org.springframework.test.web.servlet.ResultActionsDsl get$default(org.springframework.test.web.servlet.MockMvc,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function1,int,java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.util.List parseListElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.r2dbc.core.DefaultDatabaseClientBuilder: org.springframework.r2dbc.core.DatabaseClient$Builder executeFunction(org.springframework.r2dbc.core.ExecuteFunction)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> ->_SINK_
<org.springframework.http.ContentDisposition: org.springframework.http.ContentDisposition parse(java.lang.String)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void println(int)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractEncoderMethodReturnValueHandler: reactor.core.publisher.Mono handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: java.util.List get(java.lang.Object)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: void set(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(int,java.util.Calendar)> ->_SINK_
<org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping: java.lang.String[] determineUrlsForHandler(java.lang.String)> ->_SINK_
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void destroyHandler(org.springframework.web.socket.WebSocketSession)> ->_SINK_
<org.springframework.core.annotation.IntrospectionFailureLogger: org.springframework.core.'annotation'.IntrospectionFailureLogger valueOf(java.lang.String)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObjectByNamedParam(java.util.Map,java.util.Map)> ->_SINK_
<org.springframework.web.servlet.function.DefaultRenderingResponseBuilder: org.springframework.web.servlet.function.RenderingResponse$Builder header(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester$Builder metadataMimeType(org.springframework.util.MimeType)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(int)> ->_SINK_
<org.springframework.format.datetime.joda.DurationFormatter: java.lang.String print(org.joda.time.Duration,java.util.Locale)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional getValue(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: void registerHandler(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: org.springframework.core.'annotation'.AnnotationAttributes asAnnotationAttributes(org.springframework.core.'annotation'.MergedAnnotation$Adapt[])> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void jackson2SmileDecoder(org.springframework.core.codec.Decoder)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PATCH(org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.datasource.init.ScriptStatementFailedException: void <init>(java.lang.String,int,org.springframework.core.io.support.EncodedResource,java.lang.Throwable)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.jdbc.core.metadata.CallParameterMetaData: void <init>(java.lang.String,int,int,java.lang.String,boolean)> ->_SINK_
<org.springframework.cache.config.CacheAdviceParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)> ->_SINK_
<org.springframework.context.index.processor.TypeHelper: java.lang.String getType(javax.lang.model.element.AnnotationMirror)> ->_SINK_
<org.springframework.context.index.processor.TypeHelper: java.lang.String getType(javax.lang.model.element.Element)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <init>(java.lang.String,java.lang.Class,java.util.Collection)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void println(char[])> ->_SINK_
<org.springframework.util.xml.DomContentHandler: void characters(char[],int,int)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: reactor.core.publisher.Mono handleMessage(org.springframework.messaging.handler.HandlerMethod,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate: void convertAndSend(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: void setGeneratedKeyName(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.stream.Stream queryForStream(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter: void onError(javax.websocket.Session,java.lang.Throwable)> ->_SINK_
<org.springframework.format.datetime.joda.YearMonthFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.web.util.pattern.LiteralPathElement: boolean matches(int,org.springframework.web.util.pattern.PathPattern$MatchingContext)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter: reactor.core.publisher.Mono lambda$handle$1(org.springframework.web.reactive.result.method.InvocableHandlerMethod,org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.result.method.'annotation'.InitBinderBindingContext)> ->_SINK_
<org.springframework.web.reactive.handler.AbstractUrlHandlerMapping: void registerHandler(java.lang.String[],java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener: void sendResponse(javax.jms.Session,javax.jms.Destination,javax.jms.Message)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: boolean equals(java.lang.Object)> ->_SINK_
<org.springframework.beans.factory.BeanCreationException: void printStackTrace(java.io.PrintWriter)> ->_SINK_
<org.springframework.format.datetime.standard.PeriodFormatter: java.lang.String print(java.time.Period,java.util.Locale)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addCorsMappings(org.springframework.web.servlet.config.'annotation'.CorsRegistry)> ->_SINK_
<org.springframework.context.support.ApplicationListenerDetector: void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class,java.lang.String)> ->_SINK_
<org.springframework.asm.MethodWriter: org.springframework.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.springframework.asm.TypePath,java.lang.String,boolean)> ->_SINK_
<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite: org.springframework.util.concurrent.ListenableFuture toListenableFuture(java.lang.Object,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.core.env.SimpleCommandLineArgsParser: org.springframework.core.env.CommandLineArgs parse(java.lang.String[])> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition: org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition combine(org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition)> ->_SINK_
<org.springframework.messaging.simp.SimpMessagingTemplate: void convertAndSendToUser(java.lang.String,java.lang.String,java.lang.Object,java.util.Map,org.springframework.messaging.core.MessagePostProcessor)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition: java.util.SortedSet parse(org.springframework.web.util.pattern.PathPatternParser,java.lang.String[])> ->_SINK_
<org.springframework.test.web.servlet.result.HandlerResultMatchers: org.springframework.test.web.servlet.ResultMatcher handlerType(java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: int execute(java.util.Map)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleHttpMediaTypeNotAcceptable(org.springframework.web.HttpMediaTypeNotAcceptableException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.format.datetime.standard.InstantFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequester: org.springframework.messaging.rsocket.RSocketRequester$RequestSpec metadata(java.lang.Object,org.springframework.util.MimeType)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.gradle.wrapper.Logger: void log(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfo: int compareTo(org.springframework.web.reactive.result.method.RequestMappingInfo,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: javax.jms.Message sendAndReceive(javax.jms.Destination,org.springframework.jms.core.MessageCreator)> ->_SINK_
<org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver: void contributeMethodArgument(org.springframework.core.MethodParameter,java.lang.Object,org.springframework.web.util.UriComponentsBuilder,java.util.Map,org.springframework.core.convert.ConversionService)> ->_SINK_
<org.springframework.messaging.simp.stomp.DefaultStompSession: void handleMessage(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(boolean)> ->_SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendBinaryMessage(org.springframework.web.socket.BinaryMessage)> ->_SINK_
<org.springframework.format.datetime.standard.TemporalAccessorPrinter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: reactor.core.publisher.Mono lambda$after$2(java.util.function.BiFunction,org.springframework.web.reactive.function.server.ServerRequest,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: java.lang.Number doExecuteAndReturnKey(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.context.index.processor.PackageInfoStereotypesProvider: java.util.Set getStereotypes(javax.lang.model.element.Element)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map call(org.springframework.jdbc.core.CallableStatementCreator,java.util.List)> ->_SINK_
<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.core.convert.support.ZonedDateTimeToCalendarConverter: java.util.Calendar convert(java.time.ZonedDateTime)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler,java.lang.Object[])> ->_SINK_
<org.springframework.transaction.reactive.TransactionalOperatorImpl: reactor.core.publisher.Mono transactional(reactor.core.publisher.Mono)> ->_SINK_
<org.gradle.wrapper.GradleWrapperMain: void main(java.lang.String[])> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.io.Serializable save(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder onError(java.util.function.Predicate,java.util.function.BiFunction)> ->_SINK_
<org.springframework.web.reactive.result.view.RedirectView: reactor.core.publisher.Mono renderInternal(java.util.Map,org.springframework.http.MediaType,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.remoting.jaxws.LocalJaxWsServiceFactory: void setServiceFeatures(javax.xml.ws.WebServiceFeature[])> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: void PATCH(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: java.util.List parseDocument(org.springframework.core.io.Resource,org.w3c.dom.Document,java.util.List)> ->_SINK_
<org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation: javax.cache.'annotation'.CacheInvocationParameter[] getKeyParameters(java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcCall: java.util.Map execute(java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object execute(java.lang.String,java.util.Map,org.springframework.jdbc.core.PreparedStatementCallback)> ->_SINK_
<org.springframework.jdbc.core.metadata.DerbyTableMetaDataProvider: void initializeWithMetaData(java.sql.DatabaseMetaData)> ->_SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.String)> ->_SINK_
<org.springframework.scripting.config.ScriptBeanDefinitionParser: void <init>(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder POST(java.lang.String,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.stream.Stream lambda$queryForStream$1(org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.RowMapper,java.sql.PreparedStatement)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[],int[],java.lang.Class)> ->_SINK_
<org.springframework.jdbc.datasource.init.UncategorizedScriptException: void <init>(java.lang.String)> ->_SINK_
<org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser: org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)> ->_SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcInsert: int execute(org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: int getTextCharacters(int,char[],int,int)> ->_SINK_
<org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource: int getSqlType(java.lang.String)> ->_SINK_
<org.springframework.test.web.ModelAndViewAssert: void assertModelAttributeValue(org.springframework.web.servlet.ModelAndView,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void doSend(java.lang.Object,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PUT(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.orm.hibernate5.ConfigurableJtaPlatform: java.lang.Object getTransactionIdentifier(javax.transaction.Transaction)> ->_SINK_
<org.springframework.web.server.session.CookieWebSessionIdResolver: java.util.List resolveSessionIds(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.core.testfixture.TestGroup: java.util.Set parse(java.lang.String)> ->_SINK_
<org.springframework.messaging.rsocket.MetadataEncoder: org.springframework.messaging.rsocket.MetadataEncoder metadata(java.lang.Object,org.springframework.util.MimeType)> ->_SINK_
<org.springframework.web.servlet.mvc.condition.PatternsRequestCondition: void <init>(java.lang.String[],org.springframework.web.util.UrlPathHelper,org.springframework.util.PathMatcher,boolean)> ->_SINK_
<org.springframework.web.reactive.config.WebFluxConfigurationSupport: org.springframework.web.reactive.result.view.ViewResolutionResultHandler viewResolutionResultHandler(org.springframework.core.ReactiveAdapterRegistry,org.springframework.web.reactive.accept.RequestedContentTypeResolver)> ->_SINK_
<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping: reactor.core.publisher.Mono getHandlerInternal(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: reactor.core.publisher.Mono handleResult(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.util.xml.AbstractXMLStreamReader: boolean isEndElement()> ->_SINK_
<org.springframework.jms.core.JmsMessagingTemplate: void send(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.r2dbc.core.NamedParameterUtils: org.springframework.r2dbc.core.ParsedSql parseSqlStatement(java.lang.String)> ->_SINK_
<org.springframework.web.server.adapter.WebHttpHandlerBuilder: org.springframework.web.server.adapter.WebHttpHandlerBuilder webHandler(org.springframework.web.server.WebHandler)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void charactersInternal(java.lang.String)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void jaxb2Encoder(org.springframework.core.codec.Encoder)> ->_SINK_
<org.springframework.r2dbc.core.ConnectionFunction: java.lang.Object apply(io.r2dbc.spi.Connection)> ->_SINK_
<org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter: void beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.util.MimeTypeUtils: org.springframework.util.MimeType parseMimeType(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.CallableMethodReturnValueHandler: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor: void setExceptionHandler(org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)> ->_SINK_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference registerRequestHandler(org.w3c.dom.Element,org.springframework.beans.factory.config.RuntimeBeanReference,org.springframework.beans.factory.xml.ParserContext,java.lang.Object)> ->_SINK_
<org.springframework.context.index.processor.TypeHelper: java.lang.String getType(javax.lang.model.type.TypeMirror)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory: org.springframework.jdbc.datasource.SimpleDriverDataSource access$000(org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession: reactor.core.publisher.Mono close(org.springframework.web.reactive.socket.CloseStatus)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: void update(java.lang.String,java.lang.Object,org.hibernate.LockMode)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler: void setReturnValueHandlerConfigurer(org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: void add(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: char getChar(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: reactor.core.publisher.Mono invokeHandler(org.springframework.web.server.ServerWebExchange,java.lang.Object)> ->_SINK_
<org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List executeByNamedParam(java.util.Map,java.util.Map)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void <init>(org.springframework.core.type.classreading.MetadataReader,java.lang.String)> ->_SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: boolean isWrapperFor(java.lang.Class)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder: org.springframework.web.reactive.function.server.HandlerStrategies$Builder localeContextResolver(org.springframework.web.server.i18n.LocaleContextResolver)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestAttributeMethodArgumentResolver: void handleMissingValue(java.lang.String,org.springframework.core.MethodParameter)> ->_SINK_
<org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy: void unregisterTyrusEndpoint(org.glassfish.tyrus.core.TyrusWebSocketEngine,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.datasource.init.ScriptParseException: void <init>(java.lang.String,org.springframework.core.io.support.EncodedResource,java.lang.Throwable)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotations: java.util.stream.Stream stream(java.lang.Class)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate or(org.springframework.web.servlet.function.RequestPredicate,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.ConnectionCallback)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: void addAll(java.lang.Object,java.util.List)> ->_SINK_
<org.springframework.mock.jndi.SimpleNamingContext: javax.naming.NameParser getNameParser(java.lang.String)> ->_SINK_
<org.springframework.http.ReadOnlyHttpHeaders: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.r2dbc.core.NamedParameterExpander: org.springframework.r2dbc.core.PreparedOperation expand(java.lang.String,org.springframework.r2dbc.core.binding.BindMarkersFactory,org.springframework.r2dbc.core.BindParameterSource)> ->_SINK_
<org.springframework.web.reactive.result.view.DefaultRenderingBuilder: org.springframework.web.reactive.result.view.DefaultRenderingBuilder modelAttribute(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.core.convert.support.ArrayToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.format.datetime.joda.LocalDateTimeParser: org.joda.time.LocalDateTime parse(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerRequestBuilder: org.springframework.web.reactive.function.server.ServerRequest$Builder body(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler: reactor.core.publisher.Mono handleResult(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.jca.cci.object.SimpleRecordOperation: javax.resource.cci.Record execute(javax.resource.cci.Record)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler: void lambda$cleanupAttributes$2(org.springframework.web.server.WebSession,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.resource.DefaultResourceResolverChain: reactor.core.publisher.Mono resolveUrlPath(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],org.springframework.web.context.request.WebRequestInterceptor)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder resources(java.lang.String,org.springframework.core.io.Resource)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.util.Set parseSetElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)> ->_SINK_
<org.springframework.core.log.CompositeLog: void fatal(java.lang.Object,java.lang.Throwable)> ->_SINK_
<org.springframework.web.reactive.result.method.InvocableHandlerMethod: reactor.core.publisher.Mono invoke(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.BindingContext,java.lang.Object[])> ->_SINK_
<org.springframework.beans.factory.support.ConstructorResolver: void resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(int)> ->_SINK_
<org.springframework.web.reactive.result.view.ViewResolutionResultHandler: boolean supports(org.springframework.web.reactive.HandlerResult)> ->_SINK_
<org.springframework.web.reactive.function.server.ResourceHandlerFunction: reactor.core.publisher.Mono handle(org.springframework.web.reactive.function.server.ServerRequest)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder addScript(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.SseEmitter: void send(java.lang.Object)> ->_SINK_
<org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener: void handleListenerException(java.lang.Throwable)> ->_SINK_
<org.springframework.web.reactive.resource.CachingResourceTransformer: reactor.core.publisher.Mono transform(org.springframework.web.server.ServerWebExchange,org.springframework.core.io.Resource,org.springframework.web.reactive.resource.ResourceTransformerChain)> ->_SINK_
<org.springframework.web.servlet.resource.CachingResourceResolver: org.springframework.core.io.Resource resolveResourceInternal(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void println(boolean)> ->_SINK_
<org.springframework.context.annotation.ConflictingBeanDefinitionException: void <init>(java.lang.String)> ->_SINK_
<org.springframework.jdbc.datasource.lookup.MapDataSourceLookup: javax.sql.DataSource getDataSource(java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(float)> ->_SINK_
<org.springframework.test.web.reactive.server.HeaderAssertions: org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec values(java.lang.String,org.hamcrest.Matcher)> ->_SINK_
<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler: org.springframework.messaging.handler.invocation.InvocableHandlerMethod getExceptionHandlerMethod(org.springframework.messaging.handler.HandlerMethod,java.lang.Exception)> ->_SINK_
<org.springframework.asm.RecordComponentWriter: void visitAttribute(org.springframework.asm.Attribute)> ->_SINK_
<org.springframework.cglib.proxy.MixinBeanEmitter: void <init>(org.springframework.asm.ClassVisitor,java.lang.String,java.lang.Class[])> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctions: org.springframework.web.server.WebHandler toWebHandler(org.springframework.web.reactive.function.server.RouterFunction)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.'annotation'.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)> ->_SINK_
<org.springframework.web.reactive.function.server.ToStringVisitor: void 'unknown'(org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.reactive.resource.PathResourceResolver: reactor.core.publisher.Mono resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.reactive.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.web.multipart.commons.CommonsMultipartResolver: org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult parseRequest(javax.servlet.http.HttpServletRequest)> ->_SINK_
<org.springframework.context.index.processor.IndexedStereotypesProvider: java.util.Set getStereotypes(javax.lang.model.element.Element)> ->_SINK_
<org.springframework.jca.cci.object.MappingRecordOperation: java.lang.Object execute(java.lang.Object)> ->_SINK_
<org.springframework.http.codec.multipart.DefaultParts: org.springframework.http.codec.multipart.FormFieldPart formFieldPart(org.springframework.http.HttpHeaders,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.incrementer.Db2MainframeMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: org.springframework.jdbc.core.namedparam.ParsedSql parseSqlStatement(java.lang.String)> ->_SINK_
<org.springframework.util.xml.DomContentHandler: void processingInstruction(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.client.DefaultWebClientBuilder: org.springframework.web.reactive.function.client.WebClient$Builder baseUrl(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder PUT(org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.reactive.function.server.DefaultServerRequest: java.lang.Object body(org.springframework.web.reactive.function.BodyExtractor)> ->_SINK_
<org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitSource(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.JdbcOperationsExtensionsKt: java.lang.Object queryForObject(org.springframework.jdbc.core.JdbcOperations,java.lang.String,java.lang.Object[],kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,java.util.Date,long)> ->_SINK_
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> ->_SINK_
<org.springframework.util.xml.XMLEventStreamWriter: void writeEmptyElement(java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(java.lang.Object)> ->_SINK_
<org.springframework.test.web.servlet.result.PrintingResultHandler: void printResponse(org.springframework.mock.web.MockHttpServletResponse)> ->_SINK_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.lang.String createInsertString(java.lang.String[])> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleServletRequestBindingException(org.springframework.web.bind.ServletRequestBindingException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.web.reactive.result.view.DefaultRenderingBuilder: org.springframework.web.reactive.result.view.DefaultRenderingBuilder header(java.lang.String,java.lang.String[])> ->_SINK_
<org.springframework.r2dbc.core.MapBindParameterSource: org.springframework.r2dbc.core.MapBindParameterSource addValue(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: java.time.temporal.ValueRange parseRange(java.lang.String,org.springframework.scheduling.support.CronField$Type)> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionBuilder: org.springframework.web.servlet.function.RouterFunctions$Builder HEAD(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void println(boolean)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String substituteNamedParameters(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: byte getByte(java.lang.String)> ->_SINK_
<org.springframework.util.SystemPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String,boolean)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void println(java.lang.Object)> ->_SINK_
<org.springframework.web.method.support.CompositeUriComponentsContributor: void contributeMethodArgument(org.springframework.core.MethodParameter,java.lang.Object,org.springframework.web.util.UriComponentsBuilder,java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcCall: java.util.Map doExecute(java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: void HEAD(java.lang.String,org.springframework.web.servlet.function.RequestPredicate,kotlin.jvm.functions.Function1)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(java.lang.String,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.support.KeyHolder)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleStartElement(javax.xml.stream.events.StartElement)> ->_SINK_
<org.springframework.scheduling.concurrent.ScheduledExecutorTask: void setRunnable(java.lang.Runnable)> ->_SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,java.lang.String)> ->_SINK_
<org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.reflect.Constructor,java.lang.Object[])> ->_SINK_
<org.springframework.web.bind.support.WebRequestDataBinder: void bind(org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.'annotation'.MergedAnnotation getAnnotation(java.lang.String,java.lang.Class)> ->_SINK_
<org.springframework.scheduling.support.CronField: org.springframework.scheduling.support.CronField parseSeconds(java.lang.String)> ->_SINK_
<org.springframework.core.annotation.MissingMergedAnnotation: java.util.Map asMap(org.springframework.core.'annotation'.MergedAnnotation$Adapt[])> ->_SINK_
<org.springframework.web.servlet.function.RouterFunctionDsl: org.springframework.web.servlet.function.RequestPredicate or(java.lang.String,org.springframework.web.servlet.function.RequestPredicate)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitMaxs(int,int)> ->_SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.simple.AbstractJdbcInsert: void setGeneratedKeyNames(java.lang.String[])> ->_SINK_
<org.springframework.messaging.support.AbstractMessageChannel: boolean send(org.springframework.messaging.Message,long)> ->_SINK_
<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void parseQualifierElements(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition)> ->_SINK_
<org.springframework.format.datetime.standard.YearFormatter: java.lang.String print(java.lang.Object,java.util.Locale)> ->_SINK_
<org.springframework.test.web.client.MockRestServiceServer: org.springframework.test.web.client.ResponseActions expect(org.springframework.test.web.client.RequestMatcher)> ->_SINK_
<org.springframework.scheduling.concurrent.ReschedulingRunnable: int compareTo(java.util.concurrent.Delayed)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: reactor.core.publisher.Mono lambda$onError$6(java.lang.Class,java.util.function.BiFunction,org.springframework.web.reactive.function.server.ServerRequest,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void kotlinSerializationJsonEncoder(org.springframework.core.codec.Encoder)> ->_SINK_
<org.springframework.web.servlet.mvc.WebContentInterceptor: void postHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.web.servlet.ModelAndView)> ->_SINK_
<org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig: void <init>(java.lang.String,javax.websocket.Endpoint)> ->_SINK_
<org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler: org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver createExceptionHandlerMethodResolverFor(java.lang.Class)> ->_SINK_
<org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler: void handleMessage(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService: void handleRawWebSocketRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.jdbc.datasource.init.ScriptUtils: void splitSqlScript(org.springframework.core.io.support.EncodedResource,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture getForEntity(java.lang.String,java.lang.Class,java.util.Map)> ->_SINK_
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void extendHandlerExceptionResolvers(java.util.List)> ->_SINK_
<org.springframework.web.socket.sockjs.support.AbstractSockJsService: void handleRequest(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,java.lang.String,org.springframework.web.socket.WebSocketHandler)> ->_SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.jdbc.support.SQLErrorCodes getErrorCodes(java.lang.String)> ->_SINK_
<org.springframework.jms.connection.CachedMessageProducer: void send(javax.jms.Message)> ->_SINK_
<org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional synthesize(java.util.function.Predicate)> ->_SINK_
<org.springframework.core.task.support.ConcurrentExecutorAdapter: void execute(java.lang.Runnable)> ->_SINK_
<org.springframework.test.web.reactive.server.XpathAssertions: org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec number(org.hamcrest.Matcher)> ->_SINK_
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: void releaseSavepoint(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler: void <init>(org.springframework.core.ReactiveAdapterRegistry,org.springframework.core.task.TaskExecutor,org.springframework.web.accept.ContentNegotiationManager)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequesterBuilder: org.springframework.messaging.rsocket.RSocketRequester tcp(java.lang.String,int)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver: void handleResolvedValue(java.lang.Object,java.lang.String,org.springframework.core.MethodParameter,org.springframework.ui.Model,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.http.codec.xml.JaxbContextContainer: javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class)> ->_SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: void <init>(javax.sql.DataSource,java.lang.String,int[])> ->_SINK_
<org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt: java.lang.Object sendAndAwait(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec,kotlin.coroutines.Continuation)> ->_SINK_
<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor: void preHandle(org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: java.lang.Object execute(java.lang.String,org.springframework.jms.core.ProducerCallback)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.SessionAttributeMethodArgumentResolver: java.lang.Object resolveName(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(char)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: org.reactivestreams.Publisher lambda$handle$0(org.springframework.web.server.ServerWebExchange,org.springframework.web.reactive.HandlerMapping)> ->_SINK_
<org.springframework.web.reactive.function.server.CoRouterFunctionDsl: void PUT(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,kotlin.jvm.functions.Function2)> ->_SINK_
<org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurerFactory: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer getConfigurer(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType)> ->_SINK_
<org.springframework.jdbc.core.metadata.TableMetaDataContext: java.lang.String getSimulationQueryForGetGeneratedKey(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.servlet.mvc.method.'annotation'.ServletInvocableHandlerMethod createInvocableHandlerMethod(org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.web.servlet.resource.WebJarsResourceResolver: java.lang.String resolveUrlPathInternal(java.lang.String,java.util.List,org.springframework.web.servlet.resource.ResourceResolverChain)> ->_SINK_
<org.springframework.http.MediaType: java.util.List parseMediaTypes(java.lang.String)> ->_SINK_
<org.springframework.util.xml.StaxUtils: org.xml.sax.ContentHandler createContentHandler(javax.xml.stream.XMLStreamWriter)> ->_SINK_
<org.springframework.mock.web.MockJspWriter: void print(char[])> ->_SINK_
<org.springframework.http.codec.support.BaseDefaultCodecs: void protobufDecoder(org.springframework.core.codec.Decoder)> ->_SINK_
<org.springframework.context.annotation.ConfigurationClass: void validate(org.springframework.beans.factory.parsing.ProblemReporter)> ->_SINK_
<org.springframework.web.method.annotation.SessionAttributesHandler: void lambda$storeAttributes$0(org.springframework.web.context.request.WebRequest,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.format.datetime.joda.YearMonthFormatter: java.lang.String print(org.joda.time.YearMonth,java.util.Locale)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler: org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession createSession(java.lang.String,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void handleTransportError(org.springframework.web.socket.WebSocketSession,java.lang.Throwable)> ->_SINK_
<org.springframework.core.log.CompositeLog: void info(java.lang.Object)> ->_SINK_
<org.springframework.core.annotation.TypeMappedAnnotation: boolean hasDefaultValue(java.lang.String)> ->_SINK_
<org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo: void init(org.springframework.instrument.classloading.LoadTimeWeaver)> ->_SINK_
<org.springframework.scheduling.support.QuartzCronField: org.springframework.scheduling.support.QuartzCronField parseDaysOfMonth(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.SqlReturnResultSet: void <init>(java.lang.String,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.jdbc.core.SqlReturnResultSet: void <init>(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void handleMessage(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.WebSocketMessage)> ->_SINK_
<org.springframework.http.server.reactive.NettyHeadersAdapter: void addAll(java.lang.String,java.util.List)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object query(java.lang.String,java.util.Map,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.http.codec.support.BaseCodecConfigurer: void registerDefaults(boolean)> ->_SINK_
<org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor: boolean beforeHandshake(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,java.util.Map)> ->_SINK_
<org.springframework.http.client.reactive.NettyHeadersAdapter: void add(java.lang.Object,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.function.ErrorHandlingServerResponse: void addErrorHandler(java.util.function.Predicate,java.util.function.BiFunction)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: void registerExceptionHandlerAdvice(org.springframework.messaging.handler.MessagingAdviceBean,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver)> ->_SINK_
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <init>(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleHttpMessageNotWritable(org.springframework.http.converter.HttpMessageNotWritableException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.util.xml.StaxEventXMLReader: void handleEntityDeclaration(javax.xml.stream.events.EntityDeclaration)> ->_SINK_
<org.springframework.web.reactive.DispatcherHandler: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)> ->_SINK_
<org.springframework.web.context.request.async.DeferredResultInterceptorChain: void triggerAfterCompletion(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: boolean containsKey(java.lang.Object)> ->_SINK_
<org.apache.commons.logging.LogAdapter: org.apache.commons.logging.Log createLog(java.lang.String)> ->_SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.core.type.classreading.MergedAnnotationReadingVisitor: void visitEnum(java.lang.String,java.lang.String,java.util.function.Consumer)> ->_SINK_
<org.springframework.util.xml.AbstractXMLReader: java.lang.Object getProperty(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler: void lambda$storeAttributes$1(org.springframework.web.server.WebSession,java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void ignorableWhitespaceInternal(java.lang.String)> ->_SINK_
<org.springframework.objenesis.instantiator.util.ClassUtils: java.lang.String classNameToInternalClassName(java.lang.String)> ->_SINK_
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureAsyncSupport(org.springframework.web.servlet.config.'annotation'.AsyncSupportConfigurer)> ->_SINK_
<org.springframework.web.servlet.resource.DefaultResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)> ->_SINK_
<org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter: void onClose(javax.websocket.Session,javax.websocket.CloseReason)> ->_SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.ResultSetExtractor)> ->_SINK_
<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.format.Printer getPrinter(java.lang.'annotation'.Annotation,java.lang.Class)> ->_SINK_
<org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider: boolean byPassReturnParameter(java.lang.String)> ->_SINK_
<org.springframework.http.server.reactive.TomcatHeadersAdapter: void putAll(java.util.Map)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.messaging.simp.stomp.DefaultStompSession: void handleFailure(java.lang.Throwable)> ->_SINK_
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.asm.MethodWriter: void visitAnnotableParameterCount(int,boolean)> ->_SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.math.BigDecimal getBigDecimal(int)> ->_SINK_
<org.springframework.cache.interceptor.CacheEvaluationContext: void addUnavailableVariable(java.lang.String)> ->_SINK_
<org.springframework.jdbc.config.EmbeddedDatabaseBeanDefinitionParser: org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: void preProcess(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
<org.springframework.web.socket.client.standard.EndpointConnectionManager: void <init>(javax.websocket.Endpoint,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleAsyncRequestTimeoutException(org.springframework.web.context.request.async.AsyncRequestTimeoutException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: org.springframework.http.ResponseEntity exchange$default(org.springframework.web.client.RestOperations,java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.util.Map,int,java.lang.Object)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.support.KeyHolder)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.jms.config.AbstractListenerContainerParser: org.springframework.beans.MutablePropertyValues parseCommonContainerProperties(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter: void handleTransportError(org.springframework.messaging.simp.stomp.StompSession,java.lang.Throwable)> ->_SINK_
<org.springframework.http.server.reactive.UndertowHeadersAdapter: java.util.List remove(java.lang.Object)> ->_SINK_
<org.springframework.asm.SymbolTable: int addConstantUtf8(java.lang.String)> ->_SINK_
<org.springframework.web.cors.reactive.DefaultCorsProcessor: boolean process(org.springframework.web.cors.CorsConfiguration,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.scheduling.support.BitsCronField: org.springframework.scheduling.support.BitsCronField parseSeconds(java.lang.String)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionDsl: org.springframework.web.reactive.function.server.RequestPredicate or(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate)> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: org.springframework.http.ResponseEntity postForEntity$default(org.springframework.web.client.RestOperations,java.lang.String,java.lang.Object,java.lang.Object[],int,java.lang.Object)> ->_SINK_
<org.springframework.jms.core.JmsTemplate: void send(org.springframework.jms.core.MessageCreator)> ->_SINK_
<org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder: org.springframework.test.web.reactive.server.WebTestClient$Builder apply(org.springframework.test.web.reactive.server.WebTestClientConfigurer)> ->_SINK_
<org.springframework.web.server.adapter.WebHttpHandlerBuilder: org.springframework.web.server.adapter.WebHttpHandlerBuilder httpHandlerDecorator(java.util.function.Function)> ->_SINK_
<org.springframework.messaging.rsocket.DefaultRSocketRequester: org.springframework.messaging.rsocket.RSocketRequester$RequestSpec route(java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture delete(java.lang.String,java.util.Map)> ->_SINK_
<org.springframework.messaging.core.AbstractMessageSendingTemplate: void send(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.web.server.handler.ResponseStatusExceptionHandler: reactor.core.publisher.Mono handle(org.springframework.web.server.ServerWebExchange,java.lang.Throwable)> ->_SINK_
<org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> ->_SINK_
<org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor: java.lang.Object getEnumValue(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.bind.ServletRequestUtils: long[] getRequiredLongParameters(javax.servlet.ServletRequest,java.lang.String)> ->_SINK_
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void setProtocolHandlers(java.util.List)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder resources(java.lang.String,org.springframework.core.io.Resource)> ->_SINK_
<org.springframework.messaging.handler.invocation.reactive.InvocableHelper: reactor.core.publisher.Mono lambda$handleMessage$1(org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod,org.springframework.messaging.Message,java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: org.springframework.web.method.'annotation'.SessionAttributesHandler getSessionAttributesHandler(org.springframework.web.method.HandlerMethod)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(java.lang.String)> ->_SINK_
<org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy: org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest,java.lang.String)> ->_SINK_
<org.springframework.web.servlet.view.UrlBasedViewResolver: boolean canHandle(java.lang.String,java.util.Locale)> ->_SINK_
<org.springframework.messaging.handler.annotation.support.AbstractNamedValueMethodArgumentResolver: void handleResolvedValue(java.lang.Object,java.lang.String,org.springframework.core.MethodParameter,org.springframework.messaging.Message)> ->_SINK_
<org.springframework.core.convert.support.NumberToNumberConverterFactory: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void println(long)> ->_SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.RowCallbackHandler)> ->_SINK_
<org.springframework.http.server.reactive.ReactorServerHttpResponse: reactor.core.publisher.Mono writeWithInternal(org.reactivestreams.Publisher)> ->_SINK_
<org.springframework.http.client.reactive.JettyHeadersAdapter: boolean containsKey(java.lang.Object)> ->_SINK_
<org.springframework.web.servlet.mvc.method.annotation.SseEmitter: void send(org.springframework.web.servlet.mvc.method.'annotation'.SseEmitter$SseEventBuilder)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockJspWriter: void print(boolean)> ->_SINK_
<org.springframework.orm.hibernate5.HibernateTemplate: java.util.List findByNamedQueryAndValueBean(java.lang.String,java.lang.Object)> ->_SINK_
<org.springframework.web.context.request.async.WebAsyncManager: void setAsyncWebRequest(org.springframework.web.context.request.async.AsyncWebRequest)> ->_SINK_
<org.springframework.format.datetime.standard.YearFormatter: java.lang.String print(java.time.Year,java.util.Locale)> ->_SINK_
<org.springframework.web.cors.DefaultCorsProcessor: boolean processRequest(org.springframework.web.cors.CorsConfiguration,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> ->_SINK_
<org.springframework.util.xml.StaxStreamHandler: void startEntity(java.lang.String)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void print(float)> ->_SINK_
<org.springframework.mock.web.MockBodyContent: void println(float)> ->_SINK_
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)> ->_SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter)> ->_SINK_
<org.springframework.web.reactive.function.server.RouterFunctionBuilder: org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate,org.springframework.web.reactive.function.server.HandlerFunction)> ->_SINK_
<org.springframework.web.client.AsyncRestTemplate: org.springframework.util.concurrent.ListenableFuture postForEntity(java.lang.String,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])> ->_SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowMapper)> ->_SINK_
<org.springframework.web.servlet.function.DefaultServerRequestBuilder: org.springframework.web.servlet.function.ServerRequest$Builder body(java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.servlet.MockBodyContent: void print(long)> ->_SINK_
<org.springframework.web.client.RestTemplate: java.lang.Object doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: boolean handleError(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult,java.lang.Throwable)> ->_SINK_
<org.springframework.context.index.processor.SortedProperties: void store(java.io.Writer,java.lang.String)> ->_SINK_
<org.springframework.web.testfixture.http.server.reactive.bootstrap.AbstractHttpServer: void registerHttpHandler(java.lang.String,org.springframework.http.server.reactive.HttpHandler)> ->_SINK_
<org.springframework.core.task.support.TaskExecutorAdapter: void execute(java.lang.Runnable,long)> ->_SINK_
<org.springframework.web.client.RestOperationsExtensionsKt: java.lang.Object postForObject$default(org.springframework.web.client.RestOperations,java.lang.String,java.lang.Object,java.util.Map,int,java.lang.Object)> ->_SINK_
<org.springframework.cglib.util.ParallelSorterEmitter: void <init>(org.springframework.asm.ClassVisitor,java.lang.String,java.lang.Object[])> ->_SINK_
<org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder: org.springframework.http.server.reactive.ServerHttpRequest$Builder contextPath(java.lang.String)> ->_SINK_
<org.springframework.messaging.core.AbstractMessagingTemplate: org.springframework.messaging.Message sendAndReceive(org.springframework.messaging.Message)> ->_SINK_
<org.springframework.orm.hibernate5.support.AsyncRequestInterceptor: boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest,org.springframework.web.context.request.async.DeferredResult)> ->_SINK_
<org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver: reactor.core.publisher.Mono resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.reactive.BindingContext,org.springframework.web.server.ServerWebExchange)> ->_SINK_
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()> ->_SINK_
<org.springframework.http.client.reactive.HttpComponentsHeadersAdapter: void add(java.lang.String,java.lang.String)> ->_SINK_
<org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler: void handleRequestInternal(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession)> ->_SINK_
<org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter: void onMessage(javax.jms.Message,javax.jms.Session)> ->_SINK_
<org.springframework.core.convert.support.ArrayToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)> ->_SINK_
<org.springframework.transaction.annotation.SpringTransactionAnnotationParser: org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(org.springframework.transaction.'annotation'.Transactional)> ->_SINK_
<org.springframework.orm.jpa.support.AsyncRequestInterceptor: java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest,java.util.concurrent.Callable)> ->_SINK_
