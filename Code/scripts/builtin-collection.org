* Java Builtin Collection Methods

** BeanContext

   - [ ] InputStream BeanContext.getResourceAsStream(String name, BeanContextChild bcc)
   - [ ] Object BeanContext.instantiateChild(String beanName)
   - [ ] URL BeanContext.getResource(String name, BeanContextChild bcc)
   - [X] void BeanContext.addBeanContextMembershipListener(BeanContextMembershipListener bcml)
   - [X] void BeanContext.removeBeanContextMembershipListener(BeanContextMembershipListener bcml)

** BeanContextServices

   - [ ] Iterator BeanContextServices.getCurrentServiceClasses()
   - [ ] Iterator BeanContextServices.getCurrentServiceSelectors(Class serviceClass)
   - [ ] Object BeanContextServices.getService(BeanContextChild child, Object requestor, Class serviceClass, Object serviceSelector, BeanContextServiceRevokedListener bcsrl)
   - [X] boolean BeanContextServices.addService(Class serviceClass, BeanContextServiceProvider serviceProvider)
   - [ ] boolean BeanContextServices.hasService(Class serviceClass)
   - [X] void BeanContextServices.addBeanContextServicesListener(BeanContextServicesListener bcsl)
   - [ ] void BeanContextServices.releaseService(BeanContextChild child, Object requestor, Object service)
   - [X] void BeanContextServices.removeBeanContextServicesListener(BeanContextServicesListener bcsl)
   - [ ] void BeanContextServices.revokeService(Class serviceClass, BeanContextServiceProvider serviceProvider, boolean revokeCurrentServicesNow)

** BlockingDeque

   - [ ] E BlockingDeque.element()
   - [ ] E BlockingDeque.peek()
   - [ ] E BlockingDeque.poll()
   - [ ] E BlockingDeque.poll(long timeout, TimeUnit unit)
   - [ ] E BlockingDeque.pollFirst(long timeout, TimeUnit unit)
   - [ ] E BlockingDeque.pollLast(long timeout, TimeUnit unit)
   - [ ] E BlockingDeque.remove()
   - [ ] E BlockingDeque.take()
   - [ ] E BlockingDeque.takeFirst()
   - [ ] E BlockingDeque.takeLast()
   - [ ] Iterator<E> BlockingDeque.iterator()
   - [X] boolean BlockingDeque.add(E e)
   - [ ] boolean BlockingDeque.contains(Object o)
   - [X] boolean BlockingDeque.offer(E e)
   - [X] boolean BlockingDeque.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean BlockingDeque.offerFirst(E e)
   - [X] boolean BlockingDeque.offerFirst(E e, long timeout, TimeUnit unit)
   - [X] boolean BlockingDeque.offerLast(E e)
   - [X] boolean BlockingDeque.offerLast(E e, long timeout, TimeUnit unit)
   - [X] boolean BlockingDeque.remove(Object o)
   - [X] boolean BlockingDeque.removeFirstOccurrence(Object o)
   - [X] boolean BlockingDeque.removeLastOccurrence(Object o)
   - [ ] int BlockingDeque.size()
   - [X] void BlockingDeque.addFirst(E e)
   - [X] void BlockingDeque.addLast(E e)
   - [X] void BlockingDeque.push(E e)
   - [X] void BlockingDeque.put(E e)
   - [X] void BlockingDeque.putFirst(E e)
   - [X] void BlockingDeque.putLast(E e)

** BlockingQueue

   - [ ] E BlockingQueue.poll(long timeout, TimeUnit unit)
   - [ ] E BlockingQueue.take()
   - [X] boolean BlockingQueue.add(E e)
   - [ ] boolean BlockingQueue.contains(Object o)
   - [X] boolean BlockingQueue.offer(E e)
   - [X] boolean BlockingQueue.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean BlockingQueue.remove(Object o)
   - [X] int BlockingQueue.drainTo(Collection<? super E> c)
   - [X] int BlockingQueue.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int BlockingQueue.remainingCapacity()
   - [X] void BlockingQueue.put(E e)

** Deque

   - [ ] E Deque.element()
   - [ ] E Deque.getFirst()
   - [ ] E Deque.getLast()
   - [ ] E Deque.peek()
   - [ ] E Deque.peekFirst()
   - [ ] E Deque.peekLast()
   - [ ] E Deque.poll()
   - [ ] E Deque.pollFirst()
   - [ ] E Deque.pollLast()
   - [ ] E Deque.pop()
   - [ ] E Deque.remove()
   - [ ] E Deque.removeFirst()
   - [ ] E Deque.removeLast()
   - [ ] Iterator<E> Deque.descendingIterator()
   - [ ] Iterator<E> Deque.iterator()
   - [X] boolean Deque.add(E e)
   - [ ] boolean Deque.contains(Object o)
   - [X] boolean Deque.offer(E e)
   - [X] boolean Deque.offerFirst(E e)
   - [X] boolean Deque.offerLast(E e)
   - [X] boolean Deque.remove(Object o)
   - [X] boolean Deque.removeFirstOccurrence(Object o)
   - [X] boolean Deque.removeLastOccurrence(Object o)
   - [ ] int Deque.size()
   - [X] void Deque.addFirst(E e)
   - [X] void Deque.addLast(E e)
   - [X] void Deque.push(E e)

** List

   - [ ] <T> T[] List.toArray(T[] a)
   - [ ] E List.get(int index)
   - [ ] E List.remove(int index)
   - [ ] E List.set(int index, E element)
   - [ ] Iterator<E> List.iterator()
   - [ ] List<E> List.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> List.listIterator()
   - [ ] ListIterator<E> List.listIterator(int index)
   - [ ] Object[] List.toArray()
   - [X] boolean List.add(E e)
   - [X] boolean List.addAll(Collection<? extends E> c)
   - [X] boolean List.addAll(int index, Collection<? extends E> c)
   - [ ] boolean List.contains(Object o)
   - [ ] boolean List.containsAll(Collection<?> c)
   - [ ] boolean List.equals(Object o)
   - [ ] boolean List.isEmpty()
   - [X] boolean List.remove(Object o)
   - [X] boolean List.removeAll(Collection<?> c)
   - [X] boolean List.retainAll(Collection<?> c)
   - [ ] default Spliterator<E> List.spliterator()
   - [X] default void List.replaceAll(UnaryOperator<E> operator)
   - [X] default void List.sort(Comparator<? super E> c)
   - [ ] int List.hashCode()
   - [ ] int List.indexOf(Object o)
   - [ ] int List.lastIndexOf(Object o)
   - [ ] int List.size()
   - [X] void List.add(int index, E element)
   - [ ] void List.clear()

** NavigableSet

   - [ ] E NavigableSet.ceiling(E e)
   - [ ] E NavigableSet.floor(E e)
   - [ ] E NavigableSet.higher(E e)
   - [ ] E NavigableSet.lower(E e)
   - [ ] E NavigableSet.pollFirst()
   - [ ] E NavigableSet.pollLast()
   - [ ] Iterator<E> NavigableSet.descendingIterator()
   - [ ] Iterator<E> NavigableSet.iterator()
   - [ ] NavigableSet<E> NavigableSet.descendingSet()
   - [ ] NavigableSet<E> NavigableSet.headSet(E toElement, boolean inclusive)
   - [ ] NavigableSet<E> NavigableSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
   - [ ] NavigableSet<E> NavigableSet.tailSet(E fromElement, boolean inclusive)
   - [ ] SortedSet<E> NavigableSet.headSet(E toElement)
   - [ ] SortedSet<E> NavigableSet.subSet(E fromElement, E toElement)
   - [ ] SortedSet<E> NavigableSet.tailSet(E fromElement)

** Queue

   - [ ] E Queue.element()
   - [ ] E Queue.peek()
   - [ ] E Queue.poll()
   - [ ] E Queue.remove()
   - [X] boolean Queue.add(E e)
   - [X] boolean Queue.offer(E e)

** Set

   - [ ] <T> T[] Set.toArray(T[] a)
   - [ ] Iterator<E> Set.iterator()
   - [ ] Object[] Set.toArray()
   - [X] boolean Set.add(E e)
   - [X] boolean Set.addAll(Collection<? extends E> c)
   - [ ] boolean Set.contains(Object o)
   - [ ] boolean Set.containsAll(Collection<?> c)
   - [ ] boolean Set.equals(Object o)
   - [ ] boolean Set.isEmpty()
   - [X] boolean Set.remove(Object o)
   - [X] boolean Set.removeAll(Collection<?> c)
   - [X] boolean Set.retainAll(Collection<?> c)
   - [ ] default Spliterator<E> Set.spliterator()
   - [ ] int Set.hashCode()
   - [ ] int Set.size()
   - [ ] void Set.clear()

** SortedSet

   - [ ] Comparator<? super E> SortedSet.comparator()
   - [ ] E SortedSet.first()
   - [ ] E SortedSet.last()
   - [ ] SortedSet<E> SortedSet.headSet(E toElement)
   - [ ] SortedSet<E> SortedSet.subSet(E fromElement, E toElement)
   - [ ] SortedSet<E> SortedSet.tailSet(E fromElement)
   - [ ] default Spliterator<E> SortedSet.spliterator()

** TransferQueue

   - [ ] boolean TransferQueue.hasWaitingConsumer()
   - [ ] boolean TransferQueue.tryTransfer(E e)
   - [ ] boolean TransferQueue.tryTransfer(E e, long timeout, TimeUnit unit)
   - [ ] int TransferQueue.getWaitingConsumerCount()
   - [ ] void TransferQueue.transfer(E e)

** AbstractCollection

   - [ ] <T> T[] AbstractCollection.toArray(T[] a)
   - [ ] Object[] AbstractCollection.toArray()
   - [ ] String AbstractCollection.toString()
   - [ ] abstract Iterator<E> AbstractCollection.iterator()
   - [ ] abstract int AbstractCollection.size()
   - [X] boolean AbstractCollection.add(E e)
   - [X] boolean AbstractCollection.addAll(Collection<? extends E> c)
   - [ ] boolean AbstractCollection.contains(Object o)
   - [ ] boolean AbstractCollection.containsAll(Collection<?> c)
   - [ ] boolean AbstractCollection.isEmpty()
   - [X] boolean AbstractCollection.remove(Object o)
   - [X] boolean AbstractCollection.removeAll(Collection<?> c)
   - [X] boolean AbstractCollection.retainAll(Collection<?> c)
   - [ ] void AbstractCollection.clear()

** AbstractList

   - [ ] E AbstractList.remove(int index)
   - [ ] E AbstractList.set(int index, E element)
   - [ ] Iterator<E> AbstractList.iterator()
   - [ ] List<E> AbstractList.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> AbstractList.listIterator()
   - [ ] ListIterator<E> AbstractList.listIterator(int index)
   - [ ] abstract E AbstractList.get(int index)
   - [X] boolean AbstractList.add(E e)
   - [X] boolean AbstractList.addAll(int index, Collection<? extends E> c)
   - [ ] boolean AbstractList.equals(Object o)
   - [ ] int AbstractList.hashCode()
   - [ ] int AbstractList.indexOf(Object o)
   - [ ] int AbstractList.lastIndexOf(Object o)
   - [X] protected void AbstractList.removeRange(int fromIndex, int toIndex)
   - [X] void AbstractList.add(int index, E element)
   - [ ] void AbstractList.clear()

** AbstractQueue

   - [ ] E AbstractQueue.element()
   - [ ] E AbstractQueue.remove()
   - [X] boolean AbstractQueue.add(E e)
   - [X] boolean AbstractQueue.addAll(Collection<? extends E> c)
   - [ ] void AbstractQueue.clear()

** AbstractSequentialList

   - [ ] E AbstractSequentialList.get(int index)
   - [ ] E AbstractSequentialList.remove(int index)
   - [ ] E AbstractSequentialList.set(int index, E element)
   - [ ] Iterator<E> AbstractSequentialList.iterator()
   - [ ] abstract ListIterator<E> AbstractSequentialList.listIterator(int index)
   - [X] boolean AbstractSequentialList.addAll(int index, Collection<? extends E> c)
   - [X] void AbstractSequentialList.add(int index, E element)

** AbstractSet

   - [ ] boolean AbstractSet.equals(Object o)
   - [X] boolean AbstractSet.removeAll(Collection<?> c)
   - [ ] int AbstractSet.hashCode()

** ArrayBlockingQueue

   - [ ] <T> T[] ArrayBlockingQueue.toArray(T[] a)
   - [ ] E ArrayBlockingQueue.peek()
   - [ ] E ArrayBlockingQueue.poll()
   - [ ] E ArrayBlockingQueue.poll(long timeout, TimeUnit unit)
   - [ ] E ArrayBlockingQueue.take()
   - [ ] Iterator<E> ArrayBlockingQueue.iterator()
   - [ ] Object[] ArrayBlockingQueue.toArray()
   - [ ] Spliterator<E> ArrayBlockingQueue.spliterator()
   - [ ] String ArrayBlockingQueue.toString()
   - [X] boolean ArrayBlockingQueue.add(E e)
   - [ ] boolean ArrayBlockingQueue.contains(Object o)
   - [X] boolean ArrayBlockingQueue.offer(E e)
   - [X] boolean ArrayBlockingQueue.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean ArrayBlockingQueue.remove(Object o)
   - [X] int ArrayBlockingQueue.drainTo(Collection<? super E> c)
   - [X] int ArrayBlockingQueue.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int ArrayBlockingQueue.remainingCapacity()
   - [ ] int ArrayBlockingQueue.size()
   - [X] void ArrayBlockingQueue.clear()
   - [X] void ArrayBlockingQueue.put(E e)

** ArrayDeque

   - [ ] <T> T[] ArrayDeque.toArray(T[] a)
   - [ ] ArrayDeque<E> ArrayDeque.clone()
   - [ ] E ArrayDeque.element()
   - [ ] E ArrayDeque.getFirst()
   - [ ] E ArrayDeque.getLast()
   - [ ] E ArrayDeque.peek()
   - [ ] E ArrayDeque.peekFirst()
   - [ ] E ArrayDeque.peekLast()
   - [ ] E ArrayDeque.poll()
   - [ ] E ArrayDeque.pollFirst()
   - [ ] E ArrayDeque.pollLast()
   - [ ] E ArrayDeque.pop()
   - [ ] E ArrayDeque.remove()
   - [ ] E ArrayDeque.removeFirst()
   - [ ] E ArrayDeque.removeLast()
   - [ ] Iterator<E> ArrayDeque.descendingIterator()
   - [ ] Iterator<E> ArrayDeque.iterator()
   - [ ] Object[] ArrayDeque.toArray()
   - [ ] Spliterator<E> ArrayDeque.spliterator()
   - [X] boolean ArrayDeque.add(E e)
   - [ ] boolean ArrayDeque.contains(Object o)
   - [ ] boolean ArrayDeque.isEmpty()
   - [X] boolean ArrayDeque.offer(E e)
   - [X] boolean ArrayDeque.offerFirst(E e)
   - [X] boolean ArrayDeque.offerLast(E e)
   - [X] boolean ArrayDeque.remove(Object o)
   - [X] boolean ArrayDeque.removeFirstOccurrence(Object o)
   - [X] boolean ArrayDeque.removeLastOccurrence(Object o)
   - [ ] int ArrayDeque.size()
   - [X] void ArrayDeque.addFirst(E e)
   - [ ] void ArrayDeque.addLast(E e)
   - [ ] void ArrayDeque.clear()
   - [X] void ArrayDeque.push(E e)

** ArrayList

   - [ ] <T> T[] ArrayList.toArray(T[] a)
   - [ ] E ArrayList.get(int index)
   - [ ] E ArrayList.remove(int index)
   - [ ] E ArrayList.set(int index, E element)
   - [ ] Iterator<E> ArrayList.iterator()
   - [ ] List<E> ArrayList.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> ArrayList.listIterator()
   - [ ] ListIterator<E> ArrayList.listIterator(int index)
   - [ ] Object ArrayList.clone()
   - [ ] Object[] ArrayList.toArray()
   - [ ] Spliterator<E> ArrayList.spliterator()
   - [X] boolean ArrayList.add(E e)
   - [X] boolean ArrayList.addAll(Collection<? extends E> c)
   - [X] boolean ArrayList.addAll(int index, Collection<? extends E> c)
   - [ ] boolean ArrayList.contains(Object o)
   - [ ] boolean ArrayList.isEmpty()
   - [X] boolean ArrayList.remove(Object o)
   - [X] boolean ArrayList.removeAll(Collection<?> c)
   - [X] boolean ArrayList.removeIf(Predicate<? super E> filter)
   - [X] boolean ArrayList.retainAll(Collection<?> c)
   - [ ] int ArrayList.indexOf(Object o)
   - [ ] int ArrayList.lastIndexOf(Object o)
   - [ ] int ArrayList.size()
   - [ ] protected void ArrayList.removeRange(int fromIndex, int toIndex)
   - [X] void ArrayList.add(int index, E element)
   - [X] void ArrayList.clear()
   - [X] void ArrayList.ensureCapacity(int minCapacity)
   - [X] void ArrayList.forEach(Consumer<? super E> action)
   - [X] void ArrayList.replaceAll(UnaryOperator<E> operator)
   - [X] void ArrayList.sort(Comparator<? super E> c)
   - [X] void ArrayList.trimToSize()

** AttributeList

   - [ ] List<Attribute> AttributeList.asList()
   - [ ] Object AttributeList.set(int index, Object element)
   - [X] boolean AttributeList.add(Object element)
   - [X] boolean AttributeList.addAll(AttributeList list)
   - [X] boolean AttributeList.addAll(Collection<?> c)
   - [X] boolean AttributeList.addAll(int index, AttributeList list)
   - [X] boolean AttributeList.addAll(int index, Collection<?> c)
   - [X] void AttributeList.add(Attribute object)
   - [X] void AttributeList.add(int index, Attribute object)
   - [X] void AttributeList.add(int index, Object element)
   - [X] void AttributeList.set(int index, Attribute object)

** BeanContextServicesSupport

   - [ ] BeanContextServices BeanContextServicesSupport.getBeanContextServicesPeer()
   - [ ] Iterator BeanContextServicesSupport.getCurrentServiceClasses()
   - [ ] Iterator BeanContextServicesSupport.getCurrentServiceSelectors(Class serviceClass)
   - [ ] Object BeanContextServicesSupport.getService(BeanContextChild child, Object requestor, Class serviceClass, Object serviceSelector, BeanContextServiceRevokedListener bcsrl)
   - [X] boolean BeanContextServicesSupport.addService(Class serviceClass, BeanContextServiceProvider bcsp)
   - [ ] boolean BeanContextServicesSupport.hasService(Class serviceClass)
   - [ ] protected BeanContextServicesSupport.BCSSServiceProvider BeanContextServicesSupport.createBCSSServiceProvider(Class sc, BeanContextServiceProvider bcsp)
   - [ ] protected BeanContextSupport.BCSChild BeanContextServicesSupport.createBCSChild(Object targetChild, Object peer)
   - [X] protected boolean BeanContextServicesSupport.addService(Class serviceClass, BeanContextServiceProvider bcsp, boolean fireEvent)
   - [ ] protected static BeanContextServicesListener BeanContextServicesSupport.getChildBeanContextServicesListener(Object child)
   - [ ] protected void BeanContextServicesSupport.bcsPreDeserializationHook(ObjectInputStream ois)
   - [ ] protected void BeanContextServicesSupport.bcsPreSerializationHook(ObjectOutputStream oos)
   - [ ] protected void BeanContextServicesSupport.childJustRemovedHook(Object child, BeanContextSupport.BCSChild bcsc)
   - [ ] protected void BeanContextServicesSupport.fireServiceAdded(BeanContextServiceAvailableEvent bcssae)
   - [ ] protected void BeanContextServicesSupport.fireServiceAdded(Class serviceClass)
   - [ ] protected void BeanContextServicesSupport.fireServiceRevoked(BeanContextServiceRevokedEvent bcsre)
   - [ ] protected void BeanContextServicesSupport.fireServiceRevoked(Class serviceClass, boolean revokeNow)
   - [ ] protected void BeanContextServicesSupport.initializeBeanContextResources()
   - [ ] protected void BeanContextServicesSupport.releaseBeanContextResources()
   - [X] void BeanContextServicesSupport.addBeanContextServicesListener(BeanContextServicesListener bcsl)
   - [X] void BeanContextServicesSupport.initialize()
   - [X] void BeanContextServicesSupport.releaseService(BeanContextChild child, Object requestor, Object service)
   - [X] void BeanContextServicesSupport.removeBeanContextServicesListener(BeanContextServicesListener bcsl)
   - [X] void BeanContextServicesSupport.revokeService(Class serviceClass, BeanContextServiceProvider bcsp, boolean revokeCurrentServicesNow)
   - [X] void BeanContextServicesSupport.serviceAvailable(BeanContextServiceAvailableEvent bcssae)
   - [X] void BeanContextServicesSupport.serviceRevoked(BeanContextServiceRevokedEvent bcssre)

** BeanContextSupport

   - [ ] BeanContext BeanContextSupport.getBeanContextPeer()
   - [ ] InputStream BeanContextSupport.getResourceAsStream(String name, BeanContextChild bcc)
   - [ ] Iterator BeanContextSupport.iterator()
   - [ ] Locale BeanContextSupport.getLocale()
   - [ ] Object BeanContextSupport.instantiateChild(String beanName)
   - [ ] Object[] BeanContextSupport.toArray()
   - [ ] Object[] BeanContextSupport.toArray(Object[] arry)
   - [ ] URL BeanContextSupport.getResource(String name, BeanContextChild bcc)
   - [X] boolean BeanContextSupport.add(Object targetChild)
   - [X] boolean BeanContextSupport.addAll(Collection c)
   - [ ] boolean BeanContextSupport.avoidingGui()
   - [ ] boolean BeanContextSupport.contains(Object o)
   - [ ] boolean BeanContextSupport.containsAll(Collection c)
   - [ ] boolean BeanContextSupport.containsKey(Object o)
   - [ ] boolean BeanContextSupport.isDesignTime()
   - [ ] boolean BeanContextSupport.isEmpty()
   - [ ] boolean BeanContextSupport.isSerializing()
   - [ ] boolean BeanContextSupport.needsGui()
   - [X] boolean BeanContextSupport.remove(Object targetChild)
   - [X] boolean BeanContextSupport.removeAll(Collection c)
   - [X] boolean BeanContextSupport.retainAll(Collection c)
   - [ ] int BeanContextSupport.size()
   - [ ] protected BeanContextSupport.BCSChild BeanContextSupport.createBCSChild(Object targetChild, Object peer)
   - [ ] protected Iterator BeanContextSupport.bcsChildren()
   - [ ] protected Object[] BeanContextSupport.copyChildren()
   - [X] protected boolean BeanContextSupport.remove(Object targetChild, boolean callChildSetBC)
   - [X] protected boolean BeanContextSupport.validatePendingAdd(Object targetChild)
   - [X] protected boolean BeanContextSupport.validatePendingRemove(Object targetChild)
   - [ ] protected static BeanContextChild BeanContextSupport.getChildBeanContextChild(Object child)
   - [ ] protected static BeanContextMembershipListener BeanContextSupport.getChildBeanContextMembershipListener(Object child)
   - [ ] protected static PropertyChangeListener BeanContextSupport.getChildPropertyChangeListener(Object child)
   - [ ] protected static Serializable BeanContextSupport.getChildSerializable(Object child)
   - [ ] protected static VetoableChangeListener BeanContextSupport.getChildVetoableChangeListener(Object child)
   - [ ] protected static Visibility BeanContextSupport.getChildVisibility(Object child)
   - [ ] protected static boolean BeanContextSupport.classEquals(Class first, Class second)
   - [X] protected void BeanContextSupport.bcsPreDeserializationHook(ObjectInputStream ois)
   - [X] protected void BeanContextSupport.bcsPreSerializationHook(ObjectOutputStream oos)
   - [X] protected void BeanContextSupport.childDeserializedHook(Object child, BeanContextSupport.BCSChild bcsc)
   - [X] protected void BeanContextSupport.childJustAddedHook(Object child, BeanContextSupport.BCSChild bcsc)
   - [X] protected void BeanContextSupport.childJustRemovedHook(Object child, BeanContextSupport.BCSChild bcsc)
   - [X] protected void BeanContextSupport.deserialize(ObjectInputStream ois, Collection coll)
   - [X] protected void BeanContextSupport.fireChildrenAdded(BeanContextMembershipEvent bcme)
   - [X] protected void BeanContextSupport.fireChildrenRemoved(BeanContextMembershipEvent bcme)
   - [X] protected void BeanContextSupport.initialize()
   - [X] protected void BeanContextSupport.serialize(ObjectOutputStream oos, Collection coll)
   - [X] void BeanContextSupport.addBeanContextMembershipListener(BeanContextMembershipListener bcml)
   - [X] void BeanContextSupport.clear()
   - [X] void BeanContextSupport.dontUseGui()
   - [X] void BeanContextSupport.okToUseGui()
   - [X] void BeanContextSupport.propertyChange(PropertyChangeEvent pce)
   - [X] void BeanContextSupport.readChildren(ObjectInputStream ois)
   - [X] void BeanContextSupport.removeBeanContextMembershipListener(BeanContextMembershipListener bcml)
   - [X] void BeanContextSupport.setDesignTime(boolean dTime)
   - [X] void BeanContextSupport.setLocale(Locale newLocale)
   - [X] void BeanContextSupport.vetoableChange(PropertyChangeEvent pce)
   - [X] void BeanContextSupport.writeChildren(ObjectOutputStream oos)

** ConcurrentHashMap

   - [ ] <T> T[] ConcurrentHashMap.toArray(T[] a)
   - [ ] ConcurrentHashMap<K,V> ConcurrentHashMap.getMap()
   - [ ] Iterator<K> ConcurrentHashMap.iterator()
   - [ ] Object[] ConcurrentHashMap.toArray()
   - [ ] Spliterator<K> ConcurrentHashMap.spliterator()
   - [ ] String ConcurrentHashMap.toString()
   - [ ] V ConcurrentHashMap.getMappedValue()
   - [X] boolean ConcurrentHashMap.add(K e)
   - [X] boolean ConcurrentHashMap.addAll(Collection<? extends K> c)
   - [ ] boolean ConcurrentHashMap.contains(Object o)
   - [ ] boolean ConcurrentHashMap.containsAll(Collection<?> c)
   - [ ] boolean ConcurrentHashMap.equals(Object o)
   - [X] boolean ConcurrentHashMap.isEmpty()
   - [X] boolean ConcurrentHashMap.remove(Object o)
   - [X] boolean ConcurrentHashMap.removeAll(Collection<?> c)
   - [X] boolean ConcurrentHashMap.retainAll(Collection<?> c)
   - [ ] int ConcurrentHashMap.hashCode()
   - [ ] int ConcurrentHashMap.size()
   - [X] void ConcurrentHashMap.clear()
   - [X] void ConcurrentHashMap.forEach(Consumer<? super K> action)

** ConcurrentLinkedDeque

   - [ ] <T> T[] ConcurrentLinkedDeque.toArray(T[] a)
   - [ ] E ConcurrentLinkedDeque.element()
   - [ ] E ConcurrentLinkedDeque.getFirst()
   - [ ] E ConcurrentLinkedDeque.getLast()
   - [ ] E ConcurrentLinkedDeque.peek()
   - [ ] E ConcurrentLinkedDeque.peekFirst()
   - [ ] E ConcurrentLinkedDeque.peekLast()
   - [ ] E ConcurrentLinkedDeque.poll()
   - [ ] E ConcurrentLinkedDeque.pollFirst()
   - [ ] E ConcurrentLinkedDeque.pollLast()
   - [ ] E ConcurrentLinkedDeque.pop()
   - [ ] E ConcurrentLinkedDeque.remove()
   - [ ] E ConcurrentLinkedDeque.removeFirst()
   - [ ] E ConcurrentLinkedDeque.removeLast()
   - [ ] Iterator<E> ConcurrentLinkedDeque.descendingIterator()
   - [ ] Iterator<E> ConcurrentLinkedDeque.iterator()
   - [ ] Object[] ConcurrentLinkedDeque.toArray()
   - [ ] Spliterator<E> ConcurrentLinkedDeque.spliterator()
   - [X] boolean ConcurrentLinkedDeque.add(E e)
   - [X] boolean ConcurrentLinkedDeque.addAll(Collection<? extends E> c)
   - [ ] boolean ConcurrentLinkedDeque.contains(Object o)
   - [ ] boolean ConcurrentLinkedDeque.isEmpty()
   - [X] boolean ConcurrentLinkedDeque.offer(E e)
   - [X] boolean ConcurrentLinkedDeque.offerFirst(E e)
   - [X] boolean ConcurrentLinkedDeque.offerLast(E e)
   - [X] boolean ConcurrentLinkedDeque.remove(Object o)
   - [X] boolean ConcurrentLinkedDeque.removeFirstOccurrence(Object o)
   - [X] boolean ConcurrentLinkedDeque.removeLastOccurrence(Object o)
   - [ ] int ConcurrentLinkedDeque.size()
   - [X] void ConcurrentLinkedDeque.addFirst(E e)
   - [X] void ConcurrentLinkedDeque.addLast(E e)
   - [X] void ConcurrentLinkedDeque.clear()
   - [X] void ConcurrentLinkedDeque.push(E e)

** ConcurrentLinkedQueue

   - [ ] <T> T[] ConcurrentLinkedQueue.toArray(T[] a)
   - [ ] E ConcurrentLinkedQueue.peek()
   - [ ] E ConcurrentLinkedQueue.poll()
   - [ ] Iterator<E> ConcurrentLinkedQueue.iterator()
   - [ ] Object[] ConcurrentLinkedQueue.toArray()
   - [ ] Spliterator<E> ConcurrentLinkedQueue.spliterator()
   - [X] boolean ConcurrentLinkedQueue.add(E e)
   - [X] boolean ConcurrentLinkedQueue.addAll(Collection<? extends E> c)
   - [ ] boolean ConcurrentLinkedQueue.contains(Object o)
   - [ ] boolean ConcurrentLinkedQueue.isEmpty()
   - [X] boolean ConcurrentLinkedQueue.offer(E e)
   - [X] boolean ConcurrentLinkedQueue.remove(Object o)
   - [ ] int ConcurrentLinkedQueue.size()

** ConcurrentSkipListSet

   - [ ] Comparator<? super E> ConcurrentSkipListSet.comparator()
   - [ ] ConcurrentSkipListSet<E> ConcurrentSkipListSet.clone()
   - [ ] E ConcurrentSkipListSet.ceiling(E e)
   - [ ] E ConcurrentSkipListSet.first()
   - [ ] E ConcurrentSkipListSet.floor(E e)
   - [ ] E ConcurrentSkipListSet.higher(E e)
   - [ ] E ConcurrentSkipListSet.last()
   - [ ] E ConcurrentSkipListSet.lower(E e)
   - [ ] E ConcurrentSkipListSet.pollFirst()
   - [ ] E ConcurrentSkipListSet.pollLast()
   - [ ] Iterator<E> ConcurrentSkipListSet.descendingIterator()
   - [ ] Iterator<E> ConcurrentSkipListSet.iterator()
   - [ ] NavigableSet<E> ConcurrentSkipListSet.descendingSet()
   - [ ] NavigableSet<E> ConcurrentSkipListSet.headSet(E toElement)
   - [ ] NavigableSet<E> ConcurrentSkipListSet.headSet(E toElement, boolean inclusive)
   - [ ] NavigableSet<E> ConcurrentSkipListSet.subSet(E fromElement, E toElement)
   - [ ] NavigableSet<E> ConcurrentSkipListSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
   - [ ] NavigableSet<E> ConcurrentSkipListSet.tailSet(E fromElement)
   - [ ] NavigableSet<E> ConcurrentSkipListSet.tailSet(E fromElement, boolean inclusive)
   - [ ] Spliterator<E> ConcurrentSkipListSet.spliterator()
   - [X] boolean ConcurrentSkipListSet.add(E e)
   - [ ] boolean ConcurrentSkipListSet.contains(Object o)
   - [ ] boolean ConcurrentSkipListSet.equals(Object o)
   - [ ] boolean ConcurrentSkipListSet.isEmpty()
   - [X] boolean ConcurrentSkipListSet.remove(Object o)
   - [X] boolean ConcurrentSkipListSet.removeAll(Collection<?> c)
   - [ ] int ConcurrentSkipListSet.size()
   - [X] void ConcurrentSkipListSet.clear()

** CopyOnWriteArrayList

   - [ ] <T> T[] CopyOnWriteArrayList.toArray(T[] a)
   - [ ] E CopyOnWriteArrayList.get(int index)
   - [ ] E CopyOnWriteArrayList.remove(int index)
   - [ ] E CopyOnWriteArrayList.set(int index, E element)
   - [ ] Iterator<E> CopyOnWriteArrayList.iterator()
   - [ ] List<E> CopyOnWriteArrayList.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> CopyOnWriteArrayList.listIterator()
   - [ ] ListIterator<E> CopyOnWriteArrayList.listIterator(int index)
   - [ ] Object CopyOnWriteArrayList.clone()
   - [ ] Object[] CopyOnWriteArrayList.toArray()
   - [ ] Spliterator<E> CopyOnWriteArrayList.spliterator()
   - [ ] String CopyOnWriteArrayList.toString()
   - [X] boolean CopyOnWriteArrayList.add(E e)
   - [X] boolean CopyOnWriteArrayList.addAll(Collection<? extends E> c)
   - [X] boolean CopyOnWriteArrayList.addAll(int index, Collection<? extends E> c)
   - [X] boolean CopyOnWriteArrayList.addIfAbsent(E e)
   - [ ] boolean CopyOnWriteArrayList.contains(Object o)
   - [ ] boolean CopyOnWriteArrayList.containsAll(Collection<?> c)
   - [ ] boolean CopyOnWriteArrayList.equals(Object o)
   - [ ] boolean CopyOnWriteArrayList.isEmpty()
   - [X] boolean CopyOnWriteArrayList.remove(Object o)
   - [X] boolean CopyOnWriteArrayList.removeAll(Collection<?> c)
   - [X] boolean CopyOnWriteArrayList.removeIf(Predicate<? super E> filter)
   - [X] boolean CopyOnWriteArrayList.retainAll(Collection<?> c)
   - [ ] int CopyOnWriteArrayList.addAllAbsent(Collection<? extends E> c)
   - [ ] int CopyOnWriteArrayList.hashCode()
   - [ ] int CopyOnWriteArrayList.indexOf(E e, int index)
   - [ ] int CopyOnWriteArrayList.indexOf(Object o)
   - [ ] int CopyOnWriteArrayList.lastIndexOf(E e, int index)
   - [ ] int CopyOnWriteArrayList.lastIndexOf(Object o)
   - [ ] int CopyOnWriteArrayList.size()
   - [X] void CopyOnWriteArrayList.add(int index, E element)
   - [X] void CopyOnWriteArrayList.clear()
   - [X] void CopyOnWriteArrayList.forEach(Consumer<? super E> action)
   - [X] void CopyOnWriteArrayList.replaceAll(UnaryOperator<E> operator)
   - [X] void CopyOnWriteArrayList.sort(Comparator<? super E> c)

** CopyOnWriteArraySet

   - [ ] <T> T[] CopyOnWriteArraySet.toArray(T[] a)
   - [ ] Iterator<E> CopyOnWriteArraySet.iterator()
   - [ ] Object[] CopyOnWriteArraySet.toArray()
   - [ ] Spliterator<E> CopyOnWriteArraySet.spliterator()
   - [X] boolean CopyOnWriteArraySet.add(E e)
   - [X] boolean CopyOnWriteArraySet.addAll(Collection<? extends E> c)
   - [ ] boolean CopyOnWriteArraySet.contains(Object o)
   - [ ] boolean CopyOnWriteArraySet.containsAll(Collection<?> c)
   - [ ] boolean CopyOnWriteArraySet.equals(Object o)
   - [ ] boolean CopyOnWriteArraySet.isEmpty()
   - [X] boolean CopyOnWriteArraySet.remove(Object o)
   - [X] boolean CopyOnWriteArraySet.removeAll(Collection<?> c)
   - [X] boolean CopyOnWriteArraySet.removeIf(Predicate<? super E> filter)
   - [X] boolean CopyOnWriteArraySet.retainAll(Collection<?> c)
   - [ ] int CopyOnWriteArraySet.size()
   - [X] void CopyOnWriteArraySet.clear()
   - [X] void CopyOnWriteArraySet.forEach(Consumer<? super E> action)

** DelayQueue

   - [ ] <T> T[] DelayQueue.toArray(T[] a)
   - [ ] E DelayQueue.peek()
   - [ ] E DelayQueue.poll()
   - [ ] E DelayQueue.poll(long timeout, TimeUnit unit)
   - [ ] E DelayQueue.take()
   - [ ] Iterator<E> DelayQueue.iterator()
   - [ ] Object[] DelayQueue.toArray()
   - [X] boolean DelayQueue.add(E e)
   - [X] boolean DelayQueue.offer(E e)
   - [X] boolean DelayQueue.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean DelayQueue.remove(Object o)
   - [X] int DelayQueue.drainTo(Collection<? super E> c)
   - [X] int DelayQueue.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int DelayQueue.remainingCapacity()
   - [ ] int DelayQueue.size()
   - [X] void DelayQueue.clear()
   - [X] void DelayQueue.put(E e)

** EnumSet

   - [ ] EnumSet<E> EnumSet.clone()
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.allOf(Class<E> elementType)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.complementOf(EnumSet<E> s)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.copyOf(Collection<E> c)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.copyOf(EnumSet<E> s)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.noneOf(Class<E> elementType)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.of(E e)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.of(E e1, E e2)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.of(E e1, E e2, E e3)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.of(E e1, E e2, E e3, E e4)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.of(E e1, E e2, E e3, E e4, E e5)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.of(E first, E... rest)
   - [ ] static <E extends Enum<E>>EnumSet<E> EnumSet.range(E from, E to)

** HashSet

   - [ ] Iterator<E> HashSet.iterator()
   - [ ] Object HashSet.clone()
   - [ ] Spliterator<E> HashSet.spliterator()
   - [X] boolean HashSet.add(E e)
   - [ ] boolean HashSet.contains(Object o)
   - [ ] boolean HashSet.isEmpty()
   - [X] boolean HashSet.remove(Object o)
   - [ ] int HashSet.size()
   - [ ] void HashSet.clear()

** JobStateReasons

   - [ ] Class<? extends Attribute> JobStateReasons.getCategory()
   - [ ] String JobStateReasons.getName()
   - [X] boolean JobStateReasons.add(JobStateReason o)

** LinkedBlockingDeque

   - [ ] <T> T[] LinkedBlockingDeque.toArray(T[] a)
   - [ ] E LinkedBlockingDeque.element()
   - [ ] E LinkedBlockingDeque.getFirst()
   - [ ] E LinkedBlockingDeque.getLast()
   - [ ] E LinkedBlockingDeque.peek()
   - [ ] E LinkedBlockingDeque.peekFirst()
   - [ ] E LinkedBlockingDeque.peekLast()
   - [ ] E LinkedBlockingDeque.poll()
   - [ ] E LinkedBlockingDeque.poll(long timeout, TimeUnit unit)
   - [ ] E LinkedBlockingDeque.pollFirst()
   - [ ] E LinkedBlockingDeque.pollFirst(long timeout, TimeUnit unit)
   - [ ] E LinkedBlockingDeque.pollLast()
   - [ ] E LinkedBlockingDeque.pollLast(long timeout, TimeUnit unit)
   - [ ] E LinkedBlockingDeque.pop()
   - [ ] E LinkedBlockingDeque.remove()
   - [ ] E LinkedBlockingDeque.removeFirst()
   - [ ] E LinkedBlockingDeque.removeLast()
   - [ ] E LinkedBlockingDeque.take()
   - [ ] E LinkedBlockingDeque.takeFirst()
   - [ ] E LinkedBlockingDeque.takeLast()
   - [ ] Iterator<E> LinkedBlockingDeque.descendingIterator()
   - [ ] Iterator<E> LinkedBlockingDeque.iterator()
   - [ ] Object[] LinkedBlockingDeque.toArray()
   - [ ] Spliterator<E> LinkedBlockingDeque.spliterator()
   - [ ] String LinkedBlockingDeque.toString()
   - [X] boolean LinkedBlockingDeque.add(E e)
   - [ ] boolean LinkedBlockingDeque.contains(Object o)
   - [X] boolean LinkedBlockingDeque.offer(E e)
   - [X] boolean LinkedBlockingDeque.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean LinkedBlockingDeque.offerFirst(E e)
   - [X] boolean LinkedBlockingDeque.offerFirst(E e, long timeout, TimeUnit unit)
   - [X] boolean LinkedBlockingDeque.offerLast(E e)
   - [X] boolean LinkedBlockingDeque.offerLast(E e, long timeout, TimeUnit unit)
   - [X] boolean LinkedBlockingDeque.remove(Object o)
   - [X] boolean LinkedBlockingDeque.removeFirstOccurrence(Object o)
   - [X] boolean LinkedBlockingDeque.removeLastOccurrence(Object o)
   - [X] int LinkedBlockingDeque.drainTo(Collection<? super E> c)
   - [X] int LinkedBlockingDeque.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int LinkedBlockingDeque.remainingCapacity()
   - [ ] int LinkedBlockingDeque.size()
   - [X] void LinkedBlockingDeque.addFirst(E e)
   - [X] void LinkedBlockingDeque.addLast(E e)
   - [X] void LinkedBlockingDeque.clear()
   - [X] void LinkedBlockingDeque.push(E e)
   - [X] void LinkedBlockingDeque.put(E e)
   - [X] void LinkedBlockingDeque.putFirst(E e)
   - [X] void LinkedBlockingDeque.putLast(E e)

** LinkedBlockingQueue

   - [ ] <T> T[] LinkedBlockingQueue.toArray(T[] a)
   - [ ] E LinkedBlockingQueue.peek()
   - [ ] E LinkedBlockingQueue.poll()
   - [ ] E LinkedBlockingQueue.poll(long timeout, TimeUnit unit)
   - [ ] E LinkedBlockingQueue.take()
   - [ ] Iterator<E> LinkedBlockingQueue.iterator()
   - [ ] Object[] LinkedBlockingQueue.toArray()
   - [ ] Spliterator<E> LinkedBlockingQueue.spliterator()
   - [ ] String LinkedBlockingQueue.toString()
   - [ ] boolean LinkedBlockingQueue.contains(Object o)
   - [X] boolean LinkedBlockingQueue.offer(E e)
   - [X] boolean LinkedBlockingQueue.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean LinkedBlockingQueue.remove(Object o)
   - [X] int LinkedBlockingQueue.drainTo(Collection<? super E> c)
   - [X] int LinkedBlockingQueue.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int LinkedBlockingQueue.remainingCapacity()
   - [ ] int LinkedBlockingQueue.size()
   - [X] void LinkedBlockingQueue.clear()
   - [X] void LinkedBlockingQueue.put(E e)

** LinkedHashSet

   - [ ] Spliterator<E> LinkedHashSet.spliterator()

** LinkedList

   - [ ] <T> T[] LinkedList.toArray(T[] a)
   - [ ] E LinkedList.element()
   - [ ] E LinkedList.get(int index)
   - [ ] E LinkedList.getFirst()
   - [ ] E LinkedList.getLast()
   - [ ] E LinkedList.peek()
   - [ ] E LinkedList.peekFirst()
   - [ ] E LinkedList.peekLast()
   - [ ] E LinkedList.poll()
   - [ ] E LinkedList.pollFirst()
   - [ ] E LinkedList.pollLast()
   - [ ] E LinkedList.pop()
   - [ ] E LinkedList.remove()
   - [ ] E LinkedList.remove(int index)
   - [ ] E LinkedList.removeFirst()
   - [ ] E LinkedList.removeLast()
   - [ ] E LinkedList.set(int index, E element)
   - [ ] Iterator<E> LinkedList.descendingIterator()
   - [ ] ListIterator<E> LinkedList.listIterator(int index)
   - [ ] Object LinkedList.clone()
   - [ ] Object[] LinkedList.toArray()
   - [ ] Spliterator<E> LinkedList.spliterator()
   - [X] boolean LinkedList.add(E e)
   - [X] boolean LinkedList.addAll(Collection<? extends E> c)
   - [X] boolean LinkedList.addAll(int index, Collection<? extends E> c)
   - [ ] boolean LinkedList.contains(Object o)
   - [X] boolean LinkedList.offer(E e)
   - [X] boolean LinkedList.offerFirst(E e)
   - [X] boolean LinkedList.offerLast(E e)
   - [X] boolean LinkedList.remove(Object o)
   - [X] boolean LinkedList.removeFirstOccurrence(Object o)
   - [X] boolean LinkedList.removeLastOccurrence(Object o)
   - [ ] int LinkedList.indexOf(Object o)
   - [ ] int LinkedList.lastIndexOf(Object o)
   - [ ] int LinkedList.size()
   - [X] void LinkedList.add(int index, E element)
   - [X] void LinkedList.addFirst(E e)
   - [X] void LinkedList.addLast(E e)
   - [X] void LinkedList.clear()
   - [X] void LinkedList.push(E e)

** LinkedTransferQueue

   - [ ] E LinkedTransferQueue.peek()
   - [ ] E LinkedTransferQueue.poll()
   - [ ] E LinkedTransferQueue.poll(long timeout, TimeUnit unit)
   - [ ] E LinkedTransferQueue.take()
   - [ ] Iterator<E> LinkedTransferQueue.iterator()
   - [ ] Spliterator<E> LinkedTransferQueue.spliterator()
   - [X] boolean LinkedTransferQueue.add(E e)
   - [ ] boolean LinkedTransferQueue.contains(Object o)
   - [ ] boolean LinkedTransferQueue.hasWaitingConsumer()
   - [ ] boolean LinkedTransferQueue.isEmpty()
   - [X] boolean LinkedTransferQueue.offer(E e)
   - [X] boolean LinkedTransferQueue.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean LinkedTransferQueue.remove(Object o)
   - [ ] boolean LinkedTransferQueue.tryTransfer(E e)
   - [ ] boolean LinkedTransferQueue.tryTransfer(E e, long timeout, TimeUnit unit)
   - [X] int LinkedTransferQueue.drainTo(Collection<? super E> c)
   - [X] int LinkedTransferQueue.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int LinkedTransferQueue.getWaitingConsumerCount()
   - [ ] int LinkedTransferQueue.remainingCapacity()
   - [ ] int LinkedTransferQueue.size()
   - [X] void LinkedTransferQueue.put(E e)
   - [X] void LinkedTransferQueue.transfer(E e)

** PriorityBlockingQueue

   - [ ] <T> T[] PriorityBlockingQueue.toArray(T[] a)
   - [ ] Comparator<? super E> PriorityBlockingQueue.comparator()
   - [ ] E PriorityBlockingQueue.peek()
   - [ ] E PriorityBlockingQueue.poll()
   - [ ] E PriorityBlockingQueue.poll(long timeout, TimeUnit unit)
   - [ ] E PriorityBlockingQueue.take()
   - [ ] Iterator<E> PriorityBlockingQueue.iterator()
   - [ ] Object[] PriorityBlockingQueue.toArray()
   - [ ] Spliterator<E> PriorityBlockingQueue.spliterator()
   - [ ] String PriorityBlockingQueue.toString()
   - [X] boolean PriorityBlockingQueue.add(E e)
   - [ ] boolean PriorityBlockingQueue.contains(Object o)
   - [X] boolean PriorityBlockingQueue.offer(E e)
   - [X] boolean PriorityBlockingQueue.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean PriorityBlockingQueue.remove(Object o)
   - [X] int PriorityBlockingQueue.drainTo(Collection<? super E> c)
   - [X] int PriorityBlockingQueue.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int PriorityBlockingQueue.remainingCapacity()
   - [ ] int PriorityBlockingQueue.size()
   - [X] void PriorityBlockingQueue.clear()
   - [X] void PriorityBlockingQueue.put(E e)

** PriorityQueue

   - [ ] <T> T[] PriorityQueue.toArray(T[] a)
   - [ ] Comparator<? super E> PriorityQueue.comparator()
   - [ ] E PriorityQueue.peek()
   - [ ] E PriorityQueue.poll()
   - [ ] Iterator<E> PriorityQueue.iterator()
   - [ ] Object[] PriorityQueue.toArray()
   - [ ] Spliterator<E> PriorityQueue.spliterator()
   - [X] boolean PriorityQueue.add(E e)
   - [ ] boolean PriorityQueue.contains(Object o)
   - [X] boolean PriorityQueue.offer(E e)
   - [X] boolean PriorityQueue.remove(Object o)
   - [ ] int PriorityQueue.size()
   - [X] void PriorityQueue.clear()

** RoleList

   - [ ] List<Role> RoleList.asList()
   - [ ] Object RoleList.set(int index, Object element)
   - [X] boolean RoleList.add(Object o)
   - [X] boolean RoleList.addAll(Collection<?> c)
   - [X] boolean RoleList.addAll(RoleList roleList)
   - [X] boolean RoleList.addAll(int index, Collection<?> c)
   - [X] boolean RoleList.addAll(int index, RoleList roleList)
   - [X] void RoleList.add(Role role)
   - [X] void RoleList.add(int index, Object element)
   - [X] void RoleList.add(int index, Role role)
   - [X] void RoleList.set(int index, Role role)

** RoleUnresolvedList

   - [ ] List<RoleUnresolved> RoleUnresolvedList.asList()
   - [ ] Object RoleUnresolvedList.set(int index, Object element)
   - [X] boolean RoleUnresolvedList.add(Object o)
   - [X] boolean RoleUnresolvedList.addAll(Collection<?> c)
   - [X] boolean RoleUnresolvedList.addAll(RoleUnresolvedList roleList)
   - [X] boolean RoleUnresolvedList.addAll(int index, Collection<?> c)
   - [X] boolean RoleUnresolvedList.addAll(int index, RoleUnresolvedList roleList)
   - [X] void RoleUnresolvedList.add(RoleUnresolved role)
   - [X] void RoleUnresolvedList.add(int index, Object element)
   - [X] void RoleUnresolvedList.add(int index, RoleUnresolved role)
   - [X] void RoleUnresolvedList.set(int index, RoleUnresolved role)

** Stack

   - [ ] E Stack.peek()
   - [ ] E Stack.pop()
   - [ ] E Stack.push(E item)
   - [ ] boolean Stack.empty()
   - [ ] int Stack.search(Object o)

** SynchronousQueue

   - [ ] <T> T[] SynchronousQueue.toArray(T[] a)
   - [ ] E SynchronousQueue.peek()
   - [ ] E SynchronousQueue.poll()
   - [ ] E SynchronousQueue.poll(long timeout, TimeUnit unit)
   - [ ] E SynchronousQueue.take()
   - [ ] Iterator<E> SynchronousQueue.iterator()
   - [ ] Object[] SynchronousQueue.toArray()
   - [ ] Spliterator<E> SynchronousQueue.spliterator()
   - [ ] boolean SynchronousQueue.contains(Object o)
   - [ ] boolean SynchronousQueue.containsAll(Collection<?> c)
   - [ ] boolean SynchronousQueue.isEmpty()
   - [X] boolean SynchronousQueue.offer(E e)
   - [X] boolean SynchronousQueue.offer(E e, long timeout, TimeUnit unit)
   - [X] boolean SynchronousQueue.remove(Object o)
   - [X] boolean SynchronousQueue.removeAll(Collection<?> c)
   - [X] boolean SynchronousQueue.retainAll(Collection<?> c)
   - [X] int SynchronousQueue.drainTo(Collection<? super E> c)
   - [X] int SynchronousQueue.drainTo(Collection<? super E> c, int maxElements)
   - [ ] int SynchronousQueue.remainingCapacity()
   - [ ] int SynchronousQueue.size()
   - [X] void SynchronousQueue.clear()
   - [X] void SynchronousQueue.put(E e)

** TreeSet

   - [ ] Comparator<? super E> TreeSet.comparator()
   - [ ] E TreeSet.ceiling(E e)
   - [ ] E TreeSet.first()
   - [ ] E TreeSet.floor(E e)
   - [ ] E TreeSet.higher(E e)
   - [ ] E TreeSet.last()
   - [ ] E TreeSet.lower(E e)
   - [ ] E TreeSet.pollFirst()
   - [ ] E TreeSet.pollLast()
   - [ ] Iterator<E> TreeSet.descendingIterator()
   - [ ] Iterator<E> TreeSet.iterator()
   - [ ] NavigableSet<E> TreeSet.descendingSet()
   - [ ] NavigableSet<E> TreeSet.headSet(E toElement, boolean inclusive)
   - [ ] NavigableSet<E> TreeSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
   - [ ] NavigableSet<E> TreeSet.tailSet(E fromElement, boolean inclusive)
   - [ ] Object TreeSet.clone()
   - [ ] SortedSet<E> TreeSet.headSet(E toElement)
   - [ ] SortedSet<E> TreeSet.subSet(E fromElement, E toElement)
   - [ ] SortedSet<E> TreeSet.tailSet(E fromElement)
   - [ ] Spliterator<E> TreeSet.spliterator()
   - [X] boolean TreeSet.add(E e)
   - [X] boolean TreeSet.addAll(Collection<? extends E> c)
   - [ ] boolean TreeSet.contains(Object o)
   - [ ] boolean TreeSet.isEmpty()
   - [X] boolean TreeSet.remove(Object o)
   - [ ] int TreeSet.size()
   - [X] void TreeSet.clear()

** Vector

   - [ ] <T> T[] Vector.toArray(T[] a)
   - [ ] E Vector.elementAt(int index)
   - [ ] E Vector.firstElement()
   - [ ] E Vector.get(int index)
   - [ ] E Vector.lastElement()
   - [ ] E Vector.remove(int index)
   - [ ] E Vector.set(int index, E element)
   - [ ] Enumeration<E> Vector.elements()
   - [ ] Iterator<E> Vector.iterator()
   - [ ] List<E> Vector.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> Vector.listIterator()
   - [ ] ListIterator<E> Vector.listIterator(int index)
   - [ ] Object Vector.clone()
   - [ ] Object[] Vector.toArray()
   - [ ] Spliterator<E> Vector.spliterator()
   - [ ] String Vector.toString()
   - [X] boolean Vector.add(E e)
   - [X] boolean Vector.addAll(Collection<? extends E> c)
   - [X] boolean Vector.addAll(int index, Collection<? extends E> c)
   - [ ] boolean Vector.contains(Object o)
   - [ ] boolean Vector.containsAll(Collection<?> c)
   - [ ] boolean Vector.equals(Object o)
   - [ ] boolean Vector.isEmpty()
   - [X] boolean Vector.remove(Object o)
   - [X] boolean Vector.removeAll(Collection<?> c)
   - [X] boolean Vector.removeElement(Object obj)
   - [X] boolean Vector.removeIf(Predicate<? super E> filter)
   - [X] boolean Vector.retainAll(Collection<?> c)
   - [ ] int Vector.capacity()
   - [ ] int Vector.hashCode()
   - [ ] int Vector.indexOf(Object o)
   - [ ] int Vector.indexOf(Object o, int index)
   - [ ] int Vector.lastIndexOf(Object o)
   - [ ] int Vector.lastIndexOf(Object o, int index)
   - [ ] int Vector.size()
   - [ ] protected void Vector.removeRange(int fromIndex, int toIndex)
   - [X] void Vector.add(int index, E element)
   - [X] void Vector.addElement(E obj)
   - [X] void Vector.clear()
   - [X] void Vector.copyInto(Object[] anArray)
   - [X] void Vector.ensureCapacity(int minCapacity)
   - [X] void Vector.forEach(Consumer<? super E> action)
   - [X] void Vector.insertElementAt(E obj, int index)
   - [X] void Vector.removeAllElements()
   - [X] void Vector.removeElementAt(int index)
   - [X] void Vector.replaceAll(UnaryOperator<E> operator)
   - [X] void Vector.setElementAt(E obj, int index)
   - [X] void Vector.setSize(int newSize)
   - [X] void Vector.sort(Comparator<? super E> c)
   - [X] void Vector.trimToSize()

** Set

   - [ ] <T> T[] Set.toArray(T[] a)
   - [ ] Iterator<E> Set.iterator()
   - [ ] Object[] Set.toArray()
   - [X] boolean Set.add(E e)
   - [X] boolean Set.addAll(Collection<? extends E> c)
   - [ ] boolean Set.contains(Object o)
   - [ ] boolean Set.containsAll(Collection<?> c)
   - [ ] boolean Set.equals(Object o)
   - [ ] boolean Set.isEmpty()
   - [X] boolean Set.remove(Object o)
   - [X] boolean Set.removeAll(Collection<?> c)
   - [X] boolean Set.retainAll(Collection<?> c)
   - [ ] default Spliterator<E> Set.spliterator()
   - [ ] int Set.hashCode()
   - [ ] int Set.size()
   - [X] void Set.clear()

** List

   - [ ] <T> T[] List.toArray(T[] a)
   - [ ] E List.get(int index)
   - [ ] E List.remove(int index)
   - [ ] E List.set(int index, E element)
   - [ ] Iterator<E> List.iterator()
   - [ ] List<E> List.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> List.listIterator()
   - [ ] ListIterator<E> List.listIterator(int index)
   - [ ] Object[] List.toArray()
   - [X] boolean List.add(E e)
   - [X] boolean List.addAll(Collection<? extends E> c)
   - [X] boolean List.addAll(int index, Collection<? extends E> c)
   - [ ] boolean List.contains(Object o)
   - [ ] boolean List.containsAll(Collection<?> c)
   - [ ] boolean List.equals(Object o)
   - [ ] boolean List.isEmpty()
   - [X] boolean List.remove(Object o)
   - [X] boolean List.removeAll(Collection<?> c)
   - [X] boolean List.retainAll(Collection<?> c)
   - [ ] default Spliterator<E> List.spliterator()
   - [X] default void List.replaceAll(UnaryOperator<E> operator)
   - [X] default void List.sort(Comparator<? super E> c)
   - [ ] int List.hashCode()
   - [ ] int List.indexOf(Object o)
   - [ ] int List.lastIndexOf(Object o)
   - [ ] int List.size()
   - [X] void List.add(int index, E element)
   - [X] void List.clear()

** Map

   - [ ] Collection<V> Map.values()
   - [ ] Set<K> Map.keySet()
   - [ ] Set<Map.Entry<K,V>> Map.entrySet()
   - [ ] V Map.get(Object key)
   - [X] V Map.put(K key, V value)
   - [ ] V Map.remove(Object key)
   - [ ] boolean Map.containsKey(Object key)
   - [ ] boolean Map.containsValue(Object value)
   - [ ] boolean Map.equals(Object o)
   - [ ] boolean Map.isEmpty()
   - [ ] default V Map.compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
   - [ ] default V Map.computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)
   - [ ] default V Map.computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
   - [ ] default V Map.getOrDefault(Object key, V defaultValue)
   - [ ] default V Map.merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)
   - [ ] default V Map.putIfAbsent(K key, V value)
   - [X] default V Map.replace(K key, V value)
   - [X] default boolean Map.remove(Object key, Object value)
   - [X] default boolean Map.replace(K key, V oldValue, V newValue)
   - [X] default void Map.forEach(BiConsumer<? super K,? super V> action)
   - [X] default void Map.replaceAll(BiFunction<? super K,? super V,? extends V> function)
   - [ ] int Map.hashCode()
   - [ ] int Map.size()
   - [X] void Map.clear()
   - [X] void Map.putAll(Map<? extends K,? extends V> m)

** SortedSet

   - [ ] Comparator<? super E> SortedSet.comparator()
   - [ ] E SortedSet.first()
   - [ ] E SortedSet.last()
   - [ ] SortedSet<E> SortedSet.headSet(E toElement)
   - [ ] SortedSet<E> SortedSet.subSet(E fromElement, E toElement)
   - [ ] SortedSet<E> SortedSet.tailSet(E fromElement)
   - [ ] default Spliterator<E> SortedSet.spliterator()

** SortedMap

   - [ ] Collection<V> SortedMap.values()
   - [ ] Comparator<? super K> SortedMap.comparator()
   - [ ] K SortedMap.firstKey()
   - [ ] K SortedMap.lastKey()
   - [ ] Set<K> SortedMap.keySet()
   - [ ] Set<Map.Entry<K,V>> SortedMap.entrySet()
   - [ ] SortedMap<K,V> SortedMap.headMap(K toKey)
   - [ ] SortedMap<K,V> SortedMap.subMap(K fromKey, K toKey)
   - [ ] SortedMap<K,V> SortedMap.tailMap(K fromKey)

** HashSet

   - [ ] Iterator<E> HashSet.iterator()
   - [ ] Object HashSet.clone()
   - [ ] Spliterator<E> HashSet.spliterator()
   - [X] boolean HashSet.add(E e)
   - [ ] boolean HashSet.contains(Object o)
   - [ ] boolean HashSet.isEmpty()
   - [X] boolean HashSet.remove(Object o)
   - [ ] int HashSet.size()
   - [X] void HashSet.clear()

** TreeSet

   - [ ] Comparator<? super E> TreeSet.comparator()
   - [ ] E TreeSet.ceiling(E e)
   - [ ] E TreeSet.first()
   - [ ] E TreeSet.floor(E e)
   - [ ] E TreeSet.higher(E e)
   - [ ] E TreeSet.last()
   - [ ] E TreeSet.lower(E e)
   - [ ] E TreeSet.pollFirst()
   - [ ] E TreeSet.pollLast()
   - [ ] Iterator<E> TreeSet.descendingIterator()
   - [ ] Iterator<E> TreeSet.iterator()
   - [ ] NavigableSet<E> TreeSet.descendingSet()
   - [ ] NavigableSet<E> TreeSet.headSet(E toElement, boolean inclusive)
   - [ ] NavigableSet<E> TreeSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
   - [ ] NavigableSet<E> TreeSet.tailSet(E fromElement, boolean inclusive)
   - [ ] Object TreeSet.clone()
   - [ ] SortedSet<E> TreeSet.headSet(E toElement)
   - [ ] SortedSet<E> TreeSet.subSet(E fromElement, E toElement)
   - [ ] SortedSet<E> TreeSet.tailSet(E fromElement)
   - [ ] Spliterator<E> TreeSet.spliterator()
   - [X] boolean TreeSet.add(E e)
   - [X] boolean TreeSet.addAll(Collection<? extends E> c)
   - [ ] boolean TreeSet.contains(Object o)
   - [ ] boolean TreeSet.isEmpty()
   - [X] boolean TreeSet.remove(Object o)
   - [ ] int TreeSet.size()
   - [X] void TreeSet.clear()

** ArrayList

   - [ ] <T> T[] ArrayList.toArray(T[] a)
   - [ ] E ArrayList.get(int index)
   - [ ] E ArrayList.remove(int index)
   - [ ] E ArrayList.set(int index, E element)
   - [ ] Iterator<E> ArrayList.iterator()
   - [ ] List<E> ArrayList.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> ArrayList.listIterator()
   - [ ] ListIterator<E> ArrayList.listIterator(int index)
   - [ ] Object ArrayList.clone()
   - [ ] Object[] ArrayList.toArray()
   - [ ] Spliterator<E> ArrayList.spliterator()
   - [X] boolean ArrayList.add(E e)
   - [X] boolean ArrayList.addAll(Collection<? extends E> c)
   - [X] boolean ArrayList.addAll(int index, Collection<? extends E> c)
   - [ ] boolean ArrayList.contains(Object o)
   - [ ] boolean ArrayList.isEmpty()
   - [X] boolean ArrayList.remove(Object o)
   - [X] boolean ArrayList.removeAll(Collection<?> c)
   - [X] boolean ArrayList.removeIf(Predicate<? super E> filter)
   - [X] boolean ArrayList.retainAll(Collection<?> c)
   - [ ] int ArrayList.indexOf(Object o)
   - [ ] int ArrayList.lastIndexOf(Object o)
   - [ ] int ArrayList.size()
   - [X] protected void ArrayList.removeRange(int fromIndex, int toIndex)
   - [X] void ArrayList.add(int index, E element)
   - [X] void ArrayList.clear()
   - [X] void ArrayList.ensureCapacity(int minCapacity)
   - [X] void ArrayList.forEach(Consumer<? super E> action)
   - [X] void ArrayList.replaceAll(UnaryOperator<E> operator)
   - [X] void ArrayList.sort(Comparator<? super E> c)
   - [X] void ArrayList.trimToSize()

** LinkedList

   - [ ] <T> T[] LinkedList.toArray(T[] a)
   - [ ] E LinkedList.element()
   - [ ] E LinkedList.get(int index)
   - [ ] E LinkedList.getFirst()
   - [ ] E LinkedList.getLast()
   - [ ] E LinkedList.peek()
   - [ ] E LinkedList.peekFirst()
   - [ ] E LinkedList.peekLast()
   - [ ] E LinkedList.poll()
   - [ ] E LinkedList.pollFirst()
   - [ ] E LinkedList.pollLast()
   - [ ] E LinkedList.pop()
   - [ ] E LinkedList.remove()
   - [ ] E LinkedList.remove(int index)
   - [ ] E LinkedList.removeFirst()
   - [ ] E LinkedList.removeLast()
   - [ ] E LinkedList.set(int index, E element)
   - [ ] Iterator<E> LinkedList.descendingIterator()
   - [ ] ListIterator<E> LinkedList.listIterator(int index)
   - [ ] Object LinkedList.clone()
   - [ ] Object[] LinkedList.toArray()
   - [ ] Spliterator<E> LinkedList.spliterator()
   - [X] boolean LinkedList.add(E e)
   - [X] boolean LinkedList.addAll(Collection<? extends E> c)
   - [X] boolean LinkedList.addAll(int index, Collection<? extends E> c)
   - [ ] boolean LinkedList.contains(Object o)
   - [X] boolean LinkedList.offer(E e)
   - [X] boolean LinkedList.offerFirst(E e)
   - [X] boolean LinkedList.offerLast(E e)
   - [X] boolean LinkedList.remove(Object o)
   - [X] boolean LinkedList.removeFirstOccurrence(Object o)
   - [X] boolean LinkedList.removeLastOccurrence(Object o)
   - [ ] int LinkedList.indexOf(Object o)
   - [ ] int LinkedList.lastIndexOf(Object o)
   - [ ] int LinkedList.size()
   - [X] void LinkedList.add(int index, E element)
   - [X] void LinkedList.addFirst(E e)
   - [X] void LinkedList.addLast(E e)
   - [X] void LinkedList.clear()
   - [X] void LinkedList.push(E e)

** Vector

   - [ ] <T> T[] Vector.toArray(T[] a)
   - [ ] E Vector.elementAt(int index)
   - [ ] E Vector.firstElement()
   - [ ] E Vector.get(int index)
   - [ ] E Vector.lastElement()
   - [ ] E Vector.remove(int index)
   - [ ] E Vector.set(int index, E element)
   - [ ] Enumeration<E> Vector.elements()
   - [ ] Iterator<E> Vector.iterator()
   - [ ] List<E> Vector.subList(int fromIndex, int toIndex)
   - [ ] ListIterator<E> Vector.listIterator()
   - [ ] ListIterator<E> Vector.listIterator(int index)
   - [ ] Object Vector.clone()
   - [ ] Object[] Vector.toArray()
   - [ ] Spliterator<E> Vector.spliterator()
   - [ ] String Vector.toString()
   - [X] boolean Vector.add(E e)
   - [X] boolean Vector.addAll(Collection<? extends E> c)
   - [X] boolean Vector.addAll(int index, Collection<? extends E> c)
   - [ ] boolean Vector.contains(Object o)
   - [ ] boolean Vector.containsAll(Collection<?> c)
   - [ ] boolean Vector.equals(Object o)
   - [ ] boolean Vector.isEmpty()
   - [X] boolean Vector.remove(Object o)
   - [X] boolean Vector.removeAll(Collection<?> c)
   - [X] boolean Vector.removeElement(Object obj)
   - [X] boolean Vector.removeIf(Predicate<? super E> filter)
   - [X] boolean Vector.retainAll(Collection<?> c)
   - [ ] int Vector.capacity()
   - [ ] int Vector.hashCode()
   - [ ] int Vector.indexOf(Object o)
   - [ ] int Vector.indexOf(Object o, int index)
   - [ ] int Vector.lastIndexOf(Object o)
   - [ ] int Vector.lastIndexOf(Object o, int index)
   - [ ] int Vector.size()
   - [X] protected void Vector.removeRange(int fromIndex, int toIndex)
   - [X] void Vector.add(int index, E element)
   - [X] void Vector.addElement(E obj)
   - [X] void Vector.clear()
   - [X] void Vector.copyInto(Object[] anArray)
   - [X] void Vector.ensureCapacity(int minCapacity)
   - [X] void Vector.forEach(Consumer<? super E> action)
   - [X] void Vector.insertElementAt(E obj, int index)
   - [X] void Vector.removeAllElements()
   - [X] void Vector.removeElementAt(int index)
   - [X] void Vector.replaceAll(UnaryOperator<E> operator)
   - [X] void Vector.setElementAt(E obj, int index)
   - [X] void Vector.setSize(int newSize)
   - [X] void Vector.sort(Comparator<? super E> c)
   - [X] void Vector.trimToSize()

** Collections

   - [ ] static <E> Collection<E> Collections.checkedCollection(Collection<E> c, Class<E> type)
   - [ ] static <E> List<E> Collections.checkedList(List<E> list, Class<E> type)
   - [ ] static <E> NavigableSet<E> Collections.checkedNavigableSet(NavigableSet<E> s, Class<E> type)
   - [ ] static <E> NavigableSet<E> Collections.emptyNavigableSet()
   - [ ] static <E> Queue<E> Collections.checkedQueue(Queue<E> queue, Class<E> type)
   - [ ] static <E> Set<E> Collections.checkedSet(Set<E> s, Class<E> type)
   - [ ] static <E> Set<E> Collections.newSetFromMap(Map<E,Boolean> map)
   - [ ] static <E> SortedSet<E> Collections.checkedSortedSet(SortedSet<E> s, Class<E> type)
   - [ ] static <E> SortedSet<E> Collections.emptySortedSet()
   - [ ] static <K,V> Map<K,V> Collections.checkedMap(Map<K,V> m, Class<K> keyType, Class<V> valueType)
   - [ ] static <K,V> Map<K,V> Collections.emptyMap()
   - [ ] static <K,V> Map<K,V> Collections.singletonMap(K key, V value)
   - [ ] static <K,V> Map<K,V> Collections.synchronizedMap(Map<K,V> m)
   - [ ] static <K,V> Map<K,V> Collections.unmodifiableMap(Map<? extends K,? extends V> m)
   - [ ] static <K,V> NavigableMap<K,V> Collections.checkedNavigableMap(NavigableMap<K,V> m, Class<K> keyType, Class<V> valueType)
   - [ ] static <K,V> NavigableMap<K,V> Collections.emptyNavigableMap()
   - [ ] static <K,V> NavigableMap<K,V> Collections.synchronizedNavigableMap(NavigableMap<K,V> m)
   - [ ] static <K,V> NavigableMap<K,V> Collections.unmodifiableNavigableMap(NavigableMap<K,? extends V> m)
   - [ ] static <K,V> SortedMap<K,V> Collections.checkedSortedMap(SortedMap<K,V> m, Class<K> keyType, Class<V> valueType)
   - [ ] static <K,V> SortedMap<K,V> Collections.emptySortedMap()
   - [ ] static <K,V> SortedMap<K,V> Collections.synchronizedSortedMap(SortedMap<K,V> m)
   - [ ] static <K,V> SortedMap<K,V> Collections.unmodifiableSortedMap(SortedMap<K,? extends V> m)
   - [X] static <T extends Comparable<? super T>>void Collections.sort(List<T> list)
   - [ ] static <T extends Object & Comparable<? super T>>T Collections.max(Collection<? extends T> coll)
   - [ ] static <T extends Object & Comparable<? super T>>T Collections.min(Collection<? extends T> coll)
   - [ ] static <T> ArrayList<T> Collections.list(Enumeration<T> e)
   - [ ] static <T> Collection<T> Collections.synchronizedCollection(Collection<T> c)
   - [ ] static <T> Collection<T> Collections.unmodifiableCollection(Collection<? extends T> c)
   - [ ] static <T> Comparator<T> Collections.reverseOrder()
   - [ ] static <T> Comparator<T> Collections.reverseOrder(Comparator<T> cmp)
   - [ ] static <T> Enumeration<T> Collections.emptyEnumeration()
   - [ ] static <T> Enumeration<T> Collections.enumeration(Collection<T> c)
   - [ ] static <T> Iterator<T> Collections.emptyIterator()
   - [ ] static <T> List<T> Collections.emptyList()
   - [ ] static <T> List<T> Collections.nCopies(int n, T o)
   - [ ] static <T> List<T> Collections.singletonList(T o)
   - [ ] static <T> List<T> Collections.synchronizedList(List<T> list)
   - [ ] static <T> List<T> Collections.unmodifiableList(List<? extends T> list)
   - [ ] static <T> ListIterator<T> Collections.emptyListIterator()
   - [ ] static <T> NavigableSet<T> Collections.synchronizedNavigableSet(NavigableSet<T> s)
   - [ ] static <T> NavigableSet<T> Collections.unmodifiableNavigableSet(NavigableSet<T> s)
   - [ ] static <T> Queue<T> Collections.asLifoQueue(Deque<T> deque)
   - [ ] static <T> Set<T> Collections.emptySet()
   - [ ] static <T> Set<T> Collections.singleton(T o)
   - [ ] static <T> Set<T> Collections.synchronizedSet(Set<T> s)
   - [ ] static <T> Set<T> Collections.unmodifiableSet(Set<? extends T> s)
   - [ ] static <T> SortedSet<T> Collections.synchronizedSortedSet(SortedSet<T> s)
   - [ ] static <T> SortedSet<T> Collections.unmodifiableSortedSet(SortedSet<T> s)
   - [ ] static <T> T Collections.max(Collection<? extends T> coll, Comparator<? super T> comp)
   - [ ] static <T> T Collections.min(Collection<? extends T> coll, Comparator<? super T> comp)
   - [ ] static <T> boolean Collections.addAll(Collection<? super T> c, T... elements)
   - [ ] static <T> boolean Collections.replaceAll(List<T> list, T oldVal, T newVal)
   - [ ] static <T> int Collections.binarySearch(List<? extends Comparable<? super T>> list, T key)
   - [ ] static <T> int Collections.binarySearch(List<? extends T> list, T key, Comparator<? super T> c)
   - [X] static <T> void Collections.copy(List<? super T> dest, List<? extends T> src)
   - [X] static <T> void Collections.fill(List<? super T> list, T obj)
   - [X] static <T> void Collections.sort(List<T> list, Comparator<? super T> c)
   - [ ] static boolean Collections.disjoint(Collection<?> c1, Collection<?> c2)
   - [ ] static int Collections.frequency(Collection<?> c, Object o)
   - [ ] static int Collections.indexOfSubList(List<?> source, List<?> target)
   - [ ] static int Collections.lastIndexOfSubList(List<?> source, List<?> target)
   - [X] static void Collections.reverse(List<?> list)
   - [X] static void Collections.rotate(List<?> list, int distance)
   - [X] static void Collections.shuffle(List<?> list)
   - [X] static void Collections.shuffle(List<?> list, Random rnd)
   - [X] static void Collections.swap(List<?> list, int i, int j)

** Arrays

   - [ ] static <T extends Comparable<? super T>>void Arrays.parallelSort(T[] a)
   - [ ] static <T extends Comparable<? super T>>void Arrays.parallelSort(T[] a, int fromIndex, int toIndex)
   - [ ] static <T,U> T[] Arrays.copyOf(U[] original, int newLength, Class<? extends T[]> newType)
   - [ ] static <T,U> T[] Arrays.copyOfRange(U[] original, int from, int to, Class<? extends T[]> newType)
   - [ ] static <T> List<T> Arrays.asList(T... a)
   - [ ] static <T> Spliterator<T> Arrays.spliterator(T[] array)
   - [ ] static <T> Spliterator<T> Arrays.spliterator(T[] array, int startInclusive, int endExclusive)
   - [ ] static <T> Stream<T> Arrays.stream(T[] array)
   - [ ] static <T> Stream<T> Arrays.stream(T[] array, int startInclusive, int endExclusive)
   - [ ] static <T> T[] Arrays.copyOf(T[] original, int newLength)
   - [ ] static <T> T[] Arrays.copyOfRange(T[] original, int from, int to)
   - [ ] static <T> int Arrays.binarySearch(T[] a, T key, Comparator<? super T> c)
   - [ ] static <T> int Arrays.binarySearch(T[] a, int fromIndex, int toIndex, T key, Comparator<? super T> c)
   - [X] static <T> void Arrays.parallelPrefix(T[] array, BinaryOperator<T> op)
   - [X] static <T> void Arrays.parallelPrefix(T[] array, int fromIndex, int toIndex, BinaryOperator<T> op)
   - [X] static <T> void Arrays.parallelSetAll(T[] array, IntFunction<? extends T> generator)
   - [X] static <T> void Arrays.parallelSort(T[] a, Comparator<? super T> cmp)
   - [X] static <T> void Arrays.parallelSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> cmp)
   - [X] static <T> void Arrays.setAll(T[] array, IntFunction<? extends T> generator)
   - [X] static <T> void Arrays.sort(T[] a, Comparator<? super T> c)
   - [X] static <T> void Arrays.sort(T[] a, int fromIndex, int toIndex, Comparator<? super T> c)
   - [ ] static DoubleStream Arrays.stream(double[] array)
   - [ ] static DoubleStream Arrays.stream(double[] array, int startInclusive, int endExclusive)
   - [ ] static IntStream Arrays.stream(int[] array)
   - [ ] static IntStream Arrays.stream(int[] array, int startInclusive, int endExclusive)
   - [ ] static LongStream Arrays.stream(long[] array)
   - [ ] static LongStream Arrays.stream(long[] array, int startInclusive, int endExclusive)
   - [ ] static Spliterator.OfDouble Arrays.spliterator(double[] array)
   - [ ] static Spliterator.OfDouble Arrays.spliterator(double[] array, int startInclusive, int endExclusive)
   - [ ] static Spliterator.OfInt Arrays.spliterator(int[] array)
   - [ ] static Spliterator.OfInt Arrays.spliterator(int[] array, int startInclusive, int endExclusive)
   - [ ] static Spliterator.OfLong Arrays.spliterator(long[] array)
   - [ ] static Spliterator.OfLong Arrays.spliterator(long[] array, int startInclusive, int endExclusive)
   - [ ] static String Arrays.deepToString(Object[] a)
   - [ ] static String Arrays.toString(Object[] a)
   - [ ] static String Arrays.toString(boolean[] a)
   - [ ] static String Arrays.toString(byte[] a)
   - [ ] static String Arrays.toString(char[] a)
   - [ ] static String Arrays.toString(double[] a)
   - [ ] static String Arrays.toString(float[] a)
   - [ ] static String Arrays.toString(int[] a)
   - [ ] static String Arrays.toString(long[] a)
   - [ ] static String Arrays.toString(short[] a)
   - [ ] static boolean Arrays.deepEquals(Object[] a1, Object[] a2)
   - [ ] static boolean Arrays.equals(Object[] a, Object[] a2)
   - [ ] static boolean Arrays.equals(boolean[] a, boolean[] a2)
   - [ ] static boolean Arrays.equals(byte[] a, byte[] a2)
   - [ ] static boolean Arrays.equals(char[] a, char[] a2)
   - [ ] static boolean Arrays.equals(double[] a, double[] a2)
   - [ ] static boolean Arrays.equals(float[] a, float[] a2)
   - [ ] static boolean Arrays.equals(int[] a, int[] a2)
   - [ ] static boolean Arrays.equals(long[] a, long[] a2)
   - [ ] static boolean Arrays.equals(short[] a, short[] a2)
   - [ ] static boolean[] Arrays.copyOf(boolean[] original, int newLength)
   - [ ] static boolean[] Arrays.copyOfRange(boolean[] original, int from, int to)
   - [ ] static byte[] Arrays.copyOf(byte[] original, int newLength)
   - [ ] static byte[] Arrays.copyOfRange(byte[] original, int from, int to)
   - [ ] static char[] Arrays.copyOf(char[] original, int newLength)
   - [ ] static char[] Arrays.copyOfRange(char[] original, int from, int to)
   - [ ] static double[] Arrays.copyOf(double[] original, int newLength)
   - [ ] static double[] Arrays.copyOfRange(double[] original, int from, int to)
   - [ ] static float[] Arrays.copyOf(float[] original, int newLength)
   - [ ] static float[] Arrays.copyOfRange(float[] original, int from, int to)
   - [ ] static int Arrays.binarySearch(Object[] a, Object key)
   - [ ] static int Arrays.binarySearch(Object[] a, int fromIndex, int toIndex, Object key)
   - [ ] static int Arrays.binarySearch(byte[] a, byte key)
   - [ ] static int Arrays.binarySearch(byte[] a, int fromIndex, int toIndex, byte key)
   - [ ] static int Arrays.binarySearch(char[] a, char key)
   - [ ] static int Arrays.binarySearch(char[] a, int fromIndex, int toIndex, char key)
   - [ ] static int Arrays.binarySearch(double[] a, double key)
   - [ ] static int Arrays.binarySearch(double[] a, int fromIndex, int toIndex, double key)
   - [ ] static int Arrays.binarySearch(float[] a, float key)
   - [ ] static int Arrays.binarySearch(float[] a, int fromIndex, int toIndex, float key)
   - [ ] static int Arrays.binarySearch(int[] a, int fromIndex, int toIndex, int key)
   - [ ] static int Arrays.binarySearch(int[] a, int key)
   - [ ] static int Arrays.binarySearch(long[] a, int fromIndex, int toIndex, long key)
   - [ ] static int Arrays.binarySearch(long[] a, long key)
   - [ ] static int Arrays.binarySearch(short[] a, int fromIndex, int toIndex, short key)
   - [ ] static int Arrays.binarySearch(short[] a, short key)
   - [ ] static int Arrays.deepHashCode(Object[] a)
   - [ ] static int Arrays.hashCode(Object[] a)
   - [ ] static int Arrays.hashCode(boolean[] a)
   - [ ] static int Arrays.hashCode(byte[] a)
   - [ ] static int Arrays.hashCode(char[] a)
   - [ ] static int Arrays.hashCode(double[] a)
   - [ ] static int Arrays.hashCode(float[] a)
   - [ ] static int Arrays.hashCode(int[] a)
   - [ ] static int Arrays.hashCode(long[] a)
   - [ ] static int Arrays.hashCode(short[] a)
   - [ ] static int[] Arrays.copyOf(int[] original, int newLength)
   - [ ] static int[] Arrays.copyOfRange(int[] original, int from, int to)
   - [ ] static long[] Arrays.copyOf(long[] original, int newLength)
   - [ ] static long[] Arrays.copyOfRange(long[] original, int from, int to)
   - [ ] static short[] Arrays.copyOf(short[] original, int newLength)
   - [ ] static short[] Arrays.copyOfRange(short[] original, int from, int to)
   - [X] static void Arrays.fill(Object[] a, Object val)
   - [X] static void Arrays.fill(Object[] a, int fromIndex, int toIndex, Object val)
   - [X] static void Arrays.fill(boolean[] a, boolean val)
   - [X] static void Arrays.fill(boolean[] a, int fromIndex, int toIndex, boolean val)
   - [X] static void Arrays.fill(byte[] a, byte val)
   - [X] static void Arrays.fill(byte[] a, int fromIndex, int toIndex, byte val)
   - [X] static void Arrays.fill(char[] a, char val)
   - [X] static void Arrays.fill(char[] a, int fromIndex, int toIndex, char val)
   - [X] static void Arrays.fill(double[] a, double val)
   - [X] static void Arrays.fill(double[] a, int fromIndex, int toIndex, double val)
   - [X] static void Arrays.fill(float[] a, float val)
   - [X] static void Arrays.fill(float[] a, int fromIndex, int toIndex, float val)
   - [X] static void Arrays.fill(int[] a, int fromIndex, int toIndex, int val)
   - [X] static void Arrays.fill(int[] a, int val)
   - [X] static void Arrays.fill(long[] a, int fromIndex, int toIndex, long val)
   - [X] static void Arrays.fill(long[] a, long val)
   - [X] static void Arrays.fill(short[] a, int fromIndex, int toIndex, short val)
   - [X] static void Arrays.fill(short[] a, short val)
   - [X] static void Arrays.parallelPrefix(double[] array, DoubleBinaryOperator op)
   - [X] static void Arrays.parallelPrefix(double[] array, int fromIndex, int toIndex, DoubleBinaryOperator op)
   - [X] static void Arrays.parallelPrefix(int[] array, IntBinaryOperator op)
   - [X] static void Arrays.parallelPrefix(int[] array, int fromIndex, int toIndex, IntBinaryOperator op)
   - [X] static void Arrays.parallelPrefix(long[] array, LongBinaryOperator op)
   - [X] static void Arrays.parallelPrefix(long[] array, int fromIndex, int toIndex, LongBinaryOperator op)
   - [X] static void Arrays.parallelSetAll(double[] array, IntToDoubleFunction generator)
   - [X] static void Arrays.parallelSetAll(int[] array, IntUnaryOperator generator)
   - [X] static void Arrays.parallelSetAll(long[] array, IntToLongFunction generator)
   - [X] static void Arrays.parallelSort(byte[] a)
   - [X] static void Arrays.parallelSort(byte[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.parallelSort(char[] a)
   - [X] static void Arrays.parallelSort(char[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.parallelSort(double[] a)
   - [X] static void Arrays.parallelSort(double[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.parallelSort(float[] a)
   - [X] static void Arrays.parallelSort(float[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.parallelSort(int[] a)
   - [X] static void Arrays.parallelSort(int[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.parallelSort(long[] a)
   - [X] static void Arrays.parallelSort(long[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.parallelSort(short[] a)
   - [X] static void Arrays.parallelSort(short[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.setAll(double[] array, IntToDoubleFunction generator)
   - [X] static void Arrays.setAll(int[] array, IntUnaryOperator generator)
   - [X] static void Arrays.setAll(long[] array, IntToLongFunction generator)
   - [X] static void Arrays.sort(Object[] a)
   - [X] static void Arrays.sort(Object[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.sort(byte[] a)
   - [X] static void Arrays.sort(byte[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.sort(char[] a)
   - [X] static void Arrays.sort(char[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.sort(double[] a)
   - [X] static void Arrays.sort(double[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.sort(float[] a)
   - [X] static void Arrays.sort(float[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.sort(int[] a)
   - [X] static void Arrays.sort(int[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.sort(long[] a)
   - [X] static void Arrays.sort(long[] a, int fromIndex, int toIndex)
   - [X] static void Arrays.sort(short[] a)
   - [X] static void Arrays.sort(short[] a, int fromIndex, int toIndex)

** AbstractCollection

   - [ ] <T> T[] AbstractCollection.toArray(T[] a)
   - [ ] Object[] AbstractCollection.toArray()
   - [ ] String AbstractCollection.toString()
   - [ ] abstract Iterator<E> AbstractCollection.iterator()
   - [ ] abstract int AbstractCollection.size()
   - [X] boolean AbstractCollection.add(E e)
   - [X] boolean AbstractCollection.addAll(Collection<? extends E> c)
   - [ ] boolean AbstractCollection.contains(Object o)
   - [ ] boolean AbstractCollection.containsAll(Collection<?> c)
   - [ ] boolean AbstractCollection.isEmpty()
   - [X] boolean AbstractCollection.remove(Object o)
   - [X] boolean AbstractCollection.removeAll(Collection<?> c)
   - [X] boolean AbstractCollection.retainAll(Collection<?> c)
   - [X] void AbstractCollection.clear()

